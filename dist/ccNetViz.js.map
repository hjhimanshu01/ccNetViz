{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/layout/utils.js","webpack:///./src/utils.js","webpack:///./src/gl.js","webpack:///./src/primitiveTools.js","webpack:///./src/geomutils.js","webpack:///./src/color.js","webpack:///./src/layout/layout.js","webpack:///./src/spatialSearch/spatialSearch.js","webpack:///./src/spatialSearch/rbush.js","webpack:///./src/ccNetVizMultiLevel.js","webpack:///./src/ccNetViz.js","webpack:///./src/layer.js","webpack:///./src/primitive.js","webpack:///./src/shader.js","webpack:///./src/layout/force.js","webpack:///./src/quadTree.js","webpack:///./src/layout/random.js","webpack:///./src/layout/circular.js","webpack:///./src/layout/tree.js","webpack:///./src/layout/treeT.js","webpack:///./src/layout/hierarchical.js","webpack:///./src/layout/hierarchical2.js","webpack:///./src/layout/spectral.js","webpack:///./src/layout/spectral2.js","webpack:///./src/layout/hive.js","webpack:///./src/layout/grid.js","webpack:///./src/layout/versinus.js","webpack:///./src/spatialSearch/geomtools.js","webpack:///./src/dataSources/textures.js","webpack:///./src/dataSources/files.js","webpack:///./src/texts/texts.js","webpack:///./src/texts/default.js","webpack:///./src/texts/sdf/sdf.js","webpack:///./src/texts/sdf/atlas.js","webpack:///./node_modules/shelf-pack/index.umd.js","webpack:///./src/texts/sdf/spriteGenerator.js","webpack:///./src/texts/sdf/glyphTrimmer.js","webpack:///./src/lazyEvents.js","webpack:///./src/interactivityBatch.js","webpack:///./node_modules/ml-array-max/src/index.js","webpack:///./node_modules/ml-array-rescale/src/index.js","webpack:///./node_modules/ml-array-min/src/index.js","webpack:///./node_modules/ml-matrix/src/dc/lu.js","webpack:///./node_modules/ml-matrix/src/dc/util.js","webpack:///./node_modules/ml-matrix/src/dc/svd.js","webpack:///./node_modules/ml-matrix/src/util.js","webpack:///./node_modules/ml-matrix/src/views/base.js","webpack:///./node_modules/ml-matrix/src/views/transpose.js","webpack:///./node_modules/ml-matrix/src/views/row.js","webpack:///./node_modules/ml-matrix/src/views/sub.js","webpack:///./node_modules/ml-matrix/src/views/selection.js","webpack:///./node_modules/ml-matrix/src/views/rowSelection.js","webpack:///./node_modules/ml-matrix/src/views/columnSelection.js","webpack:///./node_modules/ml-matrix/src/views/column.js","webpack:///./node_modules/ml-matrix/src/views/flipRow.js","webpack:///./node_modules/ml-matrix/src/views/flipColumn.js","webpack:///./node_modules/ml-matrix/src/abstractMatrix.js","webpack:///./node_modules/ml-matrix/src/matrix.js","webpack:///./node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","webpack:///./node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","webpack:///./node_modules/ml-matrix/src/wrap/wrap.js","webpack:///./node_modules/ml-matrix/src/dc/qr.js","webpack:///./node_modules/ml-matrix/src/decompositions.js","webpack:///./node_modules/ml-matrix/src/linearDependencies.js","webpack:///./node_modules/ml-matrix/src/dc/evd.js","webpack:///./node_modules/ml-matrix/src/dc/cholesky.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","create2dArray","rows","columns","concat","_toConsumableArray","Array","keys","map","fill","degrees","nodes","edges","length","forEach","e","source","index","target","ordered_nodes","el","sort","a","b","ordered_degrees","getDepth","obj","depth","children","depth_visited","Error","tmpDepth","getRanges","Math","abs","start","step","Utils","from","arguments","k","isObject","url","callback","type","xmlhttp","XMLHttpRequest","onreadystatechange","cbk","readyState","status","response","responseText","responseType","open","send","gl","extensions","getSupportedExtensions","result","indexOf","getExtension","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","img","onLoad","options","createTexture","image","Image","load","onload","bindTexture","TEXTURE_2D","sdf","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","LUMINANCE","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","RGBA","src","naturalWidth","naturalHeight","location","color","uniform4f","g","left","right","bottom","top","near","far","lr","bt","nf","Float32Array","partitionByStyle","data","parts","pN","part","style","undefined","idx","push","sI","getPartitionStyle","baseStyle","styleProperty","copy","ccNetViz_color","this","edgeSource","edgeTarget","x","y","uniqid","is_edge","cx","cy","se","te","Color","_classCallCheck","test","exec","v","parseInt","substring","dim","minX","minY","maxX","Infinity","maxY","max","min","scX","scY","layoutForce","layoutRandom","layoutCircular","layoutTree","layoutTreeT","layoutHierarchical","layoutHierarchical2","layoutSpectral","layoutSpectral2","layoutHive","layoutGrid","layoutVersinus","_primitiveTools","_geomtools","ct","getEdgeShift","context","screensize","ccNetViz_geomutils","getCurveShift","citx","city","ctx","cty","aspect2","len2","width","height","eq","len","sqrt","curveExc","sizex","nodeSize","sizey","Node","EPS","x1","y1","x2","y2","pointInRect","distance2","Label","textpos","fontSize","isSDF","getLabelSize","pos","size","wantedSize","label","fontScale","offset","bbox","offsety","edge","dx","dy","bb","getTextPos","rectIntersectsRect","pDistance2","Line","getPoints","lineIntersectsRect","Circle","xsize","ysize","getBezierPoints","getBBFromPoints","normalize","bezierIntersectsRect","d1","distance2ToBezier","d2","Curve","n2","n3","sortByDistances","e1","e2","dist2","tConst","lines","circles","curves","labels","spatialIndex","texts","nodesParts","linesParts","curvesParts","circlesParts","nodeStyle","getLabelHideScreen","oldsize","types","addEntity","getBBox","sd","sdi","_loop","styles","textEngine","getEngine","font","setFont","sd_n","sdi_n","rbushtree_s","_rbush2","default","rbushtree","ret","isNode","node","dist","isEdge","isLabel","search","intersectsRect","_tryAddEl","radius","xradius","yradius","radius2","remove","arr","insert","rbush","maxEntries","format","_maxEntries","_minEntries","ceil","_initFormat","clear","calcBBox","toBBox","distBBox","child","empty","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","enlargedArea","intersectionArea","contains","intersects","multiSelect","compare","mid","stack","pop","select","z","j","exp","floor","swap","tmp","all","_all","childBBox","nodesToSearch","collides","_build","slice","_splitRoot","tmpNode","_insert","item","parent","goingUp","path","indexes","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","items","N","M","pow","right2","right3","N2","N1","_chooseSubtree","level","targetNode","area","enlargement","minArea","minEnlargement","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","_allDistMargin","leftBBox","rightBBox","margin","siblings","compareArr","Function","join","ccNetVizMultiLevel","canvas","vizLayout","onContextMenu","onClick","vizScreen","ccNetViz","history","curlevel","addEventListener","histel","set","draw","preventDefault","getBoundingClientRect","clientX","clientY","lCoords","getLayerCoords","find","layout","__computedLayout","insidenodes","insideedges","removeEventListener","self","method","window","sCanvas","document","createElement","getContext","attributes","antialias","lastUniqId","checkUniqId","__uniqid","mergeArrays","cmp","_this","backgroundStyle","background","backgroundColor","removed","setted","minSize","maxSize","edgeStyle","arrow","aspect","events","ccNetViz_lazyEvents","layers","view","drawFunc","textures","files","cntShownNodes","getNodesCnt","cntShownEdges","getEdgesCnt","onRedraw","debounce","checkRemoved","error","insertTempLayer","temp","ccNetViz_layer","getSize","getNodeSize","getLabelHideSize","batch","getBatch","ccNetViz_interactivityBatch","layout_options","main","reflow","applyChanges","getVisibleNodes","getVisibleEdges","removeNode","removeEdge","addEdge","addNode","updateNode","updateEdge","addEdges","addNodes","removeEdges","removeNodes","updateNodes","updateEdges","sc","hideSize","vs","silent","ox","oy","transform","ccNetViz_gl","ortho","offsetX","offsetY","count","viewport","COLOR_BUFFER_BIT","scene","elements","getScreenCoords","conf","rect","disth","distw","findMerge","funcname","args","f1","f2","findArea","getTextPosition","chars","zoomevts","addEvts","evts","passive","passiveEvts","removeEvts","onDownThis","downe","_this2","which","parseTouchEvts","touches","sx","sy","od","onDrag","dragged","custom","panning","zooming","origdist","mx","my","drag","checkChangeViewport","up","stop","Date","getTime","lastUpTime","onDblClick","zoom","deltaY","onWheelThis","mouseup","touchend","touchcancel","mousemove","touchmove","mousedown","touchstart","wheel","onWheel","oldx","oldy","mouseX","mouseY","continuosZoom","startView","searchNodes","focus","focusX","focusY","oldX","oldY","oldSize","clearTimeout","setTimeout","deltaMode","delta","onZoom","contextmenu","gl_lose","loseContext","disable","last_view","is_change","ccNetViz_utils","onChangeViewport","toDataURL","resize","offsetWidth","offsetHeight","getViewport","setViewport","resetView","clearColor","blendEquation","FUNC_ADD","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","enable","BLEND","ccNetViz_textures","ccNetViz_files","ccNetViz_texts","warn","isWebGLSupported","spatialSearch","ccNetViz_spatialSearch","ccNetViz_layout","redraw","nodesFiller","iV","iI","ccNetViz_primitive","vertices","position","textureCoord","colors","quad","indices","labelsFiller","relative","steps","cos","sin","ct1","ct2","setVerticeCurveShift","csx","csy","cisx","cisy","curveShift","circleShift","edgesFiller","lengthSoFar","normal","numVertices","numIndices","curve","ydiff2","ydiff3","ydiff4","tx","ty","offsetMul","singles","direction","arrowFiller","lineArrows","curveArrows","circleArrows","getCurrentSpatialSearch","edgeTypes","edgePoses","removedNodes","removedEdges","getIndex","nidx","Uint32Array","dummysd","kArrow","circlesd","linesd","curvesd","OES_standard_derivatives","si","ti","init","tryInitPrimitives","isDirty","defaultAdder","section","addSection","texture","labelAdder","slf","getTexture","is","nodesColored","labelsOutline","enableLazyRedraw","reset","set_end","update","element","attribute","updateEl","freenode","title","removeNodeAtPos","freeedge","removeEdgeAtPos","getEdgeStyleSize","stylesTransl","line","dashed","chain-dotted","dotted","getEdgeType","initExtensions","add","loadCalled","fsColorTexture","fsLabelTexture","lineTypes","fsCurve","getShiftFuncs","uniforms","shader","exc","uniform1f","uniform2f","screen","lineSize","uniformColor","lineStepSize","shaderparams","arrowsize","cexc","vsLabelsShader","bindLabels","is_outline","f","getLabelType","sdfSize","buffer","boldness","height_font","scale","outlineColor","primitive","fs","shaderParams","ccNetViz_shader","buffers","sections","sectionsByStyle","iS","iB","partLength","filler","maxBufferSize","nV","nI","Uint16Array","zerofiller","indicesarr","verticesarr","adder","_iIs","_iVs","_iBs","Uint8Array","_sizes","store","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","styleName","pL","niV","niI","fb","DYNAMIC_DRAW","olds","bufferSubData","BYTES_PER_ELEMENT","storeToPos","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","unbind","defaultAttr","Shader","_gl","_vs","_fs","program","_program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","attrParams","ACTIVE_ATTRIBUTES","getActiveAttrib","useProgram","enableVertexAttribArray","disableVertexAttribArray","friction","charge","gravity","theta2","chargeDistance2","alpha","distances","strengths","charges","repulse","_","point","dw","dn","px","py","pointCharge","q","weight","accumulate","random","_quadTree2","fixed","visit","rnd","fixed2","points","xs","ys","x1_","y1_","x2_","y2_","nx","ny","insertChild","nPoint","xm","ym","below","root","x0","y0","x3","y3","minDistance2","closestPoint","distance","findNode","_class","_nodes","_utils","_edges","_angle_step","PI","starting_angle","_starting_angle","nd","visited_leafs_parent","layer","centered","visited_leafs","drawTreeCentered","stepy","alphay","stepx","alphax","parents","leafs","visited","drawTreeTop","next_layer","neighbors","includes","makeLayers","roots","isroot","max_outdegree","isOrphan","orphan","components","current_component","unvisited","orphans","max_layer","maybe_more","lowest_layer","child_found","sep","parent_found","parent_","component","max_nodes_layer","index_offset","vertical_nodes","current_layer","initializeComponent","candidates","layerNodes","initHierarchy","separateOrphans","unvisitedNodes","findRoots","maybe_mode","placeAdditional","layer_val","placeOrphans","_mlMatrix","A","ii","reduce","foo","EigenvalueDecomposition","iii","second_min","second_mini","third_min","twoSmallest","realEigenvalues","foo_","eigenvectorMatrix","transpose","xy","maxx","maxy","minx","miny","_epsilon","_MAX_ITTERATIONS","_num_elements","_dims","D","graph","zeros","node_degree","deg","dims","u","ones","uhk","rand","itt_count","uk","ul","top_","vmi","ratio","vsi","dot","normalize2","coordinates","euclideanDistance","narr","_margin","_radius","_nlines","nodes_segment","angle","sq","nnodes","nlines","nlines2","_hubs","_intermediary","nhubs_intermediary","nhubs","stepx1","steprad","nintermediary","steprad2","stepx2","p0","p1","nperipheral","stepxx","Number","EPSILON","cuberoot","eqresult","acos","solveCubic","mindist","lineIntersectsLine","l1p1x","l1p1y","l1p2x","l1p2y","l2p1x","l2p1y","l2p2x","l2p2y","neq","checkBezierTkoef","bezierIntersectsLine","tden","sq1","t1","val","r1x","r1y","r2x","r2y","diffx","diffy","diff2xy","p1x","p1y","p2x","p2y","C","len_sq","param","xx","yy","xmin","xmax","ymin","ymax","_load","_textures","_pending","_n","action","allLoaded","emptyObject","_files","dataType","JSON","parse","ajax","_transformFile","_modules","ccNetViz_defaultTexts","ccNetViz_sdfTexts","pbf","_size","_canvas","display","_el","body","appendChild","_context","fillStyle","textAlign","textBaseline","_rendered","_texts","_x","_y","_height","clearRect","fontstr","NaN","text","measureText","fillText","_getText","NEAREST","parentNode","removeChild","DEFAULT_SIZE","atlas","GlyphAtlas","_cachedGlyphs","_glyphs","_rects","spriteGenerator","SpriteGenerator","curFont","_getChar","String","fromCharCode","markDirty","glyphID","charCodeAt","cache","glyph","imgData","_makeRGBAImageData","bitmap","getElementById","putImageData","testCanvas","addGlyph","SimpleGlyph","advance","char","h","it","w","updateTexture","resetCache","_resetCache","bin","ShelfPack","ids","dirty","ALPHA","glyphs","split","id","rects","bufferedWidth","bufferedHeight","padding","packWidth","packHeight","packOne","prevWidth","prevHeight","_texture","deleteTexture","buf","ArrayBuffer","_createTexture","texSubImage2D","autoResize","shelves","freebins","stats","bins","maxId","Shelf","free","pack","allocation","results","inPlace","w2","h2","shelf","waste","h1","w1","best","freebin","getBin","ref","maxh","maxw","allocFreebin","allocShelf","refcount","alloc","unref","factory","round","textSize","cutoff","fontFamily","fontWeight","middle","navigator","userAgent","gridOuter","Float64Array","gridInner","Int16Array","trimmer","Trimmer","alphaChannel","imageData","createImageData","getImageData","Uint8ClampedArray","_edt","process","glyphData","numCols","_edt1d","lb","rb","currentRow","lbs","rbs","res","_findRowBounds","bounds","_findGlyphBounds","newData","newWidth","bufferCol","valueOf","_enable","func","wait","immediate","_arguments","timeout","timestamp","later","last","now","callNow","pushUnique","_layers","_insertTempLayer","_draw","_checkUniqId","_toAddEdges","_toAddNodes","_toRemoveEdges","_toRemoveNodes","_nPos","_ePos","_eDirs","geomutils","_actualTempNodes","_actualTempEdges","_this3","_this4","_doRemoveEdges","_this5","_doRemoveNodes","tid","sid","_doAddNodes","_doAddEdges","src_max","input","isArray","rescale","TypeError","output","currentMin","src_min","currentMax","RangeError","minValue","autoMinMax","maxValue","factor","lu_LuDecomposition","[object Object]","matrix","LUcolj","kmax","lu","WrapperMatrix2D_WrapperMatrix2D","checkMatrix","clone","pivotVector","pivotSign","LU","col","matrix_Matrix","isSingular","X","subMatrixRow","determinant","isSquare","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","getFilled2DArray","array","svd_SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","nct","nrt","mrc","pp","eps","kase","MIN_VALUE","isNaN","ks","cs","sn","sp","spm1","epm1","sk","ek","shift","Y","threshold","scols","Ls","rightSingularVectors","VL","mmul","vrows","urows","VLU","sum","solve","diag","vcols","ucols","condition","norm2","rank","tol","diagonal","leftSingularVectors","isMatrix","diagonalMatrix","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","base_BaseView","AbstractMatrix","super","static","species","transpose_MatrixTransposeView","rowIndex","columnIndex","row_MatrixRowView","sub_MatrixSubView","selection_MatrixSelectionView","rowSelection_MatrixRowSelectionView","columnSelection_MatrixColumnSelectionView","column_MatrixColumnView","flipRow_MatrixFlipRowView","flipColumn_MatrixFlipColumnView","superCtor","Matrix","newRows","newColumns","newMatrix","rng","matrix1","matrix2","klass","jj","rowRep","colRep","constructor","setSubMatrix","mulS","rowVector","getRow","row1","row2","columnVector","getColumn","column1","column2","by","sumByRow","sumByColumn","sumAll","prod","vector2","vector1","other","Bcolj","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","r1","c1","r2","c2","embed","mat","cols","resultat","blockMult","halfRows","halfCols","subMatrix","sub","scaled","setRow","setColumn","compareFunction","compareNumbers","trace","subMatrix0","subMatrix1","subMatrix2","selectionView","det","svdSolution","transposeView","identity","eye","negate","neg","tensorProduct","kroneckerProduct","staticMethodWithArgs","eval2","eval","operator","inplaceOp","fillTemplateFunction","op","inplaceOpS","inplaceOpM","staticOp","methods","mathMethod","inplaceMeth","staticMeth","methodWithArg","inplaceMethWithArgs","staticMethWithArgs","tmplVar","inplaceMethod2","inplaceMethodS","inplaceMethodM","staticMethod2","template","values","replace","RegExp","nRows","nColumns","isInteger","WrapperMatrix1D_WrapperMatrix1D","_calculateIndex","wrap","qr_QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","inverse","useSVD","leftHandSide","rightHandSide","xrange","exception","range","dependenciesOneRow","thresholdValue","thresholdError","returnArray","addRow","linearDependencies","Abis","evd_EigenvalueDecomposition","assumeSymmetric","isSymmetric","hh","tred2","dl1","c3","el1","s2","tst1","tql2","H","ort","high","low","orthes","nn","ra","sa","vr","vi","notlast","cdivres","exshift","norm","iter","cdiv","hqr2","imaginaryEigenvalues","xr","xi","yr","yi","cholesky_CholeskyDecomposition","dimension","positiveDefinite","Lrowj","Lrowk","L","B"],"mappings":"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AS+mB,GAG7B,IAAIqC,EAAoB,SAAC3rB,GACvB,OAAOA,EAAE8M,MAAO,KAQd8e,GACFC,KAAQ,EACRC,OAAY,EACZC,eAAgB,EAChBC,OAAU,GAERC,EAAc,SAACprB,GASjB,YARSkI,IAANlI,IACDA,EAAI+qB,EAAa/qB,SAGVkI,IAANlI,GAAgC,iBAANA,IAC3BA,EAAI,GAGCA,GAIT2I,KAAKnH,SACLmH,KAAKlH,SAEL,IAAI6C,EAAaD,EAAKka,UAAY8M,eAAehnB,EAAI,+BACjDya,EAAQnW,KAAKmW,MAqbjB,WACI,OACIC,YACAuM,IAAK,SAACjsB,EAAMuC,GACRkd,EAAMzf,GAAQuC,EACdkd,EAAMC,SAAS3W,KAAKxG,MA1bK3C,KAAK0J,MAEtC4iB,GAAa,EACjB,IAAIlnB,EAAgF,OAA1EgB,EAAQD,SAAWmmB,IAAeA,GAAa,IAASlmB,EAAQD,SAAiBuD,KAE3F,IAMM6iB,GACF,2BACA,sBACA,6BACA,mBACA,oBACA,kEACA,KAGEC,IACF,2BACA,kCACA,8BACA,qCACA,sBACA,wBACA,0BACA,uDACA,2BACA,gBACA,oBACA,yCACA,+DACA,+CACA,WACA,mEACA,MACA,KAaEC,IACF,sBACA,gCACA,gCACA,4BACA,iCACA,gDACA,4BACA,gCACA,QAEEC,IACF,kDACA,eACA,yBACA,SACA,uBACA,sBACA,sBACA,8BACA,0BACA,kBACA,8BACA,oBACA,4EACE1qB,OAAOyqB,IAAWzqB,QACpB,wBACA,wBACA,yCACA,yCACA,6DACA,0CACA,+BACA,sEACA,MAIE2qB,IACF,6BACA,6BACA,+DACA,6CACA,oFACA,IACA,8BACA,8BACA,wCACA,KAsIJ,GAnIA9M,EAAMwM,IAAI,QAAS,IAAIxF,UAAmBzhB,EAAI8W,EAAW,MACjD,2BACA,2BACA,yBACA,8BACA,qBACA,qBACA,uBACA,yBACA,wBACA,sBACA,0BACA,kBACA,+BACEla,OAAO2qB,IAAe3qB,QACxB,oBACA,uHAEA,+CACA,4CAEA,iBACA,OAEA,2BACA,sBACA,sBACA,kBACA,8BACA,0BACA,oB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","file":"ccNetViz.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nexport function create2dArray (rows, columns) {\r\n    return [...Array(rows).keys()].map(i => Array(columns).fill(0));\r\n}\r\n\r\nexport function degrees(nodes, edges) {\r\n  // should return ordered nodes and their degrees - high to low\r\n  let degrees = Array(nodes.length).fill(0);\r\n  edges.forEach(function(e) {\r\n      degrees[e.source.index] += 1;\r\n      degrees[e.target.index] += 1;\r\n  }); // check to see if not getting double of the degree in undirected graphs\r\n  //getting the order of nodes from highest to lowest degrees\r\n  let ordered_nodes = degrees.map(function(el, i) {\r\n      return { index: i, value: el };\r\n  });\r\n  ordered_nodes.sort(function(a, b) {\r\n      return +(a.value < b.value) || +(a.value === b.value) - 1;\r\n  });\r\n  let ordered_degrees = ordered_nodes.map(function(el){\r\n      return degrees[el.index];\r\n  });\r\n  return { nodes: ordered_nodes,\r\n           degrees: ordered_degrees } ;\r\n}\r\n\r\nexport function getDepth(obj) {\r\n    let depth = 0;\r\n    if (obj.children) {\r\n        obj.children.forEach(function (d) {\r\n\t    if (d.depth_visited == true){\r\n\t\t    throw new Error(\"This layout is only for trees acyclic graphs\");\r\n\t    }\r\n\t    d.depth_visited = true;\r\n            let tmpDepth = getDepth(d);\r\n            if (tmpDepth > depth) {\r\n                depth = tmpDepth;\r\n            }\r\n        })\r\n    }\r\n    return 1 + depth;\r\n}\r\n\r\nexport function getRanges(n) {\r\n  n = Math.abs(n);\r\n  if(n <= 1){\r\n      return {\r\n        start: 0.5,\r\n        step: 1\r\n      };\r\n  }\r\n  let start = .05;\r\n  return {\r\n      start,\r\n      step: (1-2*start)/(n-1)\r\n  }\r\n}\r\n\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class Utils {\r\n  static extend(from){\r\n    for(var i = 1; i < arguments.length; i++){\r\n      for(var k in arguments[i]){\r\n        from[k] = arguments[i][k];\r\n      }\r\n    }\r\n    return from;\r\n  }\r\n  \r\n  static isObject (obj) {\r\n    return obj === Object(obj);\r\n  }\r\n  \r\n  static emptyObject(obj) {\r\n    if(!Utils.isObject(obj))\r\n      return false;\r\n\r\n    for(var k in obj)\r\n      return false;\r\n    return true;\r\n  }\r\n  \r\n  static ajax(url, callback, type){\r\n    var xmlhttp;\r\n    // compatible with IE7+, Firefox, Chrome, Opera, Safari\r\n    xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.onreadystatechange = (function(cbk){\r\n      return function(){\r\n        if (xmlhttp.readyState == 4 && xmlhttp.status == 200){\r\n          cbk(type == 'arraybuffer' ? xmlhttp.response : xmlhttp.responseText);\r\n        }\r\n      }\r\n    })(callback);\r\n    if(type) xmlhttp.responseType=type;\r\n    xmlhttp.open(\"GET\", url, true);\r\n    xmlhttp.send();\r\n  }\r\n\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\n // initialises webGL\r\n\r\nexport default class {\r\n  static initExtensions(gl) {\r\n      let extensions = gl.getSupportedExtensions();\r\n      let result = {};\r\n      for (let i = 1; i < arguments.length; i++) {\r\n          let e = arguments[i];\r\n          (result[e] = extensions.indexOf(e) >= 0) && gl.getExtension(e);\r\n      }\r\n      return result;\r\n  }\r\n  // compiles shader \r\n  \r\n  static createShader(gl, type, source) {\r\n      let result = gl.createShader(type);\r\n      gl.shaderSource(result, source);\r\n      gl.compileShader(result);\r\n\r\n      if (!gl.getShaderParameter(result, gl.COMPILE_STATUS)) {\r\n          console.log(gl.getShaderInfoLog(result));\r\n          return null;\r\n      }\r\n      return result;\r\n  }\r\n\r\n// texture binding\r\n\r\n  static createTexture(gl, img, onLoad, options) {\r\n      let result = gl.createTexture();\r\n\r\n      let image = new Image();\r\n      \r\n      let load = () => {\r\n            image.onload = null;\r\n            gl.bindTexture(gl.TEXTURE_2D, result);\r\n\r\n            //refer article https://open.gl/textures\r\n\r\n            if((options || {}).sdf){\r\n              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, gl.LUMINANCE, gl.UNSIGNED_BYTE, image);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            }else{\r\n              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            }\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            onLoad && onLoad();\r\n      }\r\n\r\n      image.onload = load;\r\n      image.src = img;\r\n      image.naturalWidth && image.naturalHeight && load();\r\n      \r\n      result.image = image;\r\n      return result;\r\n  }\r\n\r\n  static uniformColor(gl, location, color) {\r\n      gl.uniform4f(location, color.r, color.g, color.b, color.a);\r\n  }\r\n\r\n  static ortho(left, right, bottom, top, near, far) {\r\n      let lr = 1 / (left - right),\r\n          bt = 1 / (bottom - top),\r\n          nf = 1 / (near - far);\r\n\r\n      let result = new Float32Array(16);\r\n      result[0] = -2 * lr;\r\n      result[1] = 0;\r\n      result[2] = 0;\r\n      result[3] = 0;\r\n      result[4] = 0;\r\n      result[5] = -2 * bt;\r\n      result[6] = 0;\r\n      result[7] = 0;\r\n      result[8] = 0;\r\n      result[9] = 0;\r\n      result[10] = 2 * nf;\r\n      result[11] = 0;\r\n      result[12] = (left + right) * lr;\r\n      result[13] = (top + bottom) * bt;\r\n      result[14] = (far + near) * nf;\r\n      result[15] = 1;\r\n      return result;\r\n  }\r\n};\r\n","import ccNetViz_color  from './color' ;\r\n\r\nfunction partitionByStyle(data){\r\n    let parts = {};\r\n    \r\n    let pN = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let el = data[i];\r\n        let part = parts[el.style] = parts[el.style] || [];\r\n        if(part.idx === undefined)\r\n          part.idx = [];\r\n        part.idx.push(i); \r\n\r\n        el.sI = pN[el.style] = pN[el.style] === undefined ? 0 : pN[el.style]+1;\r\n        \r\n        part.push(el);\r\n    }\r\n    \r\n    return parts;\r\n}\r\n\r\nfunction getPartitionStyle(style, baseStyle, styleProperty){\r\n    let result = {};\r\n\r\n    let copy = s => {\r\n        if (s) for (let p in s) result[p] = s[p];\r\n    };\r\n\r\n    copy(baseStyle);\r\n    copy(style);\r\n    console.log(baseStyle)\r\n    console.log(style)\r\n    console.log(result)\r\n    if (styleProperty) {\r\n        copy(baseStyle[styleProperty]);\r\n        style && copy(style[styleProperty]);\r\n    }\r\n    result.color = result.color && new ccNetViz_color(result.color);\r\n    return result;\r\n};\r\n\r\n\r\nexport {partitionByStyle, getPartitionStyle};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n// refer edge to edge example\r\n//  each edge if\r\n//  i) from node to node, has source and edge both node\r\n//  ii) from node to edge, has source -> node and target -> edge -> source and target of edge\r\n//  iii) from edge to edge, has source -> source and target of edge , target -> source and target of edge\r\n\r\n export default class {\r\n  static edgeSource(e) {\r\n    if(e.source.source){ //e.source.source would give the edges which start from edge (source is edge)\r\n      let s = this.edgeSource(e.source);\r\n      let t = this.edgeTarget(e.source);\r\n      return {\r\n              x: (s.x+t.x)/2, // middle of x-coordinate of edge\r\n              y: (s.y+t.y)/2, //middle of y-coordinate\r\n              uniqid: e.uniqid, \r\n              index: e.index, \r\n              is_edge: true, \r\n              e: e.source\r\n      };\r\n    }\r\n    \r\n    return e.source;\r\n  }\r\n\r\n  static edgeTarget (e) {\r\n    if(e.target.source){\r\n      //target is edge\r\n      let s = this.edgeSource(e.target);\r\n      let t = this.edgeTarget(e.target);\r\n      \r\n      return {\r\n              x: (s.x+t.x)/2,\r\n              y: (s.y+t.y)/2,\r\n              uniqid: e.uniqid,\r\n              index: e.index,\r\n              is_edge: true,\r\n              e: e.target\r\n      };\r\n    }\r\n\r\n    return e.target;\r\n  }\r\n\r\n  static getCurveShift (e, r){\r\n      r = r || {};\r\n      r.x = r.y = r.cx = r.cy = 0;\r\n      if(!e)\r\n        return r;\r\n      if(e.t && e.t >= 1){\t//curve or circle\r\n        if(e.t >= 2){ //circle\r\n          let s = this.edgeSource(e);\r\n          let d = s.y < 0.5 ? 1 : -1;\r\n\r\n          r.cx = d * 1.25;\r\n          r.cy = 0;\r\n        }else{\r\n          let se = this.edgeSource(e);\r\n          let te = this.edgeTarget(e);\r\n\r\n          r.x = se.x - te.x;\r\n          r.y = se.y - te.y;\r\n        }\r\n      }\r\n      return r;\r\n  }\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default class Color{\r\n  constructor(color){\r\n    this.a = 1;\r\n\r\n    if (color instanceof Color){\r\n        this.r = color.r;\r\n        this.g = color.g;\r\n        this.b = color.b;\r\n        this.a = color.a;\r\n    }\r\n    else if (arguments.length >= 3) {\r\n        this.r = arguments[0];\r\n        this.g = arguments[1];\r\n        this.b = arguments[2];\r\n        arguments.length > 3 && (this.a = arguments[3]);\r\n    }\r\n    else if (/^rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+)\\)$/i.test(color)) {\r\n        color = /^rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec(color);\r\n        let get = v => parseInt(v, 10) / 255;\r\n\r\n        this.r = get(color[1]);\r\n        this.g = get(color[2]);\r\n        this.b = get(color[3]);\r\n        this.a = get(color[4]);\r\n    }\r\n    else if (/^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.test(color)) {\r\n        color = /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec(color);\r\n        let get = v => parseInt(v, 10) / 255;\r\n\r\n        this.r = get(color[1]);\r\n        this.g = get(color[2]);\r\n        this.b = get(color[3]);\r\n    }\r\n    else if (/^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.test(color)) {\r\n        color = /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.exec(color);\r\n        let get = v => parseInt(v, 10) / 100;\r\n\r\n        this.r = get(color[1]);\r\n        this.g = get(color[2]);\r\n        this.b = get(color[3]);\r\n    }\r\n    else if (/^\\#([0-9a-f]{6})$/i.test(color)) {\r\n        color = parseInt(color.substring(1), 16);\r\n        this.r = (color >> 16 & 255) / 255;\r\n        this.g = (color >> 8 & 255) / 255;\r\n        this.b = (color & 255) / 255;\r\n    }\r\n    else {\r\n        this.r = this.g = this.b = 0;\r\n    }\r\n  }\r\n};","import layoutForce from './force' ;\r\nimport layoutRandom from './random' ;\r\nimport layoutCircular from './circular' ;\r\nimport layoutTree from './tree' ;\r\nimport layoutTreeT from './treeT' ;\r\nimport layoutHierarchical from './hierarchical' ;\r\nimport layoutHierarchical2 from './hierarchical2' ;\r\nimport layoutSpectral from './spectral' ;\r\nimport layoutSpectral2 from './spectral2' ;\r\nimport layoutHive from './hive' ;\r\nimport layoutGrid from './grid' ;\r\nimport layoutVersinus from './versinus' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default class {\r\n  static get force(){\r\n    return layoutForce;\r\n  }\r\n  static get random(){\r\n    return layoutRandom;\r\n  }\r\n  static get circular(){\r\n    return layoutCircular;\r\n  }\r\n  static get tree(){\r\n    return layoutTree;\r\n  }\r\n  static get tree2(){\r\n    return layoutTreeT;\r\n  }\r\n  static get hierarchical(){\r\n    return layoutHierarchical;\r\n  }\r\n  static get hierarchical2(){\r\n    return layoutHierarchical2;\r\n  }\r\n  static get spectral(){\r\n    return layoutSpectral;\r\n  }\r\n  static get spectral2(){\r\n    return layoutSpectral2;\r\n  }\r\n  static get hive(){\r\n    return layoutHive;\r\n  }\r\n  static get grid(){\r\n    return layoutGrid;\r\n  }static get versinus(){\r\n    return layoutVersinus;\r\n  }\r\n  \r\n  static normalize (nodes, dim) {\r\n    let minX, minY, n = nodes.length;\r\n    \r\n    if (dim) {\r\n        minX = dim.minX;\r\n        minY = dim.minY;\r\n    }\r\n    else {\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n        minX = minY = Infinity;\r\n        \r\n        for (let i = 0; i < n; i++) {\r\n            let o = nodes[i];\r\n            maxX = Math.max(maxX, o.x);\r\n            maxY = Math.max(maxY, o.y);\r\n            minX = Math.min(minX, o.x);\r\n            minY = Math.min(minY, o.y);\r\n        };\r\n        \r\n        dim = {\r\n            maxX: maxX,\r\n            maxY: maxY,\r\n            minX: minX,\r\n            minY: minY\r\n        }\r\n    }\r\n\r\n    let scX = minX !== dim.maxX ? 1 / (dim.maxX - minX) : ((minX -= 0.5), 1);\r\n    let scY = minY !== dim.maxY ? 1 / (dim.maxY - minY) : ((minY -= 0.5), 1);\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        let o = nodes[i];\r\n        o.x = scX * (o.x - minX);\r\n        o.y = scY * (o.y - minY);\r\n    }\r\n    \r\n    return dim;\r\n  }\r\n  \r\n}\r\n","import rbush from './rbush' ;\r\nimport ccNetViz_geomutils from '../geomutils' ;\r\nimport ccNetViz_utils from '../utils' ;\r\nimport {partitionByStyle, getPartitionStyle} from '../primitiveTools' ;\r\nimport {\r\n        EPS,\r\n        bezierIntersectsRect, \r\n        bezierIntersectsLine, \r\n        lineIntersectsRect, \r\n        rectIntersectsRect, \r\n        pointInRect, \r\n        distance2ToBezier, \r\n        distance2, \r\n        pDistance2, \r\n        getBBFromPoints,\r\n        eq,\r\n        neq\r\n      } from './geomtools';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n\r\n\r\nlet ct = {};\r\nfunction getEdgeShift(context, screensize, e, ct){\r\n  ccNetViz_geomutils.getCurveShift(e,ct);\t//get shift because of edge-to-edge functionality\r\n  \r\n  \r\n  //compute all transformations made in the vertex shader\r\n  let ctx,cty,citx,city;\r\n  \r\n  ctx = -ct.y;\r\n  cty = ct.x * context.aspect2;\r\n  \r\n  let len2 = ctx*context.width*ctx*context.width + cty*context.height*cty*context.height;\r\n  \r\n  if(eq(len2, 0)){\r\n    ctx = 0;\r\n    cty = 0;\r\n  }else{\r\n    let len = Math.sqrt(len2);\r\n    ctx *= context.curveExc * 0.25 * screensize / len;\r\n    cty *= context.curveExc * 0.25 * screensize / len;\r\n  }\r\n\r\n  let sizex = 2.5 * context.nodeSize * screensize / context.width;\r\n  let sizey = 2.5 * context.nodeSize * screensize / context.height;\r\n  citx = -ct.cy * 0.5 * sizex;\r\n  city = ct.cx * 0.5 * sizey;\r\n  \r\n  ct.x = ctx + citx;\r\n  ct.y = cty + city;\r\n}\r\n\r\nclass Node{\r\n  constructor(n){\r\n    this.e = n;\r\n  };\r\n  get isNode(){\r\n    return true;\r\n  };\r\n  getBBox(){\r\n    return [this.e.x-EPS, this.e.y - EPS, this.e.x + EPS, this.e.y + EPS];\r\n  };\r\n  intersectsRect(x1,y1,x2,y2){\r\n    return pointInRect(this.e.x, this.e.y, x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y, context){\r\n    return distance2(x,y,this.e.x,this.e.y);\r\n  };\r\n}\r\n\r\nclass Label{\r\n  constructor(n, textpos, style, fontSize, isSDF, getLabelSize){\r\n    this.e = n;\r\n    this.pos = textpos;\r\n    this.style = style;\r\n    this.fontSize = fontSize;\r\n    this.isSDF = isSDF;\r\n    this.getLabelSize = getLabelSize;\r\n  };\r\n  get isLabel(){\r\n    return true;\r\n  };\r\n  getTextPos(context,size){\r\n    let x = this.e.x;\r\n    let y = this.e.y;\r\n    \r\n    let x1,y1,x2,y2;\r\n    x1 = x2 = x;\r\n    y1 = y2 = y;\r\n    \r\n    let wantedSize = ( this.isSDF ? this.getLabelSize(context, this.style.label || {}) : this.fontSize );\r\n\r\n    let fontScale = wantedSize / this.fontSize;\r\n    if(wantedSize === 0){ fontScale = 0; };\r\n\r\n    let step = (edge, x) => (x < edge ? 0 : 1);\r\n\r\n\r\n    const offset = 0.5 * context.nodeSize;    \r\n    const MAX =  10.;\r\n    const MIN = -10.;\r\n    let bbox = [MAX, MAX, MIN, MIN];\r\n    \r\n    \r\n    this.pos.forEach((c) => {\r\n      const offsety = (2.0 * step(y, 0.5) - 1.0) * offset;\r\n      x1 = x + size * ( c.dx * fontScale ) / context.width / 2;\r\n      y1 = y + size * ( ( c.dy * fontScale ) + offsety ) / context.height / 2;\r\n      x2 = x + size * ( ( ( c.dx + c.width ) * fontScale ) ) / context.width / 2;\r\n      y2 = y + size * ( ( ( c.dy + c.height ) * fontScale ) + offsety ) / context.height / 2;\r\n      \r\n      bbox[0] = Math.min(x1,bbox[0]);\r\n      bbox[1] = Math.min(y1,bbox[1]);\r\n      bbox[2] = Math.max(x2,bbox[2]);\r\n      bbox[3] = Math.max(y2,bbox[3]);\r\n    });\r\n    \r\n    return bbox;\r\n  };\r\n  getBBox(context){\r\n    let bb = this.getTextPos(context,1);\r\n    bb[0] = Math.min(bb[0],this.e.x);\r\n    bb[1] = Math.min(bb[1],this.e.y);\r\n    bb[2] = Math.max(bb[2],this.e.x);\r\n    bb[3] = Math.max(bb[3],this.e.y);\r\n    return bb;\r\n  };\r\n  intersectsRect(x1,y1,x2,y2,context,size){\r\n    let t = this.getTextPos(context,size);\r\n    return rectIntersectsRect(x1,y1,x2,y2,t[0],t[1],t[2],t[3]);\r\n  };\r\n  dist2(x,y, context, size){\r\n    let t = this.getTextPos(context, size);\r\n\r\n    if(pointInRect(x,y,t[0],t[1],t[2],t[3]))\r\n      return 0;\r\n    \r\n    //minimum from distance from corners or distance from borders\r\n    return Math.min(\r\n      distance2(t[0],t[1]),\r\n      distance2(t[2],t[3]),\r\n      distance2(t[0],t[3]),\r\n      distance2(t[2],t[1]),\r\n      pDistance2(x,y,t[0],t[1],t[2],t[1]),\r\n      pDistance2(x,y,t[0],t[3],t[2],t[3]),\r\n      pDistance2(x,y,t[0],t[1],t[0],t[3]),\r\n      pDistance2(x,y,t[2],t[1],t[2],t[3])              \r\n    );\r\n  };\r\n}\r\n\r\nclass Line{\r\n  constructor(l){\r\n    this.e = l;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getPoints(context, size){\r\n    let x1,y1,x2,y2;\r\n    \r\n    let s = ccNetViz_geomutils.edgeSource(this.e);\r\n    let t = ccNetViz_geomutils.edgeTarget(this.e);\r\n    \r\n    x1 = s.x;\r\n    y1 = s.y;\r\n    x2 = t.x;\r\n    y2 = t.y;\r\n    \r\n    getEdgeShift(context, size, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    getEdgeShift(context, size, t.e, ct);\r\n    x2 += ct.x;\r\n    y2 += ct.y;\r\n\r\n    return [x1,y1,x2,y2];\r\n  };\r\n  getBBox(context, size){\r\n    let p = this.getPoints(context, size);\r\n    \r\n    return [Math.min(p[0],p[2]), Math.min(p[1],p[3]), Math.max(p[0],p[2]), Math.max(p[1],p[3])];\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size){\r\n    let p = this.getPoints(context, size);\r\n\r\n    return lineIntersectsRect(p[0], p[1], p[2], p[3], x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y, context, size){\r\n    let p = this.getPoints(context, size);\r\n\r\n    return pDistance2(x,y,p[0],p[1],p[2],p[3]);\r\n  };\r\n}\r\n\r\nclass Circle{\r\n  constructor(c){\r\n    this.e = c;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getBezierPoints(context, screensize){\r\n    let x1,y1,s;\r\n    s = ccNetViz_geomutils.edgeSource(this.e);\r\n    x1 = s.x;\r\n    y1 = s.y;\r\n\r\n    let size = 2.5 * context.nodeSize * screensize;\r\n    let xsize = size / context.width / 2;\r\n    let ysize = size / context.height / 2;\r\n\r\n    let d = s.y < 0.5 ? 1 : -1;\r\n\r\n    getEdgeShift(context, screensize, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    \r\n    return [\r\n      x1,\r\n      y1,\r\n      x1 + xsize*1,\r\n      y1 + ysize*d,\r\n      x1,\r\n      y1 + ysize*1.25*d,\r\n      x1 - xsize*1,\r\n      y1 + ysize*d\r\n    ];\r\n  };\r\n  getBBox(context, size){\r\n    let v = this.getBezierPoints(context, size);\r\n    \r\n    return getBBFromPoints(v);\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size, normalize){\r\n    let v = this.getBezierPoints(context,size);\r\n    return bezierIntersectsRect(v[0],v[1],v[2],v[3],v[4],v[5],x1,y1,x2,y2) || bezierIntersectsRect(v[2],v[3],v[4],v[5],v[6],v[7],x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y,context,size){\r\n    let v = this.getBezierPoints(context,size);\r\n\r\n    //circle is just 2 bezier curves :)\r\n    let d1 = distance2ToBezier(x,y,v[0],v[1],v[2],v[3],v[4],v[5]);\r\n    let d2 = distance2ToBezier(x,y,v[2],v[3],v[4],v[5],v[6],v[7]);\r\n\r\n    return Math.min(d1,d2);\r\n  };\r\n}\r\n\r\nclass Curve{\r\n  constructor(c){\r\n    this.e = c;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getBezierPoints(context, size, normalize){\r\n    let x1,x2,y1,y2;\r\n    let s = ccNetViz_geomutils.edgeSource(this.e);\r\n    let t = ccNetViz_geomutils.edgeTarget(this.e);\r\n\r\n    x1 = s.x;\r\n    y1 = s.y;\r\n    x2 = t.x;\r\n    y2 = t.y; \r\n    \r\n    let d = normalize(s, t);\r\n    \r\n    let n2 = d.y;\r\n    let n3 = context.aspect2*-d.x;\r\n\r\n    let x = context.width * n2;\r\n    let y = context.height* n3;\r\n    let l = Math.sqrt(x*x+y*y)*2;\r\n\r\n    n2 *= context.curveExc*size/l;\r\n    n3 *= context.curveExc*size/l;\r\n\r\n    getEdgeShift(context, size, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    getEdgeShift(context, size, t.e, ct);\r\n    x2 += ct.x;\r\n    y2 += ct.y;\r\n\r\n    let ret = [\r\n      x1,\r\n      y1,\r\n      (x1+x2)/2 + n2,\r\n      (y1+y2)/2 + n3,\r\n      x2,\r\n      y2\r\n    ];\r\n    return ret;\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return bezierIntersectsRect(v[0],v[1],v[2],v[3],v[4],v[5],x1,y1,x2,y2);\r\n  };\r\n  getBBox(context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return getBBFromPoints(v);\r\n  };\r\n  dist2(x,y, context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return distance2ToBezier(x,y,v[0],v[1],v[2],v[3],v[4],v[5]);\r\n  };\r\n}\r\n\r\n\r\nfunction sortByDistances(e1, e2){\r\n  return e1.dist2 - e2.dist2;\r\n}\r\n\r\n\r\nlet tConst = {nodes: Node, lines: Line, circles: Circle, curves: Curve, labels: Label};\r\n\r\nexport default class spatialIndex{\r\n  constructor(c, texts, options, nodes, nodesParts, lines, linesParts, curves, curvesParts, circles, circlesParts, normalize, nodeStyle, getLabelSize, getLabelHideScreen){\r\n    //init all elements into rbush tree with size 1 (outer bound - the worst case)\r\n    const size = 1; const oldsize = c.size || 1; c.size = 1.;\r\n    \r\n    this.texts = texts;\r\n    this.normalize = normalize;\r\n    let t = this.types = {nodes: [], lines: [], circles: [], curves: [], labels: []};\r\n    let i = 0, d = [];\r\n\r\n    let addEntity = (e, d, i) => {\r\n      d[i] = e.getBBox(c, size, normalize);\r\n      d[i].push(e);\r\n      return e;\r\n    };\r\n    \r\n    nodes.forEach((n) => {\r\n      t.nodes.push(addEntity(new Node(n), d, i++));\r\n    });\r\n\r\n    lines.forEach((l) => {\r\n      t.lines.push(addEntity(new Line(l), d, i++));\r\n    });\r\n\r\n    circles.forEach((c) => {\r\n      t.circles.push(addEntity(new Circle(c), d, i++));\r\n    });\r\n    \r\n    curves.forEach((c) => {\r\n      t.curves.push(addEntity(new Curve(c), d, i++));\r\n    });\r\n\r\n\r\n    let sd = {};\r\n    let sdi = {};\r\n\r\n\r\n    //labels position could differ by style >> must partition by it\r\n    for(let style in nodesParts){\r\n      let nodes = nodesParts[style];\r\n\r\n\r\n      let ns = getPartitionStyle(options.styles[style],nodeStyle,\"label\");\r\n      let textEngine = texts.getEngine(ns.font);\r\n      textEngine.setFont(ns.font);\r\n      const fontSize = textEngine.fontSize;\r\n      const isSDF = textEngine.isSDF;\r\n\r\n      let sd_n = (sd[style] || (sd[style] = []));\r\n      let sdi_n = (sdi[style] || (sdi[style] = 0));\r\n\r\n      //biggest size in which the text is shown\r\n      c.size = getLabelHideScreen(c, ns.label || {});\r\n      nodes.forEach((n) => {\r\n        let textpos = textEngine.get(n.label, n.x, n.y);\r\n        t.labels.push(addEntity(new Label(n,textpos, ns, fontSize, isSDF, getLabelSize), sd_n, sdi_n++));\r\n      });\r\n\r\n      sdi[style] = sdi_n;\r\n    }\r\n\r\n    this.rbushtree_s = {};\r\n    for(let style in sd){\r\n        let rb = this.rbushtree_s[style] = rbush();\r\n        rb.load(sd[style]);\r\n    }\r\n\r\n    //tree initialization\r\n    this.rbushtree = rbush();\r\n    this.rbushtree.load(d);\r\n    \r\n    \r\n    //restore the size of scale (loosen outer the upper bound)\r\n    c.size = oldsize;\r\n  }\r\n  _tryAddEl(ret, e, dist2, nodes, edges, labels){\r\n    if(nodes && e.isNode){\r\n      ret.nodes.push({node:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n    if(edges && e.isEdge){\r\n      ret.edges.push({edge:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n    if(labels && e.isLabel){\r\n      ret.labels.push({label:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n  }\r\n  findArea(context,x1,y1,x2,y2,size,nodes,edges,labels){\r\n    if(x1 > x2){\r\n      let p = x1;\r\n      x1 = x2;\r\n      x2 = p;\r\n    }\r\n    if(y1 > y2){\r\n      let p = y1;\r\n      y1 = y2;\r\n      y2 = p;\r\n    }\r\n\r\n    \r\n    let ret = {};\r\n    if(edges) ret.edges = [];\r\n    if(nodes) ret.nodes = [];\r\n    if(labels) ret.labels = [];\r\n\r\n    let x = (x1+x2)/2;\r\n    let y = (y1+y2)/2;\r\n\r\n    let data = this.rbushtree.search([x1-EPS, y1-EPS, x2+EPS,  y2+EPS]);\r\n    if(labels){\r\n        for(let s in this.rbushtree_s){\r\n            data = data.concat(this.rbushtree_s[s].search([x1-EPS, y1-EPS, x2+EPS,  y2+EPS]));\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      let e = data[i][4];\r\n      let dist2 = e.dist2(x,y, context, size, this.normalize, this.texts);\r\n      if(!e.intersectsRect(x1,y1,x2,y2,context, size, this.normalize, this.texts))\r\n        continue;\r\n\r\n      this._tryAddEl(ret, e, dist2, nodes, edges, labels);\r\n    }\r\n    \r\n    for(let k in ret){\r\n      ret[k].sort(sortByDistances);\r\n    }\r\n\r\n    return ret;    \r\n  }\r\n  find(context, x,y, radius, size, nodes, edges, labels){\r\n    let ret = {};\r\n    if(edges) ret.edges = [];\r\n    if(nodes) ret.nodes = [];\r\n    if(labels) ret.labels = [];\r\n\r\n    let xradius = radius;\r\n    let yradius = radius;\r\n\r\n    let radius2 = radius*radius;\r\n\r\n    let data = this.rbushtree.search([x - xradius, y - yradius, x + xradius,  y + yradius]);\r\n    if(labels){\r\n        for(let s in this.rbushtree_s){\r\n            data = data.concat(this.rbushtree_s[s].search([x - xradius, y - yradius, x + xradius,  y + yradius]));\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      let e = data[i][4];\r\n      let dist2 = e.dist2(x,y, context, size, this.normalize, this.texts);\r\n      if(dist2 > radius2)\r\n        continue;\r\n\r\n      this._tryAddEl(ret, e, dist2, nodes, edges, labels);\r\n    }\r\n\r\n    for(let k in ret){\r\n      ret[k].sort(sortByDistances);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n  update(context, t, i, v){\r\n    //init all elements into rbush tree with size 1 (the biggest possible - the worst case)\r\n    let size = 1;\r\n\r\n    this.rbushtree.remove(this.types[t][i]);\r\n\r\n    let e = new tConst[t](v);\r\n    let arr = e.getBBox(context, size, this.normalize, this.texts);\r\n    arr.push(e);\r\n\r\n    this.rbushtree.insert(this.types[t][i] = arr);\r\n  }\r\n}","/*\r\n (c) 2015, Vladimir Agafonkin\r\n RBush, a JavaScript library for high-performance 2D spatial indexing of points and rectangles.\r\n https://github.com/mourner/rbush\r\n*/\r\n\r\n\r\nfunction rbush(maxEntries, format) {\r\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries || 9);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n\r\n    if (format) {\r\n        this._initFormat(format);\r\n    }\r\n\r\n    this.clear();\r\n}\r\n\r\nrbush.prototype = {\r\n\r\n    all: function () {\r\n        return this._all(this.data, []);\r\n    },\r\n\r\n    search: function (bbox) {\r\n\r\n        var node = this.data,\r\n            result = [],\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node.bbox)) return result;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    collides: function (bbox) {\r\n\r\n        var node = this.data,\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node.bbox)) return false;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    load: function (data) {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from stratch using OMT algorithm\r\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                var tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    insert: function (item) {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    },\r\n\r\n    clear: function () {\r\n        this.data = {\r\n            children: [],\r\n            height: 1,\r\n            bbox: empty(),\r\n            leaf: true\r\n        };\r\n        return this;\r\n    },\r\n\r\n    remove: function (item) {\r\n        if (!item) return this;\r\n\r\n        var node = this.data,\r\n            bbox = this.toBBox(item),\r\n            path = [],\r\n            indexes = [],\r\n            i, parent, index, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                index = node.children.indexOf(item);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node.bbox, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    toBBox: function (item) { return item; },\r\n\r\n    compareMinX: function (a, b) { return a[0] - b[0]; },\r\n    compareMinY: function (a, b) { return a[1] - b[1]; },\r\n\r\n    toJSON: function () { return this.data; },\r\n\r\n    fromJSON: function (data) {\r\n        this.data = data;\r\n        return this;\r\n    },\r\n\r\n    _all: function (node, result) {\r\n        var nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push.apply(result, node.children);\r\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    },\r\n\r\n    _build: function (items, left, right, height) {\r\n\r\n        var N = right - left + 1,\r\n            M = this._maxEntries,\r\n            node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = {\r\n                children: items.slice(left, right + 1),\r\n                height: 1,\r\n                bbox: null,\r\n                leaf: true\r\n            };\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = {\r\n            children: [],\r\n            height: height,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        var N2 = Math.ceil(N / M),\r\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\r\n            i, j, right2, right3;\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (i = left; i <= right; i += N1) {\r\n\r\n            right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (j = i; j <= right2; j += N2) {\r\n\r\n                right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    },\r\n\r\n    _chooseSubtree: function (bbox, node, level, path) {\r\n\r\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\r\n\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            minArea = minEnlargement = Infinity;\r\n\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n                child = node.children[i];\r\n                area = bboxArea(child.bbox);\r\n                enlargement = enlargedArea(bbox, child.bbox) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    },\r\n\r\n    _insert: function (item, level, isNode) {\r\n\r\n        var toBBox = this.toBBox,\r\n            bbox = isNode ? item.bbox : toBBox(item),\r\n            insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node.bbox, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    },\r\n\r\n    // split overflowed node into two\r\n    _split: function (insertPath, level) {\r\n\r\n        var node = insertPath[level],\r\n            M = node.children.length,\r\n            m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        var newNode = {\r\n            children: node.children.splice(splitIndex, node.children.length - splitIndex),\r\n            height: node.height,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n\r\n        if (node.leaf) newNode.leaf = true;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    },\r\n\r\n    _splitRoot: function (node, newNode) {\r\n        // split root node\r\n        this.data = {\r\n            children: [node, newNode],\r\n            height: node.height + 1,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n        calcBBox(this.data, this.toBBox);\r\n    },\r\n\r\n    _chooseSplitIndex: function (node, m, M) {\r\n\r\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\r\n\r\n        minOverlap = minArea = Infinity;\r\n\r\n        for (i = m; i <= M - m; i++) {\r\n            bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            overlap = intersectionArea(bbox1, bbox2);\r\n            area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis: function (node, m, M) {\r\n\r\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\r\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\r\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\r\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    },\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin: function (node, m, M, compare) {\r\n\r\n        node.children.sort(compare);\r\n\r\n        var toBBox = this.toBBox,\r\n            leftBBox = distBBox(node, 0, m, toBBox),\r\n            rightBBox = distBBox(node, M - m, M, toBBox),\r\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\r\n            i, child;\r\n\r\n        for (i = m; i < M - m; i++) {\r\n            child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child.bbox);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (i = M - m - 1; i >= m; i--) {\r\n            child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child.bbox);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    },\r\n\r\n    _adjustParentBBoxes: function (bbox, path, level) {\r\n        // adjust bboxes along the given tree path\r\n        for (var i = level; i >= 0; i--) {\r\n            extend(path[i].bbox, bbox);\r\n        }\r\n    },\r\n\r\n    _condense: function (path) {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    },\r\n\r\n    _initFormat: function (format) {\r\n        // data format (minX, minY, maxX, maxY accessors)\r\n\r\n        // uses eval-type function compilation instead of just accepting a toBBox function\r\n        // because the algorithms are very sensitive to sorting functions performance,\r\n        // so they should be dead simple and without inner calls\r\n\r\n        var compareArr = ['return a', ' - b', ';'];\r\n\r\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\r\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\r\n\r\n        this.toBBox = new Function('a', 'return [a' + format.join(', a') + '];');\r\n    }\r\n};\r\n\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox(node, toBBox) {\r\n    node.bbox = distBBox(node, 0, node.children.length, toBBox);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox(node, k, p, toBBox) {\r\n    var bbox = empty();\r\n\r\n    for (var i = k, child; i < p; i++) {\r\n        child = node.children[i];\r\n        extend(bbox, node.leaf ? toBBox(child) : child.bbox);\r\n    }\r\n\r\n    return bbox;\r\n}\r\n\r\nfunction empty() { return [Infinity, Infinity, -Infinity, -Infinity]; }\r\n\r\nfunction extend(a, b) {\r\n    a[0] = Math.min(a[0], b[0]);\r\n    a[1] = Math.min(a[1], b[1]);\r\n    a[2] = Math.max(a[2], b[2]);\r\n    a[3] = Math.max(a[3], b[3]);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX(a, b) { return a.bbox[0] - b.bbox[0]; }\r\nfunction compareNodeMinY(a, b) { return a.bbox[1] - b.bbox[1]; }\r\n\r\nfunction bboxArea(a)   { return (a[2] - a[0]) * (a[3] - a[1]); }\r\nfunction bboxMargin(a) { return (a[2] - a[0]) + (a[3] - a[1]); }\r\n\r\nfunction enlargedArea(a, b) {\r\n    return (Math.max(b[2], a[2]) - Math.min(b[0], a[0])) *\r\n           (Math.max(b[3], a[3]) - Math.min(b[1], a[1]));\r\n}\r\n\r\nfunction intersectionArea(a, b) {\r\n    var minX = Math.max(a[0], b[0]),\r\n        minY = Math.max(a[1], b[1]),\r\n        maxX = Math.min(a[2], b[2]),\r\n        maxY = Math.min(a[3], b[3]);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains(a, b) {\r\n    return a[0] <= b[0] &&\r\n           a[1] <= b[1] &&\r\n           b[2] <= a[2] &&\r\n           b[3] <= a[3];\r\n}\r\n\r\nfunction intersects(a, b) {\r\n    return b[0] <= a[2] &&\r\n           b[1] <= a[3] &&\r\n           b[2] >= a[0] &&\r\n           b[3] >= a[1];\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect(arr, left, right, n, compare) {\r\n    var stack = [left, right],\r\n        mid;\r\n\r\n    while (stack.length) {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        select(arr, left, right, mid, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\n// Floyd-Rivest selection algorithm:\r\n// sort an array between left and right (inclusive) so that the smallest k elements come first (unordered)\r\nfunction select(arr, left, right, k, compare) {\r\n    var n, i, z, s, sd, newLeft, newRight, t, j;\r\n\r\n    while (right > left) {\r\n        if (right - left > 600) {\r\n            n = right - left + 1;\r\n            i = k - left + 1;\r\n            z = Math.log(n);\r\n            s = 0.5 * Math.exp(2 * z / 3);\r\n            sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (i - n / 2 < 0 ? -1 : 1);\r\n            newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\r\n            newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\r\n            select(arr, newLeft, newRight, k, compare);\r\n        }\r\n\r\n        t = arr[k];\r\n        i = left;\r\n        j = right;\r\n\r\n        swap(arr, left, k);\r\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\r\n\r\n        while (i < j) {\r\n            swap(arr, i, j);\r\n            i++;\r\n            j--;\r\n            while (compare(arr[i], t) < 0) i++;\r\n            while (compare(arr[j], t) > 0) j--;\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\r\n        else {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k) left = j + 1;\r\n        if (k <= j) right = j - 1;\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nexport default rbush;","import ccNetViz from './ccNetViz';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n// this file is used when we have more than 1 layer , goto example multi level\r\n\r\nvar ccNetVizMultiLevel = function(canvas, options){\r\n  var vizScreen = new ccNetViz(canvas, options);\r\n  var vizLayout;\r\n\r\n  var history = [];\r\n  var curlevel = {};\r\n\r\n\r\n  var onContextMenu, onClick;\r\n  \r\n  //right click >> go back\r\n  canvas.addEventListener('contextmenu', onContextMenu = function(e){\r\n    if(history.length > 0){\r\n\tvar histel = history.pop();\r\n\t//currently shown level\r\n\tcurlevel = histel;\r\n\r\n\tvizScreen.set(curlevel.nodes, curlevel.edges);\r\n\tvizScreen.draw();\r\n    }\r\n\r\n    e.preventDefault();\r\n  });\r\n\r\n  canvas.addEventListener('click', onClick = function(e){\r\n    var bb = canvas.getBoundingClientRect();\r\n    var x = e.clientX - bb.left;\r\n    var y = e.clientY - bb.top;\r\n    var radius = 5;\r\n\r\n    var lCoords = vizScreen.getLayerCoords({radius: radius, x:x, y:y});\r\n    var result = vizScreen.find(lCoords.x,lCoords.y,lCoords.radius,true,false);\r\n    if(result.nodes.length > 0){\r\n      var node = result.nodes[0].node;\r\n\r\n      var layout = node.layout || vizLayout;\r\n      if(node.__computedLayout){\r\n\t//it is not nessesary to recompute layout if it was yet computed on this subgraph\r\n\tlayout = undefined;\r\n      }else{\r\n\t//we store that layout was once computed for this subgraph\r\n        node.__computedLayout = true;\r\n      }\r\n\r\n      if(node.nodes && node.edges){\r\n\tvar insidenodes = node.nodes;\r\n\tvar insideedges = node.edges;\r\n\r\n\thistory.push(curlevel);\r\n\tcurlevel = {nodes: insidenodes, edges: insideedges};\r\n\r\n\tvizScreen.set(curlevel.nodes, curlevel.edges, layout);\r\n\tvizScreen.draw();\r\n      }\r\n    }\r\n  });\r\n  \r\n  ////TODO: Add interactivity functions into this class\r\n  \r\n  this.remove = function(){\r\n    canvas.removeEventListener('contextmenu', onContextMenu);\r\n    canvas.removeEventListener('click', onClick);\r\n    vizScreen.remove();\r\n  };\r\n\r\n\r\n  this.set = function(nodes, edges, layout){\r\n    curlevel = {nodes: nodes, edges: edges};\r\n    history = [];\r\n\r\n    vizLayout = layout;\r\n    vizScreen.set.apply(vizScreen, arguments);\r\n  }\r\n  // apply the functions to the layer\r\n  var exposeMethods = ['find', 'findArea', 'getLayerCoords', 'draw', 'resetView', 'setViewport', 'update', 'resetView'];\r\n  var self = this;\r\n  exposeMethods.forEach(function(method){\r\n    (function(method, self){\r\n      self[method] = function(){\r\n\treturn vizScreen[method].apply(vizScreen, arguments);\r\n      };\r\n    })(method, self);\r\n  });\r\n};\r\n\r\n\r\nwindow.ccNetVizMultiLevel = ccNetVizMultiLevel;\r\n\r\nexport default ccNetVizMultiLevel;","import ccNetViz_layer         from './layer';\r\nimport ccNetViz_layout        from './layout/layout';\r\nimport ccNetViz_gl            from'./gl';\r\nimport ccNetViz_color         from './color';\r\nimport ccNetViz_utils         from './utils';\r\nimport ccNetViz_textures      from './dataSources/textures';\r\nimport ccNetViz_files         from './dataSources/files';\r\nimport ccNetViz_texts         from './texts/texts' ;\r\nimport ccNetViz_lazyEvents    from './lazyEvents';\r\nimport ccNetViz_interactivityBatch from './interactivityBatch';\r\nimport ccNetViz_spatialSearch from './spatialSearch/spatialSearch';\r\nimport {getPartitionStyle}    from './primitiveTools' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors:\r\n *  David Tichy\r\n *    Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\nlet sCanvas = document.createElement(\"canvas\");\r\nfunction getContext(canvas){\r\n    let attributes = { depth: false, antialias: false };\r\n    let gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\r\n\r\n    return gl;\r\n}\r\n\r\n\r\nvar lastUniqId = 0;\r\n\r\nfunction checkUniqId(el){\r\n  if(el.__uniqid !== undefined){\r\n    el.uniqid = el.__uniqid;\r\n    delete el.__uniqid;\r\n  }else if(el.uniqid === undefined){\r\n    el.uniqid = ++lastUniqId;\r\n  }\r\n}\r\n\r\n\r\nfunction mergeArrays(a, b, cmp){\r\n  let r = [];\r\n  r.length = a.length + b.length;\r\n\r\n  let i = 0,j=0,k=0;\r\n\r\n  while (i < a.length && j < b.length)\r\n  {\r\n    if (cmp(a[i],b[j]) < 0)\r\n      r[k++] = a[i++];\r\n    else\r\n      r[k++] = b[j++];\r\n  }\r\n\r\n  while (i < a.length)\r\n    r[k++] = a[i++];\r\n\r\n\r\n  while (j < b.length)\r\n    r[k++] = b[j++];\r\n\r\n  return r;\r\n}\r\n\r\nvar ccNetViz = function(canvas, options){\r\n  let self = this;\r\n  canvas = canvas || sCanvas;\r\n\r\n  let backgroundStyle = options.styles.background = options.styles.background || {};\r\n  let backgroundColor = new ccNetViz_color(backgroundStyle.color || \"rgb(255, 255, 255)\");\r\n\r\n  let removed = false;\r\n  let setted  = false;\r\n\r\n  let nodeStyle = options.styles.node = options.styles.node || {};\r\n  nodeStyle.minSize = nodeStyle.minSize != null ? nodeStyle.minSize : 6;\r\n  nodeStyle.maxSize = nodeStyle.maxSize || 16;\r\n  nodeStyle.color = nodeStyle.color || \"rgb(255, 255, 255)\";\r\n\r\n  if (nodeStyle.label) {\r\n      let s = nodeStyle.label;\r\n      s.color = s.color || \"rgb(120, 120, 120)\";\r\n      s.font = s.font || {type:\"Arial, Helvetica, sans-serif\", size: 11};\r\n  }\r\n\r\n  let edgeStyle = options.styles.edge = options.styles.edge || {};\r\n  edgeStyle.width = edgeStyle.width || 1;\r\n  edgeStyle.color = edgeStyle.color || \"rgb(204, 204, 204)\";\r\n\r\n  let onLoad = () => { if(!options.onLoad || options.onLoad()){this.draw(true);} };\r\n\r\n  if (edgeStyle.arrow) {\r\n      let s = edgeStyle.arrow;\r\n      s.minSize = s.minSize != null ? s.minSize : 6;\r\n      s.maxSize = s.maxSize || 12;\r\n      s.aspect = 1;\r\n  }\r\n\r\n\r\n  let events = new ccNetViz_lazyEvents();\r\n  let layers = {};\r\n  let view,gl,drawFunc,textures,files,texts;\r\n  let context = {};\r\n\r\n  this.cntShownNodes = () => {\r\n    let n = 0;\r\n    for(var k in layers)\r\n      n += layers[k].cntShownNodes();\r\n    return n;\r\n  }\r\n  let getNodesCnt = options.getNodesCnt || this.cntShownNodes;\r\n\r\n  this.cntShownEdges = () => {\r\n    let e = 0;\r\n    for(var k in layers)\r\n      e += layers[k].cntShownEdges();\r\n    return e;\r\n  }\r\n  let getEdgesCnt = options.getEdgesCnt || this.cntShownEdges;\r\n\r\n  let onRedraw = events.debounce(() => {\r\n    self.draw.call(self);\r\n    return false;\r\n  }, 5);\r\n\r\n  function checkRemoved(){\r\n    if(removed){\r\n      console.error(\"Cannot call any function on graph after remove()\")\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  let nodes, edges;\r\n\r\n  function insertTempLayer(){\r\n    if(layers.temp)\r\n      return;\r\n    layers.temp = new ccNetViz_layer(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad);\r\n  }\r\n\r\n  let batch = undefined;\r\n  function getBatch(){\r\n    if(!batch)\r\n      batch = new ccNetViz_interactivityBatch(layers, insertTempLayer, drawFunc, nodes, edges, checkUniqId);\r\n    return batch;\r\n  };\r\n\r\n  this.set = (n, e, layout, layout_options={}) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes = n || [];\r\n    edges = e || [];\r\n\r\n    nodes.forEach(checkUniqId);\r\n    edges.forEach(checkUniqId);\r\n\r\n    layers.temp && layers.temp.set([], [], layout, layout_options);\r\n    layers.main.set(nodes, edges, layout, layout_options);\r\n\r\n    //reset batch\r\n    batch = undefined;\r\n    setted = true;\r\n    return this;\r\n  };\r\n\r\n  //make all dynamic changes static\r\n  this.reflow = () => {\r\n    if(checkRemoved()) return;\r\n\r\n    getBatch().applyChanges();\r\n\r\n    //nodes and edges in dynamic chart are actual\r\n    let n = layers.main.getVisibleNodes();\r\n    if(layers.temp)  n = n.concat(layers.temp.getVisibleNodes());\r\n\r\n    let e = layers.main.getVisibleEdges();\r\n    if(layers.temp) e = e.concat(layers.temp.getVisibleEdges());\r\n\r\n    this.set(n,e);\r\n    this.draw();\r\n  };\r\n\r\n  this.removeNode = (n) => { if(checkRemoved()){return this;} getBatch().removeNode(n); return this; };\r\n  this.removeEdge = (e) => { if(checkRemoved()){return this;} getBatch().removeEdge(e); return this; };\r\n  this.addEdge = (e) => { if(checkRemoved()){return this;} getBatch().addEdge(e); return this;};\r\n  this.addNode = (n) => { if(checkRemoved()){return this;} getBatch().addNode(n); return this;};\r\n  this.updateNode = (n) => { if(checkRemoved()){return this;} return this.removeNode(n).addNode(n); };\r\n  this.updateEdge = (e) => { if(checkRemoved()){return this;} return this.removeEdge(e).addEdge(e); };\r\n  this.applyChanges = () => { if(checkRemoved()){return this;} getBatch().applyChanges(); return this; };\r\n\r\n  this.addEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.addEdge(e);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.addNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.addNode(n);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.removeEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.removeEdge(e);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  this.removeNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.removeNode(n);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  this.updateNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.updateNode(n);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.updateEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.updateEdge(e);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n\r\n  let getSize = (c, s, n, sc) => {\r\n    let result = sc * Math.sqrt(c.width * c.height / (n+1)) / view.size;\r\n    if (s) {\r\n      let min = s.size ? s.size : s.minSize;\r\n      let max = s.size ? s.size : s.maxSize;\r\n\r\n      result = max ? Math.min(max, result) : result;\r\n      if(result < s.hideSize)\r\n        return 0;\r\n      result = min ? Math.max(min, result) : result;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  let getNodeSize = c => getSize(c, c.style, getNodesCnt(), 0.4);\r\n  let getLabelSize = (c,s) => getSize(c, s, getNodesCnt(), 0.25);\r\n\r\n  let getLabelHideSize = (c,s) => {\r\n    if(s){\r\n        const sc = 0.25;\r\n        let n = layers.main.cntShownNodes();  //lower bound\r\n        let t = sc * Math.sqrt(c.width * c.height / ( n+1 ) );\r\n\r\n        let vs;\r\n        if(s.hideSize){\r\n            vs = t / s.hideSize;\r\n            if(s.maxSize)\r\n                vs = Math.min(vs, t / s.maxSize);\r\n            return vs;\r\n        }\r\n    }\r\n\r\n    return 1;\r\n  };\r\n\r\n  let offset = 0.5 * nodeStyle.maxSize;\r\n\r\n  this.draw = (silent) => {\r\n    if(silent && (removed || !setted) ) return;\r\n    if(checkRemoved()) return;\r\n\r\n    let width = canvas.width;\r\n    let height = canvas.height;\r\n    let aspect = width / height;\r\n    let o = view.size === 1 ? offset : 0;\r\n    let ox = o / width;\r\n    let oy = o / height;\r\n\r\n    context.transform = ccNetViz_gl.ortho(view.x - ox, view.x + view.size + ox, view.y - oy, view.y + view.size + oy, -1, 1);\r\n    context.offsetX   = ox;\r\n    context.offsetY   = oy;\r\n    context.width     = 0.5 * width;\r\n    context.height    = 0.5 * height;\r\n    context.aspect2   = aspect * aspect;\r\n    context.aspect    = aspect;\r\n    context.count     = getNodesCnt();\r\n\r\n    //bad hack because we use different size for curveExc and for nodeSize :(\r\n    if(context.style) delete context.style;\r\n    context.curveExc = getSize(context, undefined, getEdgesCnt(), 0.5);\r\n    context.style     = nodeStyle;\r\n    context.nodeSize = getNodeSize(context);\r\n\r\n    gl && gl.viewport(0, 0, width, height);\r\n\r\n    gl && gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    for(let i = 0; i < layers.main.scene.elements.length; i++){\r\n      layers.main.scene.elements[i].draw(context);\r\n      layers.temp && layers.temp.scene.elements[i].draw(context);\r\n    }\r\n  };\r\n  drawFunc = this.draw.bind(this);\r\n\r\n  this.getScreenCoords = function(conf){\r\n    if(checkRemoved()) return;\r\n    let ret = {};\r\n    let rect = canvas.getBoundingClientRect();\r\n    if(conf.x !== undefined) ret.x = (conf.x - view.x + context.offsetX) / (view.size + 2*context.offsetX) * canvas.width + rect.left;\r\n    if(conf.y !== undefined) ret.y = ( 1 - ( conf.y - view.y + context.offsetY) / (view.size + 2*context.offsetY) )  * canvas.height + rect.top;\r\n    return ret;\r\n  };\r\n\r\n  this.getLayerCoords = function(conf){\r\n    if(checkRemoved()) return;\r\n\r\n    let ret = {};\r\n\r\n    ['x','x1','x2'].forEach(k => {\r\n      if(conf[k] !== undefined){\r\n        let x = conf[k];\r\n        x = (x/canvas.width)*(view.size+2*context.offsetX)-context.offsetX+view.x;\r\n        ret[k] = x;\r\n      }\r\n    });\r\n\r\n\r\n    ['y','y1','y2'].forEach(k => {\r\n      if(conf[k] !== undefined){\r\n        let y = conf[k];\r\n        y = (1-y/canvas.height)*(view.size+2*context.offsetY)-context.offsetY+view.y;\r\n        ret[k] = y;\r\n      }\r\n    });\r\n\r\n    if(conf.radius !== undefined){\r\n      let dist = conf.radius;\r\n\r\n      let disth = dist / canvas.height;\r\n      let distw = dist / canvas.width;\r\n      dist = Math.max(disth, distw) * view.size;\r\n\r\n      ret.radius = dist;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  let findMerge = function(funcname, args){\r\n    if(checkRemoved() || !gl) return;\r\n\r\n    let f1 = layers.main[funcname].apply(layers.main, args);\r\n\r\n    if(!layers.temp)\r\n      return f1;\r\n\r\n    let f2 = layers.temp[funcname].apply(layers.temp, args);\r\n\r\n    let r = {};\r\n    for(let key in f1){\r\n      r[key] = mergeArrays(f1[key], f2[key], (e1, e2) => {\r\n        return e1.dist2 - e2.dist2;\r\n      });\r\n    }\r\n\r\n    return r;\r\n  };\r\n\r\n  this.find = function(){return findMerge('find', arguments); };\r\n  this.findArea = function(){return findMerge('findArea', arguments); };\r\n\r\n  this.getTextPosition = (n) => {\r\n    if(checkRemoved() || !gl) return;\r\n\r\n    const offset = 0.5 * context.nodeSize;\r\n    const offsety = (2.0 * (n.y <=  0.5 ? 0 : 1) - 1.0) * offset;\r\n\r\n    let ns = getPartitionStyle(options.styles[n.style],nodeStyle,\"label\");\r\n    let textEngine = texts.getEngine(ns.font);\r\n    textEngine.setFont(ns.font);\r\n\r\n    let wantedSize = ( textEngine.isSDF ? getLabelSize(context, ns.label || {}) : textEngine.fontSize );\r\n    let fontScale = wantedSize / textEngine.fontSize; if(wantedSize === 0){ fontScale = 0; };\r\n\r\n    return {offsetY: offsety, fontScale: fontScale, chars: textEngine.get(n.label, n.x, n.y)};\r\n  };\r\n\r\n\r\n\r\n  let addEvts = (el, evts) => {\r\n    for(var k in (evts || {})){\r\n      evts[k] && el.addEventListener(k, evts[k], {passive: options.passiveEvts});\r\n    }\r\n  }\r\n\r\n  let removeEvts = (el, evts) => {\r\n    for(var k in (evts || {})){\r\n      evts[k] && el.removeEventListener(k, evts[k]);\r\n    }\r\n  }\r\n\r\n  let onDownThis = onMouseDown.bind(this);\r\n\r\n  let zoomevts;\r\n  addEvts(canvas, zoomevts = {\r\n    'mousedown': onDownThis,\r\n    'touchstart': onDownThis,\r\n    'wheel': onWheel.bind(this),\r\n    'contextmenu': options.onContextMenu\r\n  })\r\n\r\n  this.remove = () => {\r\n    if(checkRemoved()) return;\r\n\r\n    for(var k in layers){layers[k].remove();}\r\n\r\n    if(gl){\r\n      gl.viewport(0, 0, context.width*2, context.height*2);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n      let gl_lose = gl.getExtension('WEBGL_lose_context');\r\n      gl_lose && gl_lose.loseContext();\r\n    }\r\n\r\n    removeEvts(canvas, zoomevts);\r\n\r\n    events.disable();\r\n    texts && texts.remove();\r\n\r\n    removed = true;\r\n  }\r\n\r\n  let last_view = {};\r\n  function checkChangeViewport(){\r\n    let is_change = false;\r\n    if(last_view){\r\n      for(let k in view){\r\n        if(last_view[k] !== view[k])\r\n          is_change = true;\r\n      }\r\n    }\r\n    ccNetViz_utils.extend(last_view, view);\r\n\r\n    if(is_change){\r\n      options.onChangeViewport && options.onChangeViewport(view);\r\n    }\r\n  }\r\n\r\n  function onContextMenu(e){\r\n  }\r\n\r\n  function onWheel(e) {\r\n      let rect = canvas.getBoundingClientRect();\r\n\r\n      if(!options.passiveEvts){ e.preventDefault(); }\r\n\r\n      let oldsize, oldx, oldy;\r\n\r\n      // Mouse coordinates\r\n      const mouseX = e.clientX - rect.left;\r\n      const mouseY = e.clientY - rect.top;\r\n      const radius = 10;\r\n\r\n      // if no timer found i.e. we are not in continuous phase\r\n      // we are calculating the focus variables again\r\n      if(!onWheel.continuosZoom) {\r\n          onWheel.startView = {size: view.size, x: view.x, y: view.y};\r\n\r\n          const lCoords = this.getLayerCoords({ x1: mouseX - radius, y1: mouseY - radius, x2: mouseX + radius, y2: mouseY - radius });\r\n          const searchNodes = this.findArea(lCoords.x1, lCoords.y1, lCoords.x2, lCoords.y2, true);\r\n          // if node found beneath mouse_ptr, zooming_focus is the center of that node\r\n          if (searchNodes.nodes.length) {\r\n              let node = searchNodes.nodes[0];\r\n              let focus = this.getScreenCoords({\r\n                  x: node.node.x,\r\n                  y: node.node.y\r\n              });\r\n              onWheel.focusX = focus.x;\r\n              onWheel.focusY = focus.y;\r\n          }\r\n          // else, it is the window co-ords of the mouse_ptr\r\n          else {\r\n              onWheel.focusX = mouseX;\r\n              onWheel.focusY = mouseY;\r\n          }\r\n          onWheel.oldX = view.x;\r\n          onWheel.oldY = view.y;\r\n          onWheel.oldSize = view.size;\r\n\r\n          if(onWheel.continuosZoom)\r\n              clearTimeout(onWheel.continuosZoom);\r\n\r\n          oldx = view.x;\r\n          oldy = view.y;\r\n      }\r\n      onWheel.continuosZoom = setTimeout(() => {\r\n        onWheel.continuosZoom = undefined;\r\n      }, 200);\r\n\r\n      let size = Math.min(1.0, view.size * (1 + 0.001 * (e.deltaMode ? 33 : 1) * e.deltaY));\r\n      let delta = size - onWheel.oldSize;\r\n\r\n      view.size = size;\r\n      view.x = Math.max(0, Math.min(1 - size, onWheel.oldX - delta * onWheel.focusX / canvas.width));\r\n      view.y = Math.max(0, Math.min(1 - size, onWheel.oldY - delta * (1 - onWheel.focusY / canvas.height)));\r\n\r\n      if(options.onZoom && options.onZoom(view) === false){\r\n        view.size = oldsize;\r\n        view.x = oldx;\r\n        view.y = oldy;\r\n        return;\r\n      }\r\n\r\n      checkChangeViewport();\r\n\r\n      this.draw();\r\n  }\r\n\r\n  let lastUpTime = 0;\r\n  function onMouseDown(downe) {\r\n    if(downe.which !== 1) return; //catch only 1 - left mouse button\r\n\r\n    let parseTouchEvts = (e) => {\r\n      if(!e.touches) return e;\r\n\r\n      let x = 0,y = 0;\r\n      for(let i = 0; i < e.touches.length; i++){ x += e.touches[i].clientX; y += e.touches[i].clientY; }\r\n      e.clientX = x / e.touches.length;\r\n      e.clientY = y / e.touches.length;\r\n\r\n      return e;\r\n    }\r\n\r\n\r\n    downe = parseTouchEvts(downe);\r\n\r\n\r\n    let width = canvas.width / view.size;\r\n    let height = canvas.height / view.size;\r\n    let sx = downe.clientX;\r\n    let sy = downe.clientY;\r\n    let dx = view.x + sx / width;\r\n    let dy = sy / height - view.y;\r\n    let od = options.onDrag;\r\n    let dragged, custom;\r\n    let panning = true;\r\n    let zooming = false;\r\n    let evts;\r\n\r\n    let origdist;\r\n    if((downe.touches || []).length === 2){\r\n      let mx = downe.touches[0].clientX - downe.touches[1].clientX, my = downe.touches[0].clientY - downe.touches[1].clientY;\r\n      origdist = Math.sqrt( mx * mx + my * my );\r\n      zooming = true;\r\n    }\r\n\r\n\r\n    let drag = e => {\r\n      e = parseTouchEvts(e);\r\n\r\n      if(e.touches && e.touches.length != 1)  panning = false;\r\n\r\n      if (dragged) {\r\n          if(panning){\r\n              if (custom) {\r\n                  od.drag && od.drag(e);\r\n              }\r\n              else {\r\n                  view.x = Math.max(0, Math.min(1 - view.size, dx - e.clientX / width));\r\n                  view.y = Math.max(0, Math.min(1 - view.size, e.clientY / height - dy));\r\n                  checkChangeViewport();\r\n                  this.draw();\r\n              }\r\n          }\r\n      }\r\n      else {\r\n          let x,y;\r\n          if(e.touches && e.touches.length > 0){ x = e.touches[0].clientX; y = e.touches[0].clientY; } else { x = e.clientX; y = e.clientY; }\r\n\r\n          let mx = x - sx;\r\n          let my = y - sy;\r\n\r\n          if (mx * mx + my * my > 8) {\r\n              dragged = true;\r\n              custom = od && od.start(downe);\r\n              custom && od.drag && od.drag(e);\r\n          }\r\n      }\r\n      if(!options.passiveEvts){ e.preventDefault(); }\r\n    };\r\n\r\n    let up = e => {\r\n        e = parseTouchEvts(e);\r\n\r\n        custom && od.stop && od.stop(e);\r\n\r\n        if(!dragged){\r\n          options.onClick && options.onClick(e);\r\n\r\n          if( new Date().getTime() - lastUpTime < 250 ) {\r\n            options.onDblClick && options.onDblClick(e);\r\n            lastUpTime = 0;\r\n          }else{\r\n            lastUpTime = new Date().getTime();\r\n          }\r\n        }\r\n\r\n        removeEvts(window, evts);\r\n    };\r\n\r\n    let zoom = e => {\r\n        e = parseTouchEvts(e);\r\n\r\n        if(e.touches && e.touches.length == 2){\r\n            let mx = e.touches[0].clientX - e.touches[1].clientX, my = e.touches[0].clientY - e.touches[1].clientY;\r\n            let dist = Math.sqrt(mx * mx + my * my);\r\n            e.deltaY = -(dist - origdist)*5;\r\n            onWheelThis(e);\r\n            origdist = dist;\r\n        }\r\n    };\r\n\r\n    addEvts(window, evts = {\r\n      'mouseup': up,\r\n      'touchend': up,\r\n      'touchcancel': up,\r\n      'mousemove': zooming ? zoom : drag,\r\n      'touchmove': zooming ? zoom : drag\r\n    });\r\n  }\r\n\r\n\r\n  this.image = function() {\r\n    if(checkRemoved()) return;\r\n\r\n    return canvas.toDataURL();\r\n  }\r\n\r\n  this.resize = function() {\r\n    if(checkRemoved()) return;\r\n\r\n    canvas.width = canvas.offsetWidth;\r\n    canvas.height = canvas.offsetHeight;\r\n  }\r\n\r\n  this.getViewport = function() {\r\n    return view;\r\n  }\r\n\r\n  this.setViewport = function(v) {\r\n    if(checkRemoved()) return;\r\n\r\n    ccNetViz_utils.extend(view, v);\r\n\r\n    checkChangeViewport();\r\n  }\r\n\r\n  this.resetView = () => this.setViewport({size:1,x:0,y:0});\r\n\r\n  //expose these methods from layer into this class\r\n  ['update'].forEach(function(method){\r\n    (function(method, self){\r\n      self[method] = function(){\r\n        let args = arguments;\r\n        for(let k in layers){\r\n          let l = layers[k];\r\n          l[method].apply(l,args);\r\n        };\r\n        return self;\r\n      };\r\n    })(method, self);\r\n  });\r\n\r\n  if(gl = getContext(canvas)){\r\n    gl.clearColor(backgroundColor.r, backgroundColor.g, backgroundColor.b, backgroundColor.a);\r\n    gl.blendEquation(gl.FUNC_ADD);\r\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);\r\n    gl.enable(gl.BLEND);\r\n  }\r\n\r\n  view = {size:1,x:0,y:0};\r\n\r\n  this.resize();\r\n\r\n  textures = new ccNetViz_textures(events, onLoad);\r\n  files = new ccNetViz_files(events, onLoad);\r\n  texts = gl && (new ccNetViz_texts(gl, files, textures));\r\n  layers.main = new ccNetViz_layer(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad);\r\n\r\n  if(!gl)\r\n    console.warn(\"Cannot initialize WebGL context\");\r\n};\r\n\r\nccNetViz.isWebGLSupported = () => !!getContext(sCanvas);\r\n\r\n\r\nccNetViz.color = ccNetViz_color;\r\nccNetViz.spatialSearch = ccNetViz_spatialSearch;\r\nccNetViz.layout = ccNetViz_layout;\r\nccNetViz.color = ccNetViz_color;\r\n\r\n\r\nwindow.ccNetViz = ccNetViz;\r\nexport default ccNetViz;\r\n","import ccNetViz_color     from './color' ;\r\nimport ccNetViz_gl        from './gl' ;\r\nimport ccNetViz_primitive from './primitive' ;\r\nimport ccNetViz_layout    from './layout/layout' ;\r\nimport ccNetViz_geomutils from './geomutils' ;\r\nimport ccNetViz_utils     from './utils' ;\r\nimport {partitionByStyle} from './primitiveTools';\r\nimport ccNetViz_spatialSearch from './spatialSearch/spatialSearch' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors:\r\n * \tDavid Tichy\r\n * \tAleš Saska - http://alessaska.cz/\r\n */\r\n\r\nexport default function(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad) {\r\n    getNodesCnt = getNodesCnt || (()=>{return this.nodes.length;});\r\n    getEdgesCnt = getEdgesCnt || (()=>{return this.edges.length;});\r\n\r\n    this.redraw = onRedraw || (() => {});\r\n\r\n    options = options || {};\r\n    options.styles = options.styles || {};\r\n    \r\n  //\r\n    let nodesFiller = (\r\n      style => ({\r\n        set: (v, e, iV, iI) => {\r\n            let x = e.x;\r\n            let y = e.y;\r\n            ccNetViz_primitive.vertices(v.position, iV, x, y, x, y, x, y, x, y);\r\n            ccNetViz_primitive.vertices(v.textureCoord, iV, 0, 0, 1, 0, 1, 1, 0, 1);\r\n            if(v.color){\r\n              let c = e.color;\r\n              ccNetViz_primitive.colors(v.color, iV, c, c, c, c);\r\n            }\r\n            ccNetViz_primitive.quad(v.indices, iV, iI);\r\n        }})\r\n    );\r\n    let labelsFiller = (style => {\r\n        return (function(style){\r\n          let textEngine = texts.getEngine(style.font);\r\n\r\n          textEngine.setFont(style.font);\r\n\r\n          return {\r\n              set: (v, e, iV, iI) => {\r\n                var x = e.x;\r\n                var y = e.y;\r\n\r\n                var ret = false;\r\n                var parts = textEngine.get(e.label || \"\", x, y, () => {ret = true;});\r\n                for(var i = 0; i < parts.length; i++, iV += 4, iI += 6){\r\n                  let c = parts[i];\r\n\r\n                  ccNetViz_primitive.vertices(v.position, iV, x, y, x, y, x, y, x, y);\r\n                  ccNetViz_primitive.vertices(v.relative, iV, c.dx, c.dy, c.width + c.dx, c.dy, c.width + c.dx, c.height + c.dy, c.dx, c.height + c.dy);\r\n                  ccNetViz_primitive.vertices(v.textureCoord, iV, c.left, c.bottom, c.right, c.bottom, c.right, c.top, c.left, c.top);\r\n                  ccNetViz_primitive.quad(v.indices, iV, iI);\r\n                }\r\n\r\n                return ret;\r\n              },\r\n              size: (v,e) => {\r\n                return textEngine.steps(e.label || \"\");\r\n              }\r\n            };\r\n        })(style);\r\n    });\r\n\r\n    let normalize = (a, b) => {\r\n        let x = b.x - a.x;\r\n        let y = b.y - a.y;\r\n        let sc = 1 / Math.sqrt(x*x + y*y);\r\n        return { x: sc * x, y: sc * y };\r\n    };\r\n\r\n    let dx = Math.cos(0.9);\r\n    let dy = Math.sin(0.9);\r\n\r\n    let ct1 = {}, ct2 = {}, ct = {};\r\n    let setVerticeCurveShift = (v,iV,s,t) => {\r\n        let csx,csy,ctx,cty,cisx,cisy,sisy,citx,city;\r\n        ccNetViz_geomutils.getCurveShift(t.e,ct1);\r\n        ctx = ct1.x;\r\n        cty = ct1.y;\r\n        citx = ct1.cx;\r\n        city = ct1.cy;\r\n\r\n        ccNetViz_geomutils.getCurveShift(s.e,ct2);\r\n        csx = ct2.x;\r\n        csy = ct2.y;\r\n        cisx = ct2.cx;\r\n        cisy = ct2.cy;\r\n\r\n        v.curveShift && ccNetViz_primitive.vertices(v.curveShift, iV, -csy, csx, -csy, csx, -cty, ctx, -cty, ctx);\r\n        v.circleShift && ccNetViz_primitive.vertices(v.circleShift, iV, -cisy, cisx, -cisy, cisx, -city, citx, -city, citx);\r\n    };\r\n\r\n    let edgesFiller = {\r\n      'lines': (style => ({\r\n            set: (v, e, iV, iI) => {\r\n                let s = ccNetViz_geomutils.edgeSource(e);\r\n                let t = ccNetViz_geomutils.edgeTarget(e);\r\n                let dx = s.x-t.x;\r\n                let dy = s.y-t.y;\r\n                let d = normalize(s, t);\r\n\r\n                setVerticeCurveShift(v,iV,s,t);\r\n\r\n                ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, s.x, s.y, t.x, t.y, t.x, t.y);\r\n                ccNetViz_primitive.vertices(v.lengthSoFar, iV, 0, 0,0,0,dx, dy, dx, dy);\r\n                ccNetViz_primitive.vertices(v.normal, iV, -d.y, d.x, d.y, -d.x, d.y, -d.x, -d.y, d.x);\r\n                ccNetViz_primitive.quad(v.indices, iV, iI);\r\n            }})),\r\n       'curves': (style => ({\r\n                    numVertices: 3,\r\n                    numIndices: 3,\r\n                    set: (v, e, iV, iI) => {\r\n                        let s = ccNetViz_geomutils.edgeSource(e);\r\n                        let t = ccNetViz_geomutils.edgeTarget(e);\r\n                        let dx = s.x-t.x;\r\n                        let dy = s.y-t.y;\r\n                        let d = normalize(s, t);\r\n\r\n                        setVerticeCurveShift(v,iV,s,t);\r\n\r\n                        ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, 0.5 * (t.x + s.x), 0.5 * (t.y + s.y), t.x, t.y);\r\n                        ccNetViz_primitive.vertices(v.lengthSoFar, iV, 0, 0,dx/2, dy/2, dx, dy);\r\n                        ccNetViz_primitive.vertices(v.normal, iV, 0, 0, d.y, -d.x, 0, 0);\r\n                        ccNetViz_primitive.vertices(v.curve, iV, 1, 1, 0.5, 0.0, 0, 0);\r\n                        ccNetViz_primitive.indices(v.indices, iV, iI, 0, 1, 2);\r\n                    }\r\n                })),\r\n       'circles': (style => ({\r\n                    set: (v, e, iV, iI) => {\r\n                        let s = ccNetViz_geomutils.edgeSource(e);\r\n                        let d = s.y < 0.5 ? 1 : -1;\r\n\r\n                        let xdiff1 = 0;\r\n                        let ydiff1 = 0;\r\n                        let xdiff2 = 1;\r\n                        let ydiff2 = d;\r\n                        let xdiff3 = 2;\r\n                        let ydiff3 = 1.25*d;\r\n                        let xdiff4 = 3;\r\n                        let ydiff4 = 1.5*d;\r\n\r\n                        setVerticeCurveShift(v,iV,s,s);\r\n\r\n                        ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, s.x, s.y, s.x, s.y, s.x, s.y);\r\n                        ccNetViz_primitive.vertices(v.lengthSoFar, iV, xdiff1, ydiff1, xdiff2, ydiff2, xdiff3, ydiff3, xdiff4, ydiff4);\r\n                        ccNetViz_primitive.vertices(v.normal, iV, 0, 0, 1, d, 0, 1.25 * d, -1, d);\r\n                        ccNetViz_primitive.vertices(v.curve, iV, 1, 1, 0.5, 0, 0, 0, 0.5, 0);\r\n                        ccNetViz_primitive.quad(v.indices, iV, iI);\r\n                    }\r\n                }))\r\n    };\r\n\r\n    let set = (v, e, s, t, iV, iI, dx, dy) => {\r\n        let tx = t.x;\r\n        let ty = t.y;\r\n\r\n        let offsetMul;\r\n        let ctx,cty,citx,city;\r\n\r\n        ccNetViz_geomutils.getCurveShift(t.e,ct);\r\n        ctx = ct.x;\r\n        cty = ct.y;\r\n        citx = ct.cx;\r\n        city = ct.cy;\r\n\r\n        if(t.is_edge){\t//if target is edge, disable node offset for arrow\r\n          //normal of that edge\r\n          offsetMul = 0;\r\n        }else{\r\n          offsetMul = 1;\r\n        }\r\n        v.curveShift && ccNetViz_primitive.vertices(v.curveShift, iV, -cty, ctx, -cty, ctx, -cty, ctx, -cty, ctx);\r\n        v.circleShift && ccNetViz_primitive.vertices(v.circleShift, iV, -city, citx, -city, citx, -city, citx, -city, citx);\r\n\r\n        ccNetViz_primitive.singles(v.offsetMul, iV, offsetMul, offsetMul, offsetMul, offsetMul);\r\n        ccNetViz_primitive.vertices(v.position, iV, tx, ty, tx, ty, tx, ty, tx, ty);\r\n        ccNetViz_primitive.vertices(v.direction, iV, dx, dy, dx, dy, dx, dy, dx, dy);\r\n        ccNetViz_primitive.vertices(v.textureCoord, iV, 0, 0, 1, 0, 1, 1, 0, 1);\r\n        ccNetViz_primitive.quad(v.indices, iV, iI);\r\n    };\r\n\r\n    let arrowFiller = {\r\n      lineArrows: (style => ({\r\n                set: (v, e, iV, iI) => {\r\n                    let s = ccNetViz_geomutils.edgeSource(e);\r\n                    let t = ccNetViz_geomutils.edgeTarget(e);\r\n                    let d = normalize(s, t);\r\n                    set(v, e, s, t, iV, iI, d.x, d.y);\r\n                }})),\r\n       curveArrows: (style => ({\r\n                        set: (v, e, iV, iI) => {\r\n                          let s = ccNetViz_geomutils.edgeSource(e);\r\n                          let t = ccNetViz_geomutils.edgeTarget(e);\r\n                          return set(v, e, s, t, iV, iI, 0.5 * (t.x - s.x), 0.5 * (t.y - s.y));\r\n                        }\r\n                    })),\r\n       circleArrows: (style => ({\r\n                        set: (v, e, iV, iI) => {\r\n                          let t = ccNetViz_geomutils.edgeTarget(e);\r\n                          let s = t;\r\n                          return set(v, e, s, t, iV, iI, t.x < 0.5 ? dx : -dx, t.y < 0.5 ? -dy : dy);\r\n                        }\r\n                    }))\r\n    };\r\n\r\n    this.getCurrentSpatialSearch = (context) => {\r\n      if(spatialSearch === undefined){\r\n        spatialSearch = new ccNetViz_spatialSearch(context, texts, options, [], {}, [], {}, [], {}, [], {}, normalize, nodeStyle, getLabelSize, getLabelHideSize);\r\n      }\r\n      return spatialSearch;\r\n    }\r\n\r\n    this.remove = () => { }\r\n\r\n\r\n    let edgeTypes;\r\n    let edgePoses;\r\n\r\n    let spatialSearch = undefined;\r\n\r\n    let lvl = 0;\r\n    //make sure everything (files and textures) are load, if not, redraw the whole graph after they became\r\n    let set_end = () => {\r\n      let enableLazyRedraw = false;\r\n      let reset = (p) => {\r\n        if(enableLazyRedraw)\r\n          this.set(this.nodes, this.edges);\r\n      };\r\n      files.onLoad(reset)\r\n      textures.onLoad(reset)\r\n      enableLazyRedraw = true;\r\n    };\r\n\r\n    this.set = function(nodes, edges, layout, layout_options) {\r\n        removedNodes = 0;\r\n        removedEdges = 0;\r\n\r\n        this.nodes = nodes = nodes || [];\r\n        this.edges = edges = edges ? [].concat(edges) : [];\r\n\r\n        spatialSearch = undefined;\r\n\r\n        let lines = [], curves = [], circles = [];\r\n\r\n        //tanslate indexes into node objects\r\n        for (let i = 0; i < edges.length; i++) {\r\n          let e = edges[i];\r\n          if(typeof e.source == 'number')\r\n            e.source = nodes[e.source];\r\n\r\n          if(typeof e.target == 'number')\r\n            e.target = nodes[e.target];\r\n        }\r\n\r\n\r\n        let getIndex = (e) => {\r\n            return e.uniqid || -e.index || -e.nidx;\r\n        }\r\n\r\n        let init = () => {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                nodes[i].index = i;\r\n            }\r\n\r\n            for (let i = 0,j=nodes.length + 10; i < edges.length; i++, j++) {\r\n                edges[i].nidx = j;\r\n            }\r\n\r\n            edgeTypes = [];\r\n            edgePoses = new Uint32Array(edges.length);\r\n            const dummysd  = {k:  '_',      kArrow: '_', d: []};\r\n            const circlesd = {k: 'circles', kArrow: 'circleArrows', d: circles};\r\n            const linesd   = {k: 'lines',   kArrow: 'lineArrows',d: lines};\r\n            const curvesd  = {k: 'curves',  kArrow: 'curveArrows',d: curves};\r\n\r\n            if (extensions.OES_standard_derivatives) {\r\n                let map = {};\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    (map[si] || (map[si] = {}))[ti] = true;\r\n                }\r\n\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let target, e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    let t = dummysd;\r\n                    if (si === ti) {\r\n                        e.t = 2;\t//circle\r\n                        target = circles;\r\n                        t = circlesd;\r\n                    }else {\r\n                        let m = map[ti];\r\n                        if(m && m[si]){\r\n                          e.t = 1;\t//curve\r\n                          target = curves;\r\n                          t = curvesd;\r\n                        }else{\r\n                          e.t = 0;\t//line\r\n                          target = lines;\r\n                          t = linesd;\r\n                        }\r\n                    }\r\n                    edgeTypes.push(t);\r\n                    edgePoses[i] = t.d.length;\r\n                    target.push(e);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    let t = dummysd;\r\n                    if(si !== ti){\r\n                      t = linesd;\r\n                      e.t = 0;\r\n                      lines.push(e);\r\n                    }\r\n                    edgeTypes.push(t);\r\n                    edgePoses[i] = t.d.length;\r\n                }\r\n            }\r\n        };\r\n\r\n        init();\r\n\r\n        let nodesParts   = partitionByStyle(nodes);\r\n        let circlesParts = partitionByStyle(circles);\r\n        let linesParts   = partitionByStyle(lines);\r\n        let curvesParts  = partitionByStyle(curves);\r\n\r\n        this.getCurrentSpatialSearch = (context) => {\r\n          if(spatialSearch === undefined){\r\n            spatialSearch = new ccNetViz_spatialSearch(context, texts, options, nodes, nodesParts, lines, linesParts, curves, curvesParts, circles, circlesParts, normalize, nodeStyle, getLabelSize, getLabelHideSize);\r\n          }\r\n          return spatialSearch;\r\n        }\r\n\r\n        layout && new ccNetViz_layout[layout](nodes, edges, layout_options).apply() && ccNetViz_layout.normalize(nodes);\r\n\r\n        if(!gl) return;\r\n\r\n        let tryInitPrimitives = () => {\r\n            var isDirty = false;\r\n\r\n            let defaultAdder = (section, addSection) => {\r\n              if(typeof section.style.texture === 'string')\r\n                  section.style.texture = textures.get(gl, section.style.texture, addSection);\r\n                else\r\n                  addSection();\r\n            }\r\n            let labelAdder = (section, addSection) => {\r\n              var slf = (section.style.label || {}).font || {};\r\n              let textEngine = texts.getEngine(slf);\r\n              section.style.texture = textEngine.getTexture(slf, addSection);\r\n            }\r\n\r\n            let is;\r\n            is = nodes.length && !nodes[0].color;\r\n            isDirty = isDirty || scene.nodes.set(gl, options.styles, defaultAdder, is ? nodes : [], is ? nodesParts : {}, nodesFiller);\r\n            is = nodes.length && nodes[0].color;\r\n            isDirty = isDirty || scene.nodesColored.set(gl, options.styles, defaultAdder, is ? nodes : [], is ? nodesParts : {}, nodesFiller);\r\n\r\n            if (nodeStyle.label) {\r\n                texts.clear();\r\n                isDirty = isDirty || scene.labelsOutline.set(gl, options.styles, labelAdder, nodes, nodesParts, labelsFiller);\r\n                isDirty = isDirty || scene.labels.set(gl, options.styles, labelAdder, nodes, nodesParts, labelsFiller);\r\n                texts.bind();\r\n            }\r\n\r\n            isDirty = isDirty || scene.lines.set(gl, options.styles, defaultAdder, lines, linesParts, edgesFiller.lines);\r\n\r\n            if (extensions.OES_standard_derivatives) {\r\n                isDirty = isDirty || scene.curves.set(gl, options.styles, defaultAdder, curves, curvesParts, edgesFiller.curves);\r\n                isDirty = isDirty || scene.circles.set(gl, options.styles, defaultAdder, circles, circlesParts, edgesFiller.circles);\r\n            }\r\n\r\n            if (edgeStyle.arrow) {\r\n                isDirty = isDirty || scene.lineArrows.set(gl, options.styles, defaultAdder, lines, linesParts, arrowFiller.lineArrows);\r\n\r\n                if (extensions.OES_standard_derivatives) {\r\n                    isDirty = isDirty || scene.curveArrows.set(gl, options.styles, defaultAdder, curves, curvesParts, arrowFiller.curveArrows);\r\n\r\n                    isDirty = isDirty || scene.circleArrows.set(gl, options.styles, defaultAdder, circles, circlesParts, arrowFiller.circleArrows);\r\n                }\r\n            }\r\n\r\n            return isDirty;\r\n        };\r\n\r\n        while(tryInitPrimitives()); //loop until they are not dirty\r\n        set_end();\r\n    };\r\n\r\n\r\n\r\n    this.update = function(element, attribute, data) {\r\n        if(!gl) return;\r\n        scene[element].update(gl, attribute, data, function(style)  {return {\r\n            set: function(v, e, iV)  {return ccNetViz_primitive.colors(v, iV, e, e, e, e);}\r\n        };});\r\n    }\r\n\r\n    this.find = (x,y,dist,nodes,edges,labels) => {\r\n      return this.getCurrentSpatialSearch(context).find(context, x,y,dist, view.size, nodes,edges,labels);\r\n    }\r\n\r\n    this.findArea = (x1,y1,x2,y2,nodes,edges,labels) => {\r\n      return this.getCurrentSpatialSearch(context).findArea(context, x1,y1,x2,y2, view.size, nodes,edges,labels);\r\n    }\r\n\r\n    this.updateNode = (n, i) => {\r\n      this.nodes[i] = n;\r\n\r\n      if(spatialSearch)\r\n        spatialSearch.update(context, 'nodes', i, n);\r\n\r\n      if(!gl) return;\r\n\r\n      (this.nodes[0].color ? scene.nodesColored : scene.nodes).updateEl(gl, n, i, nodesFiller);\r\n      scene.labels && scene.labels.updateEl(gl, n, i, labelsFiller);\r\n      scene.labelsOutline && scene.labelsOutline.updateEl(gl, n, i, labelsFiller);\r\n\r\n    };\r\n\r\n    this.updateEdge = ((e, i) => {\r\n      let t = edgeTypes[i];\r\n      let pos = edgePoses[i];\r\n\r\n      t.d[pos] = this.edges[i] = e;\r\n\r\n      if(spatialSearch)\r\n        spatialSearch.update(context, t.k, pos, e);\r\n\r\n      if(!gl) return;\r\n\r\n      scene[t.k].updateEl(gl, e, pos, edgesFiller[t.k]);\r\n      if (edgeStyle.arrow)\r\n        scene[t.kArrow].updateEl(gl, e, pos, arrowFiller[t.kArrow]);\r\n    });\r\n\r\n    let removedNodes = 0;\r\n    let removedEdges = 0;\r\n\r\n    const freenode = {x:-1,y:-1,title:\"\"};\r\n    this.removeNodeAtPos = ((pos) => {\r\n      if(this.nodes[pos] === freenode){\r\n        return;\r\n      }\r\n\r\n      removedNodes++;\r\n      this.updateNode(freenode, pos);\r\n    });\r\n\r\n    const freeedge = {source:{x:-1,y:-1},target:{x:-1,y:-1}};\r\n    this.removeEdgeAtPos = ((pos) => {\r\n      if(this.edges[pos] === freeedge){\r\n        return;\r\n      }\r\n\r\n      removedEdges++;\r\n\r\n      this.updateEdge(freeedge, pos);\r\n    });\r\n\r\n    this.getVisibleNodes = () => {\r\n      if(removedNodes <= 0)\r\n        return this.nodes;\r\n\r\n      let r = [];\r\n      this.nodes.forEach(n => {\r\n        if(n !== freenode)\r\n          r.push(n);\r\n      });\r\n      return r;\r\n    }\r\n\r\n    this.getVisibleEdges = () => {\r\n      if(removedEdges <= 0)\r\n        return this.edges;\r\n\r\n      let r = [];\r\n      this.edges.forEach((n) => {\r\n        if(n !== freeedge)\r\n          r.push(n);\r\n      });\r\n      return r;\r\n    }\r\n\r\n    this.cntShownNodes = (() => {\r\n      return this.nodes.length - removedNodes;\r\n    });\r\n\r\n    this.cntShownEdges = (() => {\r\n      return this.edges.length - removedEdges;\r\n    });\r\n\r\n    let getEdgeStyleSize = ((c) => {\r\n      return c.width/(120);\r\n/*      let avsize = (c.width + c.height)/2;\r\n      let koef = (Math.min(Math.max((avsize - 150)/150, 0),1)+1)*1.3;\r\n      //koef 1 for 150 size and 1.4 for 300 size\r\n      return c.width/(130*koef);\r\n*/    });\r\n\r\n\r\n    let stylesTransl = {\r\n      'line': 0,\r\n      'dashed'  : 1,\r\n      'chain-dotted': 2,\r\n      'dotted': 3\r\n    }\r\n    let getEdgeType = (t) => {\r\n      if(t !== undefined){\r\n        t = stylesTransl[t];\r\n      }\r\n\r\n      if(t === undefined || typeof t !== 'number'){\r\n        t = 0;\r\n      }\r\n\r\n      return t;\r\n    };\r\n\r\n\r\n    this.nodes = [];\r\n    this.edges = [];\r\n\r\n    let extensions = gl ? ccNetViz_gl.initExtensions(gl, \"OES_standard_derivatives\") : {};\r\n    let scene = this.scene = createScene.call(this);\r\n\r\n    let loadCalled = false;\r\n    if(!gl) { options.onLoad && !loadCalled && (loadCalled = true) && options.onLoad(); return this };\r\n\r\n    let getLabelType = (f) => {\r\n      if(texts.isSDF(f))\r\n        return 1;\r\n      return 0;\r\n    };\r\n\r\n    const fsColorTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform vec4 color;\",\r\n        \"uniform sampler2D texture;\",\r\n        \"varying vec2 tc;\",\r\n        \"void main(void) {\",\r\n        \"   gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"}\"\r\n    ];\r\n\r\n    const fsLabelTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform lowp sampler2D texture;\",\r\n        \"uniform mediump vec4 color;\",\r\n        \"uniform mediump float height_font;\",\r\n        \"uniform float type;\",\r\n        \"uniform float buffer;\",\r\n        \"uniform float boldness;\",\r\n        \"float gamma = 4.0 * 1.4142 * boldness / height_font;\",\r\n        \"varying mediump vec2 tc;\",\r\n        \"void main() {\",\r\n        \"  if(type > 0.5){\",  //SDF\r\n        \"    float tx=texture2D(texture, tc).a;\",\r\n        \"    float a= smoothstep(buffer - gamma, buffer + gamma, tx);\",\r\n        \"    gl_FragColor=vec4(color.rgb, a*color.a);\",\r\n        \"  }else{\", //NORMAL FONT\r\n        \"    gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"  }\",\r\n        \"}\"\r\n    ];\r\n\r\n    const fsVarColorTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform sampler2D texture;\",\r\n        \"varying vec2 tc;\",\r\n        \"varying vec4 c;\",\r\n        \"void main(void) {\",\r\n        \"   gl_FragColor = c * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"}\"\r\n    ];\r\n\r\n    const lineTypes = [\r\n        \"   if(type >= 2.5){\",        //3.0 dotted\r\n        \"      part = fract(part*3.0);\",\r\n        \"      if(part < 0.5) discard;\",\r\n        \"   }else if(type >= 1.5){\",        //2.0 - chain dotted\r\n        \"      if(part < 0.15) discard;\",\r\n        \"      if(part > 0.30 && part < 0.45) discard;\",\r\n        \"   }else if(type >= 0.5){\",        //1.0 - dashed\r\n        \"      if(part < 0.5) discard;\",\r\n        \"   }\"\r\n    ];\r\n    const fsCurve = [\r\n        \"#extension GL_OES_standard_derivatives : enable\",\r\n        \"#ifdef GL_ES\",\r\n        \"precision highp float;\",\r\n        \"#endif\",\r\n        \"uniform float width;\",\r\n        \"uniform vec4 color;\",\r\n        \"uniform float type;\",\r\n        \"uniform float lineStepSize;\",\r\n        \"uniform float lineSize;\",\r\n        \"varying vec2 c;\",\r\n        \"varying vec2 v_lengthSoFar;\",\r\n        \"void main(void) {\",\r\n        \"   float part = abs(fract(length(v_lengthSoFar)*lineStepSize*lineSize));\"\r\n        ].concat(lineTypes).concat([\r\n        \"   vec2 px = dFdx(c);\",\r\n        \"   vec2 py = dFdy(c);\",\r\n        \"   float fx = 2.0 * c.x * px.x - px.y;\",\r\n        \"   float fy = 2.0 * c.y * py.x - py.y;\",\r\n        \"   float sd = (c.x * c.x - c.y) / sqrt(fx * fx + fy * fy);\",\r\n        \"   float alpha = 1.0 - abs(sd) / width;\",\r\n        \"   if (alpha < 0.0) discard;\",\r\n        \"   gl_FragColor = vec4(color.r, color.g, color.b, min(alpha, 1.0));\",\r\n        \"}\"\r\n    ]);\r\n\r\n\r\n    const getShiftFuncs = [\r\n        \"attribute vec2 curveShift;\",\r\n        \"vec4 getShiftCurve(void) {\",\r\n        \"   vec2 shiftN = vec2(curveShift.x, aspect2 * curveShift.y);\",\r\n        \"   float length = length(screen * shiftN);\",\r\n        \"   return vec4(exc * (length == 0.0 ? vec2(0, 0) : shiftN * 0.5 / length), 0, 0);\",\r\n        \"}\",\r\n        \"attribute vec2 circleShift;\",\r\n        \"vec4 getShiftCircle(void) {\",\r\n        \"   return vec4(size*circleShift,0,0);\",\r\n        \"}\"\r\n    ];\r\n\r\n    scene.add(\"lines\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n            \"precision mediump float;\",\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 normal;\",\r\n            \"attribute vec2 lengthSoFar;\",\r\n            \"uniform float exc;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform vec2 screen;\",\r\n            \"uniform float aspect2;\",\r\n            \"uniform float aspect;\",\r\n            \"uniform vec2 width;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 n;\",\r\n            \"varying vec2 v_lengthSoFar;\"\r\n            ].concat(getShiftFuncs).concat([\r\n            \"void main(void) {\",\r\n            \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(width * normal, 0, 0) + transform * vec4(position, 0, 1);\",\r\n\r\n            \"   vec4 p = transform*vec4(lengthSoFar,0,0);\",\r\n            \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n\r\n            \"   n = normal;\",\r\n            \"}\"\r\n        ]), [\r\n            \"precision mediump float;\",\r\n            \"uniform float type;\",\r\n            \"uniform vec4 color;\",\r\n            \"varying vec2 n;\",\r\n            \"varying vec2 v_lengthSoFar;\",\r\n            \"uniform float lineSize;\",\r\n            \"void main(void) {\",\r\n            \"   float part = abs(fract(length(v_lengthSoFar)*lineSize*5.0));\"\r\n\t    ].concat(lineTypes).concat([\r\n            \"   gl_FragColor = vec4(color.r, color.g, color.b, color.a - length(n));\",\r\n            \"}\"\r\n        ]), c => {\r\n            let uniforms = c.shader.uniforms;\r\n            uniforms.exc && gl.uniform1f(uniforms.exc, c.curveExc);\r\n            gl.uniform2f(uniforms.screen, c.width, c.height);\r\n            let size = 2.5 * c.nodeSize;\r\n            uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n            gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n            gl.uniform1f(uniforms.aspect, c.aspect);\r\n            gl.uniform2f(uniforms.width, c.style.width / c.width, c.style.width / c.height);\r\n            gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        })\r\n    );\r\n\r\n    if (extensions.OES_standard_derivatives) {\r\n        scene.add(\"curves\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n                \"precision highp float;\",\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 normal;\",\r\n                \"attribute vec2 curve;\",\r\n                \"attribute vec2 lengthSoFar;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform float exc;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform float aspect;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 v_lengthSoFar;\",\r\n                \"varying vec2 c;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   vec2 n = vec2(normal.x, aspect2 * normal.y);\",\r\n                \"   float length = length(screen * n);\",\r\n                \"   n = length == 0.0 ? vec2(0, 0) : n / length;\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(exc * n, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   c = curve;\",\r\n\r\n                \"   vec4 p = transform*vec4(lengthSoFar,0,0);\",\r\n                \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n\r\n                \"}\"\r\n            ]), fsCurve, c => {\r\n                let uniforms = c.shader.uniforms;\r\n                gl.uniform1f(uniforms.width, c.style.width);\r\n                gl.uniform1f(uniforms.exc, c.curveExc);\r\n                gl.uniform2f(uniforms.screen, c.width, c.height);\r\n                let size = 2.5 * c.nodeSize;\r\n                uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n                gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n                gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n                gl.uniform1f(uniforms.aspect, c.aspect);\r\n                gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n                uniforms.lineStepSize && gl.uniform1f(uniforms.lineStepSize, 5);\r\n                ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n            })\r\n        );\r\n        scene.add(\"circles\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n                \"precision highp float;\",\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 normal;\",\r\n                \"attribute vec2 curve;\",\r\n                \"attribute vec2 lengthSoFar;\",\r\n                \"uniform float exc;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform float aspect;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 c;\",\r\n                \"varying vec2 v_lengthSoFar;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(size * normal, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   c = curve;\",\r\n\r\n                \"   vec4 p = transform*vec4(size * lengthSoFar,0,0);\",\r\n                \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n                \"}\"])\r\n            , fsCurve, c => {\r\n                let uniforms = c.shader.uniforms;\r\n                uniforms.exc && gl.uniform1f(uniforms.exc, c.curveExc);\r\n                gl.uniform1f(uniforms.width, c.style.width);\r\n                gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n                gl.uniform2f(uniforms.screen, c.width, c.height);\r\n                let size = 2.5 * c.nodeSize;\r\n                uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n                gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n                gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n                gl.uniform1f(uniforms.aspect, c.aspect);\r\n                uniforms.lineStepSize && gl.uniform1f(uniforms.lineStepSize, 5/3);\r\n                ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n            })\r\n        );\r\n    }\r\n\r\n    if (edgeStyle.arrow) {\r\n        let shaderparams = {attribute:{offsetMul:1}};\r\n\r\n        let bind = c => {\r\n            let size = getSize(c, c.style, getEdgesCnt(), 0.2);\r\n            if (!size) return true;\r\n\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform1f(uniforms.offset, 0.5 * c.nodeSize);\r\n            gl.uniform2f(uniforms.arrowsize, size, c.style.aspect * size);\r\n            gl.uniform1f(uniforms.exc, c.curveExc);\r\n            uniforms.cexc && gl.uniform1f(uniforms.cexc, 0.5 * view.size * c.curveExc);\r\n            if(uniforms.size){\r\n              size = 2.5 * c.nodeSize;\r\n              uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            }\r\n            gl.uniform2f(uniforms.screen, c.width, c.height);\r\n            gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        };\r\n\r\n        scene.add(\"lineArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 direction;\",\r\n                \"attribute vec2 textureCoord;\",\r\n                \"attribute float offsetMul;\",\r\n                \"uniform float offset;\",\r\n                \"uniform vec2 arrowsize;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float exc;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 tc;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   vec2 u = direction / length(screen * direction);\",\r\n                \"   vec2 v = vec2(u.y, -aspect2 * u.x);\",\r\n                \"   v = v / length(screen * v);\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle()  + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   tc = textureCoord;\",\r\n                \"}\"\r\n            ]), fsColorTexture, bind, shaderparams)\r\n        );\r\n\r\n        if (extensions.OES_standard_derivatives) {\r\n            scene.add(\"curveArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                    \"attribute vec2 position;\",\r\n                    \"attribute vec2 direction;\",\r\n                    \"attribute vec2 textureCoord;\",\r\n                    \"attribute float offsetMul;\",\r\n                    \"uniform float offset;\",\r\n                    \"uniform vec2 arrowsize;\",\r\n                    \"uniform vec2 size;\",\r\n                    \"uniform float exc;\",\r\n                    \"uniform float cexc;\",\r\n                    \"uniform vec2 screen;\",\r\n                    \"uniform float aspect2;\",\r\n                    \"uniform mat4 transform;\",\r\n                    \"varying vec2 tc;\",\r\n                    ].concat(getShiftFuncs).concat([\r\n                    \"void main(void) {\",\r\n                    \"   vec2 u = normalize(vec2(direction.y, -aspect2 * direction.x));\",\r\n                    \"   u = normalize(direction - cexc * u / length(screen * u));\",\r\n                    \"   u = u / length(screen * u);\",\r\n                    \"   vec2 v = vec2(u.y, -aspect2 * u.x);\",\r\n                    \"   v = v / length(screen * v);\",\r\n                    \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                    \"   tc = textureCoord;\",\r\n                    \"}\"\r\n                ]), fsColorTexture, bind, shaderparams)\r\n            );\r\n            scene.add(\"circleArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                    \"attribute vec2 position;\",\r\n                    \"attribute vec2 direction;\",\r\n                    \"attribute vec2 textureCoord;\",\r\n                    \"attribute float offsetMul;\",\r\n                    \"uniform float offset;\",\r\n                    \"uniform vec2 arrowsize;\",\r\n                    \"uniform vec2 size;\",\r\n                    \"uniform vec2 screen;\",\r\n                    \"uniform float exc;\",\r\n                    \"uniform float aspect2;\",\r\n                    \"uniform mat4 transform;\",\r\n                    \"varying vec2 tc;\",\r\n                    ].concat(getShiftFuncs).concat([\r\n                    \"void main(void) {\",\r\n                    \"   vec2 u = direction;\",\r\n                    \"   vec2 v = vec2(direction.y, -direction.x);\",\r\n                    \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4((arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u) / screen, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                    \"   tc = textureCoord;\",\r\n                    \"}\"\r\n                ]), fsColorTexture, bind, shaderparams)\r\n            );\r\n        }\r\n    }\r\n\r\n    scene.add(\"nodes\", new ccNetViz_primitive(gl, nodeStyle, null, [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"}\"\r\n        ], fsColorTexture, c => {\r\n            let size = getNodeSize(c);\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        })\r\n    );\r\n    scene.add(\"nodesColored\", new ccNetViz_primitive(gl, nodeStyle, null, [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"attribute vec4 color;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"varying vec4 c;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"   c = color;\",\r\n            \"}\"\r\n        ], fsVarColorTexture, c => {\r\n            let size = getNodeSize(c);\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n        })\r\n    );\r\n\r\n    let vsLabelsShader = [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 relative;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"uniform float offset;\",\r\n            \"uniform vec2 scale;\",\r\n            \"uniform float fontScale;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(scale * (relative*fontScale + vec2(0, (2.0 * step(position.y, 0.5) - 1.0) * offset)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"}\"\r\n        ];\r\n    let bindLabels = (is_outline) => {\r\n      return c => {\r\n            if (!getNodeSize(c)) return true;\r\n\r\n            let l = c.style.label;\r\n            let f = l.font;\r\n            let uniforms = c.shader.uniforms;\r\n\r\n            gl.uniform1f(uniforms.type, getLabelType(f));\r\n//            gl.uniform1f(uniforms.type, 0);\r\n\r\n            let textEngine = texts.getEngine(f);\r\n            textEngine.setFont(f);\r\n\r\n            let fontScale = 1.0;\r\n            let sdfSize = textEngine.fontSize;\r\n            let wantedSize = ( textEngine.isSDF ? getLabelSize(context, l || {}) : sdfSize );\r\n            if(wantedSize === 0){ fontScale = 0; };\r\n\r\n            let opts = {};\r\n            if(wantedSize && sdfSize){\r\n              fontScale *= wantedSize / sdfSize;\r\n            }\r\n\r\n            if(is_outline && !textEngine.isSDF) //discardAll\r\n              fontScale = 0;\r\n\r\n            gl.uniform1f(uniforms.buffer, is_outline ? 0.25 : 192.0 / 256.0);\r\n            gl.uniform1f(uniforms.boldness, (f ? f.boldness : undefined) || 1.);\r\n            gl.uniform1f(uniforms.fontScale, fontScale);\r\n            gl.uniform1f(uniforms.height_font, sdfSize);\r\n            gl.uniform1f(uniforms.offset, 0.5 * c.nodeSize);\r\n            gl.uniform2f(uniforms.scale, 1 / c.width, 1 / c.height);\r\n\r\n            let color;\r\n            if(is_outline && f)\r\n                color = new ccNetViz_color(f.outlineColor || backgroundColor);\r\n            else\r\n                color = c.style.color;\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, color);\r\n        };\r\n    };\r\n    nodeStyle.label && scene.add(\"labelsOutline\", new ccNetViz_primitive(gl, nodeStyle, \"label\", vsLabelsShader, fsLabelTexture, bindLabels(true)) );\r\n    nodeStyle.label && scene.add(\"labels\", new ccNetViz_primitive(gl, nodeStyle, \"label\", vsLabelsShader, fsLabelTexture, bindLabels(false)) );\r\n\r\n    if (options.onLoad) {\r\n        let styles = options.styles;\r\n        for (let p in styles) {\r\n            let s = styles[p];\r\n\r\n            s.texture && textures.get(gl, s.texture, onLoad);\r\n            s.arrow && s.arrow.texture && textures.get(gl, s.arrow.texture);\r\n        }\r\n    }\r\n\r\n    function createScene() {\r\n        return {\r\n            elements: [],\r\n            add: (name, e) => {\r\n                scene[name] = e;\r\n                scene.elements.push(e);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import ccNetViz_shader from './shader' ;\r\nimport ccNetViz_utils  from './utils' ;\r\nimport {getPartitionStyle} from './primitiveTools';\r\n\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\n\r\n\r\nexport default class primitive{\r\n  constructor(gl, baseStyle, styleProperty, vs, fs, bind, shaderParams) {\r\n    let shader = new ccNetViz_shader(gl, vs.join('\\n'), fs.join('\\n'), shaderParams);\r\n    let buffers = [];\r\n    let sections = [];   \r\n    \r\n    let sectionsByStyle = {};\r\n\r\n    let e = {};\r\n    let iV, iI, iS = 0, iB = 0;\r\n\r\n    let partLength = (filler, part) => {\r\n        if(filler.size){\r\n          let n = 0;\r\n          part.forEach( p => {\r\n            n+=filler.size(e,p);\r\n          });\r\n          return n;\r\n        }else{\r\n          return part.length;\r\n        }\r\n        return;\r\n    };\r\n    \r\n    let init = (filler, n) => {\r\n        iV = iI = 0;\r\n        let max = Math.floor(primitive.maxBufferSize / filler.numVertices);\r\n        let nV = Math.min(max, n - (iB - iS)*max);\r\n        let nI = nV * filler.numIndices;\r\n\r\n        if (!e.indices || e.indices.length !== nI) {\r\n            e.indices = new Uint16Array(nI);\r\n            nV *= filler.numVertices;\r\n            for (let a in shader.attributes) e[a] = new Float32Array(shader.attributes[a].size * nV);\r\n        }\r\n    };\r\n\r\n    let zerofiller =  {\r\n      set: (v, iV, iI, numVertices, numIndices) => {\r\n        let indicesarr = [v.indices, iV, iI];\r\n        for(let i = 0; i < numIndices; i++)\r\n          indicesarr.push(0);\r\n\r\n        let verticesarr = [undefined, iV, iI];\r\n        for(let i = 0; i < numVertices; i++)\r\n          verticesarr.push(0);\r\n\r\n        for(var k in v){\r\n          if(k === 'indices'){\r\n            primitive.indices.apply(this, indicesarr);\r\n          }else{\r\n            verticesarr[0] = v[k];\r\n            primitive.vertices.apply(this, verticesarr);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.set = (gl, styles, adder, data, parts, get) => {\r\n        var isDirty = false;\r\n      \r\n        iS = 0;\r\n        iB = 0;\r\n\r\n        this._iIs = new Uint32Array(data.length);\r\n        this._iVs = new Uint32Array(data.length);\r\n        this._iBs = new Uint8Array(data.length);\r\n        this._sizes = new Uint8Array(data.length);\r\n\r\n\r\n        let store = (section) => {\r\n            let b = buffers[iB];\r\n            if (!b) {\r\n                buffers[iB] = b = {};\r\n                for (let a in e) b[a] = gl.createBuffer();\r\n            }\r\n            for (let a in shader.attributes) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, b[a]);\r\n                gl.bufferData(gl.ARRAY_BUFFER, e[a], gl.STATIC_DRAW);\r\n            }\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b.indices);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, e.indices, gl.STATIC_DRAW);\r\n            b.numIndices = iI;\r\n            b.numVertices = iV;\r\n            section.buffers.push(b);\r\n            iB++;\r\n        };\r\n\r\n        sections = [];\r\n        for (let p in parts) {\r\n            iS = iB;\r\n            console.log(parts)\r\n            console.log(p)\r\n            let section = {\r\n                style: getPartitionStyle(styles[p], baseStyle, styleProperty),\r\n                buffers: [],\r\n                styleName: p\r\n            };\r\n\r\n            let filler = get(section.style);\r\n            filler.numVertices = filler.numVertices || 4;\r\n            filler.numIndices = filler.numIndices || 6;\r\n\r\n            let part = parts[p];\r\n\r\n            let pL = partLength(filler, part);\r\n            init(filler, pL);\r\n            let max = primitive.maxBufferSize;\r\n            for (let i = 0; i < part.length; i++) {\r\n                let s = filler.size ? filler.size(e, part[i]) : 1;\r\n                let niV = iV + s * filler.numVertices;\r\n                let niI = iI + s * filler.numIndices;\r\n\r\n                if (niV >= max) {\r\n                    store(section);\r\n                    init(filler, pL);\r\n                    niV = iV;\r\n                    niI = iI;\r\n                }\r\n\r\n\r\n                if(filler.set(e, part[i], iV, iI))\r\n                  isDirty = true;\r\n\r\n\r\n                let idx = part.idx[i];\r\n                this._iIs[idx] = iI;\r\n                this._iVs[idx] = iV;\r\n                this._iBs[idx] = iB;\r\n                this._sizes[idx] = s;\r\n\r\n                iI = niI;\r\n                iV = niV;\r\n            }\r\n            store(section);\r\n\r\n            function add() {\r\n                sections.push(this);\r\n                sectionsByStyle[this.styleName] = this;\r\n            }\r\n            let addSection = add.bind(section);\r\n\r\n            adder ? adder(section, addSection) : addSection();\r\n        }\r\n        \r\n        return isDirty;\r\n    }\r\n\r\n    let fb;\r\n    this.update = function(gl, attribute, data, get)  {\r\n        let i = 0, size = shader.attributes[attribute].size;\r\n        sections.forEach(function(section)  {\r\n            let filler = get(section.style);\r\n            filler.numVertices = filler.numVertices || 4;\r\n\r\n            section.buffers.forEach(function(e)  {\r\n                (!fb || fb.length !== size * e.numVertices) && (fb = new Float32Array(size * e.numVertices));\r\n                for (let iV = 0; iV < e.numVertices; iV += (filler.size ? filler.size(e, data[i]) : 1) * filler.numVertices) filler.set(fb, data[i++], iV);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, e[attribute]);\r\n                gl.bufferData(gl.ARRAY_BUFFER, fb, gl.DYNAMIC_DRAW);\r\n            });\r\n        });\r\n   }\r\n\r\n   this.updateEl = (gl, el, pos, get) => {\r\n        let storeToPos = (b, iV, iI) => {\r\n            for (let a in shader.attributes) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, b[a]);\r\n                gl.bufferSubData(gl.ARRAY_BUFFER, shader.attributes[a].size*iV*e[a].BYTES_PER_ELEMENT, e[a]);\r\n            }\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b.indices);\r\n            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, iI*e.indices.BYTES_PER_ELEMENT, e.indices);\r\n        };\r\n\r\n        let section = sectionsByStyle[el.style];\r\n        \r\n        let filler = get(section.style);\r\n        filler.numVertices = filler.numVertices || 4;\r\n        filler.numIndices = filler.numIndices || 6;\r\n             \r\n        iB=iS=0;\r\n\r\n        let buffer = section.buffers[this._iBs[pos]];\r\n        let s = filler.size ? filler.size(buffer, el) : 1;\r\n        let olds = this._sizes[pos];\r\n        if(s > olds){\r\n          console.error('Cannot set primitive to new value which has greater size ('+s+\" > \"+olds+\") - no enough empty space to fill in GL buffer\");\r\n          return;\r\n        }\r\n\r\n        init(filler, olds);\r\n        filler.set(e, el, 0, 0);\r\n\r\n        for(;s < olds; s++){\r\n          //zero fill empty spaces\r\n          zerofiller.set(e, s*filler.numVertices, s*filler.numIndices, filler.numVertices, filler.numIndices);\r\n        }\r\n\r\n        let iV = this._iVs[pos];\r\n        let iI = this._iIs[pos];\r\n        storeToPos(buffer, iV, iI);\r\n    };\r\n\r\n    this.draw = (context) => {\r\n        context.shader = shader;\r\n        shader.bind();\r\n\r\n        gl.uniformMatrix4fv(shader.uniforms.transform, false, context.transform);\r\n\r\n        sections.forEach(section => {\r\n            if (section.style.texture) {\r\n                section.style.texture.update && section.style.texture.update();\r\n                gl.activeTexture(gl.TEXTURE0);\r\n                gl.bindTexture(gl.TEXTURE_2D, section.style.texture);\r\n                gl.uniform1i(shader.uniforms.texture, 0);\r\n            }\r\n\r\n            context.style = section.style;\r\n            if (bind(context)) return;\r\n\r\n            section.buffers.forEach(e => {\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, e.indices);\r\n\r\n                for (var a in shader.attributes) {\r\n                    var attribute = shader.attributes[a];\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, e[a]);\r\n                    gl.vertexAttribPointer(attribute.index, attribute.size, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                gl.drawElements(gl.TRIANGLES, e.numIndices, gl.UNSIGNED_SHORT, 0);\r\n            });\r\n        });\r\n\r\n        shader.unbind();\r\n    }\r\n  }\r\n  \r\n  static vertices(buffer, iV) {\r\n      for (let i = 2, j = 2 * iV, n = arguments.length; i < n; i++, j++) buffer[j] = arguments[i];\r\n  }\r\n  \r\n  static singles(buffer, iV) {\r\n    for (let i = 2, j = 1 * iV, n = arguments.length; i < n; i++, j++) buffer[j] = arguments[i];\r\n  }\r\n  \r\n  static colors(buffer, iV) {\r\n    for (let i = 2, j = 4 * iV, n = arguments.length; i < n; i++) {\r\n        let c = arguments[i];\r\n        buffer[j++] = c.r;\r\n        buffer[j++] = c.g;\r\n        buffer[j++] = c.b;\r\n        buffer[j++] = c.a;\r\n    }\r\n  }\r\n  \r\n  static indices(buffer, iV, iI){\r\n      for (let i = 3, j = iI, n = arguments.length; i < n; i++, j++) buffer[j] = iV + arguments[i];\r\n  }\r\n\r\n  static quad(buffer, iV, iI) {\r\n      primitive.indices(buffer, iV, iI, 0, 1, 2, 2, 3, 0);\r\n  }\r\n\r\n  static get maxBufferSize(){\r\n    return 65536;\r\n  } \r\n}","import ccNetViz_gl from './gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nvar defaultAttr = {color: 4};\r\n\r\nexport default class Shader {\r\n  constructor(gl, vs, fs, shaderParams) {\r\n    this._gl = gl;\r\n    this._vs = vs;\r\n    this._fs = fs;\r\n    \r\n    let program = this._program = gl.createProgram();\r\n    \r\n    gl.attachShader(program, ccNetViz_gl.createShader(gl, gl.VERTEX_SHADER, vs));\r\n    gl.attachShader(program, ccNetViz_gl.createShader(gl, gl.FRAGMENT_SHADER, fs));\r\n    gl.linkProgram(program);\r\n    \r\n    this.uniforms = {};\r\n    let n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n    for (let i = 0; i < n; i++) {\r\n        let name = gl.getActiveUniform(program, i).name;\r\n        this.uniforms[name] = gl.getUniformLocation(program, name);\r\n    }\r\n    \r\n    let attrParams = (shaderParams || {}).attribute || {};\r\n\r\n    this.attributes = {};\r\n    n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < n; i++) {\r\n        let name = gl.getActiveAttrib(program, i).name;\r\n        this.attributes[name] = { index: i, size: attrParams[name] || Shader.attribute[name] || 2 };\r\n    }\r\n    \r\n  }\r\n  \r\n  static get attribute(){\r\n    return defaultAttr;\r\n  }\r\n  \r\n  bind () {\r\n    this._gl.useProgram(this._program);\r\n\r\n    let n = this._gl.getProgramParameter(this._program, this._gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < n; i++) this._gl.enableVertexAttribArray(i);\r\n  }\r\n\r\n  unbind () {\r\n      let n = this._gl.getProgramParameter(this._program, this._gl.ACTIVE_ATTRIBUTES);\r\n      for (let i = 0; i < n; i++) this._gl.disableVertexAttribArray(i);\r\n  }\r\n  \r\n};","import ccNetViz_quadtree from '../quadTree' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default function(nodes, edges, options = {}) {\r\n    const edgeDistance = 15,\r\n          edgeStrength = 1,\r\n          friction = 0.9,\r\n          charge = -30,\r\n          gravity = 0.4,\r\n          theta2 = .64,\r\n          size = [1,1],\r\n          chargeDistance2 = Infinity;\r\n\r\n    let   alpha,\r\n          distances = [],\r\n          strengths = [],\r\n          charges = [];\r\n\r\n\r\n    function accumulate(quad, alpha, charges) {\r\n        let cx = 0, cy = 0;\r\n        quad.charge = 0;\r\n        if (!quad.leaf) {\r\n            let nodes = quad.nodes;\r\n            let c, n = nodes.length;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                c = nodes[i];\r\n                if (c == null) continue;\r\n                accumulate(c, alpha, charges);\r\n                quad.charge += c.charge;\r\n                cx += c.charge * c.cx;\r\n                cy += c.charge * c.cy;\r\n            }\r\n        }\r\n        if (quad.point) {\r\n            if (!quad.leaf) {\r\n                quad.point.x += Math.random() - 0.5;\r\n                quad.point.y += Math.random() - 0.5;\r\n            }\r\n            let k = alpha * charges[quad.point.index];\r\n            quad.charge += quad.pointCharge = k;\r\n            cx += k * quad.point.x;\r\n            cy += k * quad.point.y;\r\n        }\r\n        quad.cx = cx / quad.charge;\r\n        quad.cy = cy / quad.charge;\r\n    }\r\n\r\n    function repulse(node) {\r\n        return function(quad, x1, _, x2) {\r\n            if (quad.point !== node) {\r\n                let dx = quad.cx - node.x;\r\n                let dy = quad.cy - node.y;\r\n                let dw = x2 - x1;\r\n                let dn = dx * dx + dy * dy;\r\n\r\n                if (dw * dw / theta2 < dn) {\r\n                    if (dn < chargeDistance2) {\r\n                        let k = quad.charge / dn;\r\n                        node.px -= dx * k;\r\n                        node.py -= dy * k;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if (quad.point && dn && dn < chargeDistance2) {\r\n                    let k = quad.pointCharge / dn;\r\n                    node.px -= dx * k;\r\n                    node.py -= dy * k;\r\n                }\r\n            }\r\n            return !quad.charge;\r\n        };\r\n    }\r\n\r\n    function step() {\r\n        if ((alpha *= .99) < .05) {\r\n            alpha = 0;\r\n            return true;\r\n        }\r\n\r\n        let q, o, s, t, l, k, x, y;\r\n        let n = nodes.length;\r\n        let m = edges.length;\r\n\r\n        for (let i = 0; i < m; i++) {\r\n            o = edges[i];\r\n            s = o.source;\r\n            t = o.target;\r\n            x = t.x - s.x;\r\n            y = t.y - s.y;\r\n            if (l = (x * x + y * y)) {\r\n                l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\r\n                x *= l;\r\n                y *= l;\r\n                t.x -= x * (k = s.weight / (t.weight + s.weight));\r\n                t.y -= y * k;\r\n                s.x += x * (k = 1 - k);\r\n                s.y += y * k;\r\n            }\r\n        }\r\n\r\n        if (k = alpha * gravity) {\r\n            x = size[0] / 2;\r\n            y = size[1] / 2;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                o = nodes[i];\r\n                o.x += (x - o.x) * k;\r\n                o.y += (y - o.y) * k;\r\n            }\r\n        }\r\n\r\n        if (charge) {\r\n            accumulate(q = ccNetViz_quadtree(nodes), alpha, charges);\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                let o = nodes[i];\r\n                !o.fixed && q.visit(repulse(o));\r\n            }\r\n        }\r\n\r\n        const rnd = (min,max) => Math.random() * (max-min) + min;\r\n        for (let i = 0; i < n; i++) {\r\n            o = nodes[i];\r\n            if (o.fixed || o.fixed2) {\r\n                o.x = o.px;\r\n                o.y = o.py;\r\n            }\r\n            else {\r\n                o.x -= (o.px - (o.px = o.x)) * friction;\r\n                o.y -= (o.py - (o.py = o.y)) * friction;\r\n\r\n                if(options && options.minX !== undefined){\r\n                    if(o.x < options.minX || o.x > options.maxX){\r\n                        o.x = rnd(options.minX, options.maxX);\r\n                    }\r\n                    if(o.y < options.minY || o.y > options.maxY){\r\n                        o.y = rnd(options.minY, options.maxY);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.apply = function() {\r\n        let n = nodes.length;\r\n        let d = Math.sqrt(n);\r\n        let s = 0.3 / d;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let o = nodes[i];\r\n            o.weight = 0;\r\n            o.x = o.x !== undefined ? o.x : s + (i % d) / d;\r\n            o.y = o.y !== undefined ? o.y : s + Math.floor(i / d) / d;\r\n            o.px = o.x;\r\n            o.py = o.y;\r\n            charges[i] = charge;\r\n        }\r\n\r\n        for (let i = 0; i < edges.length; i++) {\r\n            let o = edges[i];\r\n            o.source.weight++;\r\n            o.target.weight++;\r\n            distances[i] = edgeDistance;\r\n            strengths[i] = edgeStrength;\r\n        }\r\n\r\n        alpha = 0.1;\r\n        while (!step());\r\n\r\n        return true;\r\n    };\r\n};\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default function(points) {\r\n    let d, xs, ys, i, n, x1_, y1_, x2_, y2_;\r\n\r\n    x2_ = y2_ = -(x1_ = y1_ = Infinity);\r\n    xs = [], ys = [];\r\n    n = points.length;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n        d = points[i];\r\n        if (d.x < x1_) x1_ = d.x;\r\n        if (d.y < y1_) y1_ = d.y;\r\n        if (d.x > x2_) x2_ = d.x;\r\n        if (d.y > y2_) y2_ = d.y;\r\n        xs.push(d.x);\r\n        ys.push(d.y);\r\n    }\r\n\r\n    let dx = x2_ - x1_;\r\n    let dy = y2_ - y1_;\r\n    dx > dy ? y2_ = y1_ + dx : x2_ = x1_ + dy;\r\n\r\n    function create() {\r\n        return {\r\n            leaf: true,\r\n            nodes: [],\r\n            point: null,\r\n            x: null,\r\n            y: null\r\n        };\r\n    }\r\n\r\n    function visit(f, node, x1, y1, x2, y2) {\r\n        if (!f(node, x1, y1, x2, y2)) {\r\n            let sx = (x1 + x2) * 0.5;\r\n            let sy = (y1 + y2) * 0.5;\r\n            let children = node.nodes;\r\n\r\n            if (children[0]) visit(f, children[0], x1, y1, sx, sy);\r\n            if (children[1]) visit(f, children[1], sx, y1, x2, sy);\r\n            if (children[2]) visit(f, children[2], x1, sy, sx, y2);\r\n            if (children[3]) visit(f, children[3], sx, sy, x2, y2);\r\n        }\r\n    }\r\n\r\n    function insert(n, d, x, y, x1, y1, x2, y2) {\r\n        if (n.leaf) {\r\n            let nx = n.x;\r\n            let ny = n.y;\r\n\r\n            if (nx !== null) {\r\n                if (nx === x && ny === y) {\r\n                    insertChild(n, d, x, y, x1, y1, x2, y2);\r\n                }\r\n                else {\r\n                    let nPoint = n.point;\r\n                    n.x = n.y = n.point = null;\r\n                    insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\r\n                    insertChild(n, d, x, y, x1, y1, x2, y2);\r\n                }\r\n            } else {\r\n                n.x = x, n.y = y, n.point = d;\r\n            }\r\n        } else {\r\n            insertChild(n, d, x, y, x1, y1, x2, y2);\r\n        }\r\n    }\r\n\r\n    function insertChild(n, d, x, y, x1, y1, x2, y2) {\r\n        let xm = (x1 + x2) * 0.5;\r\n        let ym = (y1 + y2) * 0.5;\r\n        let right = x >= xm;\r\n        let below = y >= ym;\r\n        let i = below << 1 | right;\r\n\r\n        n.leaf = false;\r\n        n = n.nodes[i] || (n.nodes[i] = create());\r\n\r\n        right ? x1 = xm : x2 = xm;\r\n        below ? y1 = ym : y2 = ym;\r\n        insert(n, d, x, y, x1, y1, x2, y2);\r\n    }\r\n\r\n    function findNode(root, x, y, x0, y0, x3, y3) {\r\n        let minDistance2 = Infinity;\r\n        let closestPoint;\r\n\r\n        (function find(node, x1, y1, x2, y2) {\r\n            if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\r\n\r\n            if (point = node.point) {\r\n                let point;\r\n                let dx = x - node.x;\r\n                let dy = y - node.y;\r\n                let distance2 = dx * dx + dy * dy;\r\n\r\n                if (distance2 < minDistance2) {\r\n                    let distance = Math.sqrt(minDistance2 = distance2);\r\n                    x0 = x - distance, y0 = y - distance;\r\n                    x3 = x + distance, y3 = y + distance;\r\n                    closestPoint = point;\r\n                }\r\n            }\r\n\r\n            let children = node.nodes;\r\n            let xm = (x1 + x2) * .5;\r\n            let ym = (y1 + y2) * .5;\r\n            let right = x >= xm;\r\n            let below = y >= ym;\r\n\r\n            for (let i = below << 1 | right, j = i + 4; i < j; ++i) {\r\n                if (node = children[i & 3]) switch (i & 3) {\r\n                    case 0: find(node, x1, y1, xm, ym); break;\r\n                    case 1: find(node, xm, y1, x2, ym); break;\r\n                    case 2: find(node, x1, ym, xm, y2); break;\r\n                    case 3: find(node, xm, ym, x2, y2); break;\r\n                }\r\n            }\r\n        })(root, x0, y0, x3, y3);\r\n\r\n        return closestPoint;\r\n    }\r\n\r\n    let root = create();\r\n    root.visit = f => visit(f, root, x1_, y1_, x2_, y2_);\r\n    root.find = (x, y) => findNode(root, x, y, x1_, y1_, x2_, y2_);\r\n\r\n    for (i = 0; i < n; i++) insert(root, points[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\r\n    --i;\r\n\r\n    xs = ys = points = d = null;\r\n\r\n    return root;\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default class {\r\n  constructor(nodes){\r\n    this._nodes = nodes;\r\n  }\r\n  \r\n  apply () {\r\n    for (let i = 0, n = this._nodes.length; i < n; i++) {\r\n      let o = this._nodes[i];\r\n      o.x = Math.random();\r\n      o.y = Math.random();\r\n    }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {degrees} from './utils';\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  // let user define at least: starting angle and radius and\r\n  // clock/cclock direction\r\n  // size of vertices\r\n  // more: a ratio of compactness for the more/less connected nodes\r\n  // a spiral ratio with a rotation ratio for having more than 2pi\r\n  // distribution of nodes when spiriling\r\n  // use some other ordering criterion than degree? Strength?\r\n  // defined by user and found as attribute of each node?\r\n  // random ordering, minimal crossing of edges?\r\n  constructor(nodes, edges, layout_options = {}) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._angle_step = 2*Math.PI/nodes.length;\r\n    if (layout_options.starting_angle == null)\r\n\tthis._starting_angle = 0;\r\n    else\r\n\tthis._starting_angle = layout_options.starting_angle;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          this._nodes[nd.nodes[i].index].x = 0.05+(1+Math.cos(this._starting_angle+i*this._angle_step))*.45;\r\n          this._nodes[nd.nodes[i].index].y = 0.05+(1+Math.sin(this._starting_angle+i*this._angle_step))*.45;\r\n          this._nodes[nd.nodes[i].index].weight = nd.degrees[i];\r\n      }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {getDepth, getRanges} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  drawTreeCentered(root, visited_leafs_parent=0, layer=1){\r\n      root.centered = true;\r\n      root.depth_visited = false; // so that getDepth does not raise error if another tree layout is called subsequently\r\n      // branch order is for now stable but unpredictable, see layouts.cri\r\n      let visited_leafs = 0;\r\n      for (let i=0; i < root.children.length; i++){\r\n          let child = root.children[i];\r\n          if (child.centered != true){\r\n              visited_leafs += this.drawTreeCentered(child, visited_leafs+visited_leafs_parent, layer+1);\r\n          }\r\n      }\r\n      if (root.children == 0){\r\n          visited_leafs++;\r\n      }\r\n      // moving to parent, position node\r\n      root.y = this.stepy*(visited_leafs_parent+(visited_leafs-1)/2) + this.alphay;\r\n      root.x = (layer-1)*this.stepx + this.alphax;\r\n      return visited_leafs;\r\n  }\r\n\r\n  apply () {\r\n      // only one root node supported for now\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for non-trees (cyclical graphs) should be\r\n      // implemented separately for now\r\n      let nodes = this._nodes;\r\n      // make hierarchy, annotate parent(s) and children in the nodes\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.centered = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the root\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].parents.length == 0){\r\n              var root = nodes[i];\r\n              break;\r\n          }\r\n      }\r\n      const depth = getDepth(root);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      let r = getRanges(depth);\r\n      this.alphax = r.start;\r\n      this.stepx = r.step;\r\n      // posx = alphax + stepx*(depth-1)\r\n\r\n      // find the number of leafs to distribute nodes vertically\r\n      let leafs = 0;\r\n      nodes.forEach(function(node){\r\n          if (node.children.length == 0){\r\n              leafs++;\r\n          }\r\n      });\r\n      r = getRanges(leafs);\r\n      // each leaf y = [0+alpha,1-alpha]\r\n      this.alphay = r.start;\r\n      this.stepy = r.step;\r\n      // posy = alphay + stepy*(leafn-1)\r\n\r\n      this.drawTreeCentered(root);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {getDepth, getRanges} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  drawTreeTop(root, visited_leafs_parent=0, layer=1){\r\n    // each node is in vertically on the top of the stack of its leafs\r\n    root.visited = true;\r\n    root.depth_visited = false; // so that getDepth does not raise error if another tree layout is called subsequently\r\n    root.x = this.alphax+this.stepx*(layer-1);\r\n    root.y = 1-(this.alphay+this.stepy*(visited_leafs_parent));\r\n    // visit children until leafs\r\n    let visited_leafs = 0;\r\n    for (let i=0; i < root.children.length; i++){\r\n       let child = root.children[i];\r\n       if (child.centered != true){\r\n         visited_leafs += this.drawTreeTop(child, visited_leafs+visited_leafs_parent, layer+1);\r\n       }\r\n    }\r\n    if(root.children.length == 0){\r\n        visited_leafs++;\r\n    }\r\n    return visited_leafs;\r\n}\r\n  apply () {\r\n      let nodes = this._nodes;\r\n      // make hierarchy, annotate parent(s) and children in the nodes\r\n      // this layout can be run on any graph actually\r\n      // for which the children might be selected e.g. for their degree\r\n      // draw can be decided on other measures, such as closeness centrality or clustering\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.centered = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the root\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].parents.length == 0){\r\n              var root = nodes[i];\r\n              break;\r\n          }\r\n      }\r\n      const depth = getDepth(root);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      let r = getRanges(depth);\r\n      this.alphax = r.start;\r\n      this.stepx = r.step;\r\n      // posx = alphax + stepx*(depth-1)\r\n\r\n      // find the number of leafs to distribute nodes vertically\r\n      let leafs = 0;\r\n      nodes.forEach(function(node){\r\n          if (node.children.length == 0){\r\n              leafs++;\r\n          }\r\n      });\r\n      // each leaf y = [0+alpha,1-alpha]\r\n      r = getRanges(leafs);\r\n      this.alphay =  r.start;\r\n      this.stepy = r.step;\r\n      // posy = alphay + stepy*(leafn-1)\r\n\r\n      // give nodes their positions\r\n      // plot each branch in depth first,\r\n      // increment y position for each leaf\r\n      // backtracking to go from leaf to parents\r\n      // and decide if parent is visited (always in tree layout)\r\n\r\n      this.drawTreeTop(root);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nexport default class {\r\n  // this layout should handle any digraph\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this.alphay = 0.05; // y margin\r\n    this.alphax = 0.05; // x margin\r\n  }\r\n\r\n  makeLayers(nodes, layer){\r\n      if (nodes.length > 1){\r\n          const stepy = (1 - 2*this.alphay)/(nodes.length-1);\r\n          for (let i=0; i<nodes.length; ++i){\r\n              nodes[i].visited = true;\r\n              nodes[i].layer = layer; // makes x afterwards\r\n              nodes[i].y = this.alphay + i*stepy;\r\n          }\r\n      }\r\n      else {\r\n          nodes[0].visited = true;\r\n          nodes[0].layer = layer; // makes x afterwards\r\n          nodes[0].y = 0.5;\r\n      }\r\n      let next_layer = [];\r\n      for (let i=0; i<nodes.length; i++){\r\n          let neighbors = nodes[i].parents.concat(nodes[i].children);\r\n          for (let j=0; j < neighbors.length; j++){\r\n              if (neighbors[j].visited == false && !next_layer.includes(neighbors[j])){\r\n                  next_layer.push(neighbors[j]);\r\n              }\r\n          }\r\n      }\r\n      if (next_layer.length == 0){\r\n          return layer;\r\n      }\r\n      else {\r\n          return this.makeLayers(next_layer, layer+1);\r\n      }\r\n  }\r\n\r\n  apply () {\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for trees (acyclic graphs) are\r\n      // implemented separately for now\r\n      let nodes = this._nodes;\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.visited = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the roots:\r\n      // nodes defined by the user as roots OR\r\n      // nodes with in-degree == 0 OR\r\n      // nodes with greatest in-degree (or degree if undirected graph)\r\n      let roots = [];\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].isroot == true){ // has to be on the json file of the graph\r\n              roots.push(nodes[i]);\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          for (let i = 0; i < nodes.length; i++){\r\n              if (nodes[i].parents.length == 0){\r\n                  roots.push(nodes[i]);\r\n              }\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          // calculate max out-degree\r\n          let max_outdegree = 0;\r\n          nodes.forEach(function(node){\r\n              if (node.children.length > max_outdegree){\r\n                  max_outdegree = node.children.length;\r\n              }\r\n          });\r\n          // choose vertices with greatest out-degree\r\n          nodes.forEach(function(node){\r\n              if (node.children.length == max_outdegree){\r\n                  roots.push(node);\r\n              }\r\n          });\r\n      }\r\n      // number of layers and max number of nodes in each layer\r\n      // has to be found by making the layout\r\n      // there are two approaches to finding the nodes in each layer:\r\n      // 1) each layer has all the neighbors of the nodes in the previous layer\r\n      // 2) follow links and then place non visited nodes on the layer of neighbors OR\r\n      // this layout implements the first of these approaches.\r\n      const depth = this.makeLayers(roots, 1);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      const stepx = (1-2*this.alphax)/(depth-1);\r\n      // posx = alphax + stepx*(depth-1)\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          this._nodes[i].x = this.alphax + stepx*(this._nodes[i].layer - 1);\r\n      }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nfunction isOrphan(node){\r\n    let orphan = true;\r\n    for (let i=0; i<node.parents.length; ++i){\r\n        let parent_ = node.parents[i];\r\n        if (parent_ != node)\r\n            orphan = false;\r\n    }\r\n    for (let i=0; i<node.children.length; ++i){\r\n        let child = node.children[i];\r\n        if (child != node)\r\n            orphan = false;\r\n    }\r\n    return orphan;\r\n}\r\n\r\nexport default class {\r\n  // this layout should handle any digraph\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this.alphay = 0.05; // y margin\r\n    this.alphax = 0.05; // x margin\r\n    this.components = {\"current_component\": 0, \"depth\": 1};\r\n    this.unvisited = nodes;\r\n  }\r\n  \r\n  initHierarchy(){\r\n      this._nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.visited = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n  }\r\n\r\n  separateOrphans(){\r\n      let orphans = [];\r\n      let nodes = [];\r\n      for (let i=0; i< this._nodes.length; ++i){\r\n          let node = this._nodes[i];\r\n          if (isOrphan(node))\r\n              orphans.push(node);\r\n          else\r\n              nodes.push(node);\r\n      }\r\n      return orphans;\r\n  }\r\n\r\n  findRoots(nodes){\r\n      // find the roots:\r\n      // nodes defined by the user as roots OR\r\n      // nodes with in-degree == 0 OR\r\n      // nodes with greatest in-degree (or degree if undirected graph)\r\n      let roots = [];\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].isroot == true){ // has to be on the json file of the graph\r\n              roots.push(nodes[i]);\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          for (let i = 0; i < nodes.length; i++){\r\n              if (nodes[i].parents.length == 0){\r\n                  roots.push(nodes[i]);\r\n              }\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          // calculate max out-degree\r\n          let max_outdegree = 0;\r\n          nodes.forEach(function(node){\r\n              if (node.children.length > max_outdegree){\r\n                  max_outdegree = node.children.length;\r\n              }\r\n          });\r\n          // choose vertices with greatest out-degree\r\n          nodes.forEach(function(node){\r\n              if (node.children.length == max_outdegree){\r\n                  roots.push(node);\r\n              }\r\n          });\r\n      }\r\n      return roots;\r\n  }\r\n\r\n  placeOrphans(nodes, max_layer){\r\n      const stepy = (1 - 2*this.alphay)/(nodes.length-1);\r\n      for (let i=0; i<nodes.length; ++i){\r\n          nodes[i].y = this.alphay + i*stepy;\r\n          nodes[i].x = max_layer+1;\r\n      }\r\n      if (nodes.length > 0)\r\n          return max_layer+1;\r\n      else\r\n          return max_layer;\r\n  }\r\n\r\n  unvisitedNodes(){\r\n      let nodes = [];\r\n      let orphans = this.orphans;\r\n      this.unvisited.forEach(function(node){\r\n          if (node.visited == false && !(node in orphans))\r\n              nodes.push(node);\r\n      });\r\n      if (nodes.length != this.unvisited){\r\n          this.maybe_more = true;\r\n          this.unvisited = nodes;\r\n      } else this.maybe_more = false;\r\n  }\r\n\r\n  placeAdditional(){\r\n      // place non-visited nodes in between layers\r\n      let aux_layers = {};\r\n      let c = this.components[this.components.current_component];\r\n      let layers = c.layers;\r\n      for (let i=0; i<this.unvisited.length; ++i){\r\n          let node = this.unvisited[i];\r\n          let lowest_layer = this.components.depth;\r\n          let child_found = false;\r\n          for(let j=0; j<node.children.length; ++j){\r\n              let child = node.children[j];\r\n              if (child.visited == true){\r\n                  child_found = true;\r\n                  if(child.layer <= lowest_layer){ // child has to be visited to have a layer\r\n                      lowest_layer = child.layer;\r\n                  }\r\n                  break;\r\n              }\r\n          }\r\n          if (child_found){\r\n              node.visited = true;\r\n              // node.index = lowest_layer-sep;\r\n              if ( !((lowest_layer-sep) in layers))\r\n                  layers[lowest_layer-sep] = []\r\n              layers[lowest_layer-sep].push(node)\r\n          }\r\n          else {\r\n              let lowest_layer = max_layer;\r\n              let parent_found = false;\r\n              for(let j=0; j<node.parents.length; ++j){\r\n                  let parent_ = node.parents[j];\r\n                  if (parent_.visited == true){\r\n                      parent_found = true;\r\n                      if(parent_.layer <= lowest_layer){ // child has to be visited to have a layer\r\n                          lowest_layer = parent_.layer;\r\n                      }\r\n                  }\r\n              }\r\n              if (parent_found){\r\n                  node.visited = true;\r\n                  node.x = lowest_layer+sep;\r\n                  if ( !((lowest_layer+sep) in layers) )\r\n                      layers[lowest_layer+sep] = []\r\n                  layers[lowest_layer+sep].push(node)\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  initializeComponent(component){\r\n      this.components[component] = {};\r\n      this.components[component].max_nodes_layer = 0;\r\n      if (component > 0)\r\n          this.components[component].index_offset = this.components[component-1].vertical_nodes;\r\n      else\r\n          this.components[component].index_offset = 0;\r\n      this.components[component].current_layer = 1;\r\n      //this.components[component].layers = {\"nodes\": [], \"layer_value\": 1};\r\n      this.components[component].layers = {};\r\n      this.components[component].vertical_nodes = 0;\r\n  }\r\n\r\n  layerNodes(nodes){\r\n      if (!(this.components.current_component in this.components))\r\n          this.initializeComponent(this.components.current_component);\r\n      let c = this.components[this.components.current_component];\r\n      if (nodes.length > c.vertical_nodes)\r\n          c.vertical_nodes = nodes.length;\r\n      c.layers[c.current_layer] = [];\r\n      for (let i=0; i<nodes.length; ++i){\r\n          nodes[i].visited = true;\r\n          c.layers[c.current_layer].push(nodes[i]);\r\n      }\r\n      let next_layer = [];\r\n      for (let i=0; i<nodes.length; i++){\r\n          let candidates = nodes[i].children;\r\n          for (let j=0; j < candidates.length; j++){\r\n              if (candidates[j].visited == false && !next_layer.includes(candidates[j])){\r\n                  next_layer.push(candidates[j]);\r\n              }\r\n          }\r\n      }\r\n      if (next_layer.length > 0){\r\n          c.current_layer++;\r\n          if (this.components.depth<c.current_layer)\r\n              this.components.depth = c.current_layer;\r\n          this.layerNodes(next_layer);\r\n      }\r\n  }\r\n\r\n  apply () {\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for trees (acyclic graphs) are\r\n      // implemented separately for now\r\n\r\n      // number of layers and max number of nodes in each layer\r\n      // has to be found by making the layout\r\n      // there are two approaches to finding the nodes in each layer:\r\n      // 1) each layer has all the neighbors of the nodes in the previous layer\r\n      // 2) follow links and then place non visited nodes on the layer of neighbors OR\r\n      // this layout implements the second of these approaches.\r\n\r\n      this.initHierarchy();\r\n      this.orphans = this.separateOrphans();\r\n      this.unvisitedNodes();\r\n      while (this.unvisited.length > 0){\r\n          let roots = this.findRoots(this.unvisited);\r\n          this.layerNodes(roots);\r\n          this.unvisitedNodes(); // update unvisited nodes\r\n          this.maybe_mode = true;\r\n          while (this.maybe_more){\r\n              this.placeAdditional(); // place additional nodes linked to this component\r\n              this.unvisitedNodes(); // update unvisited nodes\r\n          }\r\n          this.components.current_component++;\r\n      }\r\n      this.components.vertical_nodes = 0;\r\n      for (let i=0; i<this.components.current_component; i++){\r\n          this.components.vertical_nodes += this.components[i].vertical_nodes;\r\n      }\r\n\r\n      // layerNodes should populate the dictionary this.components of components and aux variables:\r\n      // components[x] is a component, x is an integer\r\n      // components[x].vertical_nodes is the maximum number of nodes in a layer for the component\r\n      // components[x].layer[j] is the j-th layer on the component, j can be fractional\r\n      // components[x].index_offset is the number of nodes positioned in above components\r\n      // components.ncomponents is the number of components\r\n      // components.vertical_nodes is the sum of the max nodes in any layer of each component\r\n      // components.depth is the maximum number of layers\r\n\r\n      // each layer of tree xy = [0+alpha,1-alpha]\r\n      const stepx = (1-2*this.alphax)/(this.components.depth);\r\n      const stepy = (1-2*this.alphay)/(this.components.vertical_nodes);\r\n      for (let i=0; i<this.components.current_component; i++){\r\n          let component = this.components[i];\r\n          for (let layer_val in component.layers){\r\n              let layer = component.layers[layer_val];\r\n              if (layer.length == 1){\r\n                  let node = layer[0];\r\n                  node.x = this.alphax + stepx*layer_val;\r\n                  node.y = this.alphay + stepy*(component.index_offset + component.vertical_nodes/2);\r\n              } else {\r\n                  for (let k=0; k<layer.length; ++k){\r\n                      let node = layer[k];\r\n                      node.x = this.alphax + stepx*layer_val;\r\n                      node.y = this.alphay + stepy*(component.index_offset + k);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      this.placeOrphans(this.orphans);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {EigenvalueDecomposition} from 'ml-matrix';\r\nimport {create2dArray} from './utils';\r\n\r\nfunction twoSmallest (arr) {\r\n    const min = Math.min.apply(null, arr), // get the max of the array\r\n        mini = arr.indexOf(min);\r\n    arr[mini] = Infinity; // replace max in the array with -infinity\r\n    const second_min = Math.min.apply(null, arr), // get the new max \r\n        second_mini = arr.indexOf(second_min);\r\n    arr[second_mini] = Infinity; // replace max in the array with -infinity\r\n    const third_min = Math.min.apply(null, arr), // get the new max \r\n        third_mini = arr.indexOf(third_min);\r\n    return [second_mini, third_mini];\r\n}\r\n\r\nfunction normalize (x, y) {\r\n    let maxx = Math.max.apply(null, x.map(Math.abs)),\r\n        maxy = Math.max.apply(null, y.map(Math.abs));\r\n    let minx = Math.min.apply(null, x),\r\n        miny = Math.min.apply(null, y);\r\n    for(let i=0; i<x.length; ++i){\r\n        x[i] = 0.1+(x[i]-minx)/((maxx-minx)*1.25);\r\n        y[i] = 0.1+(y[i]-miny)/((maxy-miny)*1.25);\r\n    }\r\n    return [x, y];\r\n}\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  // let user define at least: starting angle and radius and\r\n  // clock/cclock direction\r\n  // size of vertices\r\n  // more: a ratio of compactness for the more/less connected nodes\r\n  // a spiral ratio with a rotation ratio for having more than 2pi\r\n  // distribution of nodes when spiriling\r\n  // use some other ordering criterion than degree? Strength?\r\n  // defined by user and found as attribute of each node?\r\n  // random ordering, minimal crossing of edges?\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  apply () {\r\n      let A = create2dArray(this._nodes.length, this._nodes.length);\r\n      // build the adjacency matrix\r\n      for (let i=0; i<this._edges.length; ++i){\r\n          let ii = this._edges[i].source.index;\r\n          let j = this._edges[i].target.index;\r\n          A[ii][j] = -1; // not considering edge weight for now (the example json files don't have weight)\r\n          A[j][ii] = -1; // not considering edge weight for now (the example json files don't have weight)\r\n      }\r\n      // build the diagonal of degrees\r\n      // NOT subtract adjacency from degrees but:\r\n      // substitute diagonal by degrees\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          A[i][i] = -A[i].reduce((a, b) => a+b, 0);\r\n      }\r\n      let foo = new EigenvalueDecomposition(A);\r\n      const iii = twoSmallest(foo.realEigenvalues);\r\n      const foo_ = foo.eigenvectorMatrix.transpose();\r\n      const x = foo_[iii[0]];\r\n      const y = foo_[iii[1]];\r\n      const xy = normalize(x, y);\r\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\r\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\r\n      // recipe from http://www.sfu.ca/personal/archives/richards/Pages/NAS.AJS-WDR.pdf\r\n      // and implemented in networkx/drawing/layout.py\r\n      this._nodes.forEach(function(node, i){\r\n          node.x = xy[0][i];\r\n          node.y = xy[1][i];\r\n      }); \r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\n// inspired in Matlab implementation\r\n// and JS transcription in\r\n// https://github.com/alanmeeson/spectral-graph-layout\r\n\r\nimport {create2dArray} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._epsilon = 1e-8; // tolerance\r\n    this._MAX_ITTERATIONS = 100; //We use power iteration, this is analogous to wall time to avoid infinite loops.\r\n    this._num_elements = nodes.length; //number of nodes in graph\r\n    this._dims = 2;\r\n  }\r\n  apply () {\r\n      let A = create2dArray(this._nodes.length, this._nodes.length);\r\n      // build the adjacency matrix\r\n      for (let i=0; i<this._edges.length; ++i){\r\n          let ii = this._edges[i].source.index;\r\n          let j = this._edges[i].target.index;\r\n          A[ii][j] = 1; // not considering edge weight for now (the example json files don't have weight)\r\n      }\r\n      const D = deg(A); //degree of each node in graph (number of connections).\r\n\r\n      const dims = this._dims + 1; //add one to the dims to allow for the first eigen vector\r\n      let u = new Array(dims);//declare the eigen vector matrix\r\n      u[0] = normalize(ones(this._num_elements)); //create & normalize the first eigen vector\r\n      for (let i = 1; i < dims; i++) u[i] = zeros(this._num_elements); //create empty space for the other eigen vectors\r\n\r\n      //Power iteration to determine the remaining eigen vectors.\r\n      for (let k=1; k < dims; k++) { //for each eigen vector after the first, \r\n          //initialize eigen vector with random values\r\n          let uhk = normalize(rand(this._num_elements));\r\n\r\n          let itt_count = 0; //we are allowing a max of 100 iterations, to avoid hanging and infinite loops. (specified above in constants)\r\n          let stop = false; //stopping criterion flag.\r\n          while (!stop) { // do...while using flags to keep it consistent with my matlab implementation\r\n\r\n              //D-orthogonalize against previous eigenvectors\r\n              let uk = uhk.slice();\r\n              for (let l = 0; l < k; l++) {\t\t\t\t\t\t\r\n                  let ul = u[l]; //extract the l-th eigen vector\r\n\r\n                  //Calculate (uk'.D.ul)/(ul'.D.ul)\r\n                  let top_ = 0;\r\n                  let bottom = 0;\r\n                  for (let vmi = 0; vmi < uk.length; vmi++) {\r\n                      top_ += (uk[vmi] * D[vmi] * ul[vmi]);\r\n                      bottom += (ul[vmi] * D[vmi] * ul[vmi]);\r\n                  }\r\n                  const ratio = top_ / bottom;\r\n\r\n                  //uk = uk - ((uk' . D . ul) / (ul' . D ul)) . ul\r\n                  for (let vsi = 0; vsi < uk.length; vsi++) {\r\n                      uk[vsi] = uk[vsi] - (ratio * ul[vsi]);\r\n                  }\r\n              }\r\n\r\n              //multiply with .5(I+D^-1 A)\r\n              for (let i = 0; i < uhk.length; i++) {\r\n                  uhk[i] = 0.5 * (uk[i] + dot(A[i], uk) / D[i]);\r\n              }\r\n\r\n\r\n              uhk = normalize(uhk);\r\n\r\n              itt_count = itt_count + 1;\r\n              stop = (itt_count > 100) | !(dot(uhk, uk) < (1-this._epsilon));\r\n          }\r\n          u[k] = uhk.slice();\t\r\n      }\r\n\r\n      //discard the first eigenvector which should be [ones].\r\n      // var v = new Array(u.length);\r\n      // for (var i=0; i < u.length; i++) {\r\n      //     v[i] = new Array(u[i].length);\r\n      //     for (var j=0; j < u[i].length; j++) v[i][j] = u[i][j];\r\n      // }\r\n      const x = normalize2(u[1]);\r\n      const y = normalize2(u[2]);\r\n      this._nodes.forEach(function(node, i){\r\n          node.x = x[i];\r\n          node.y = y[i];\r\n      }); \r\n  }\r\n};\r\n\r\nfunction deg(graph) {\r\n    //Calculate the degree of each node from the graph matrix.\r\n    let d = zeros(graph.length);\r\n\r\n    //degree of node i is the sum of the weights of all edges connected to it.\r\n    for (let i = 0; i < graph.length; i++) {\r\n        let node_degree = 0;\r\n        for (let j = 0; j < graph[i].length; j++) {\r\n            node_degree += graph[i][j];\r\n        }\r\n        d[i] = node_degree+1;\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\nfunction dot(a,b) {\r\n    //inner product of two vectors\r\n    let d = 0;\r\n    for (let i = 0; i < a.length; i++) {\r\n        d += a[i] * b[i];\r\n    }\r\n    return d;\r\n}\r\n\r\nfunction euclideanDistance(coordinates) {\r\n    //calculate the euclidean distance between two points/vectors.\r\n    // used for normalization.\r\n    let d = 0;\r\n\r\n    for (let i = 0; i < coordinates.length; i++) {\r\n        d += Math.pow(coordinates[i], 2);\r\n    }\r\n    return Math.sqrt(d);\r\n}\r\n\r\nfunction normalize(arr) {\r\n    //normalizes a vector = arr/||arr||\r\n    const d = euclideanDistance(arr);\r\n    let narr = new Array(arr.length);\r\n    for (let i = 0; i < arr.length; i++) {\r\n        narr[i] = arr[i] / d;\r\n    }\r\n\r\n    return narr;\r\n}\r\n\r\nfunction rand(n) {\r\n    //create a vector of length n and fill with random numbers.\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = Math.random();\r\n    return arr;\r\n}\r\n\r\nfunction add(a, b) {\r\n    let c = new Array(a.length);\r\n    for (let i = 0; i < a.length; i++) {\r\n        c[i] = new Array(a[i].length);\r\n        for (let j = 0; j < a[i].length; j++) c[i][j] = a[i][j] + b[i][j];\r\n    }\r\n    return c;\r\n}\r\n\r\nfunction symmetricRandMatrix(n, ulim) {\r\n    let mat = new Array(n);\r\n    for (let i = 0; i < n; i++) {\r\n        mat[i] = new Array(n);\r\n        mat[i][i] = 0;\r\n    }\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = i + 1; j < n; j++) {\r\n            mat[i][j] = ulim * Math.random();\r\n            mat[j][i] = mat[i][j];\r\n        }\r\n    }\r\n    return mat;\r\n}\r\n\r\nfunction zeros(n) {\r\n    //create a vector filled with zeros\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = 0;\r\n    return arr;\r\n}\r\n\r\nfunction ones(n) {\r\n    //create a vector filled with ones\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = 1;\r\n    return arr;\r\n}\r\n\r\nfunction normalize2 (x) {\r\n    let maxx = Math.max.apply(null, x.map(Math.abs));\r\n    let minx = Math.min.apply(null, x);\r\n    for(let i=0; i<x.length; ++i){\r\n        x[i] = 0.1+(x[i]-minx)/((maxx - minx)*1.25);\r\n    }\r\n    return x;\r\n}\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {degrees} from './utils';\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05; // from [0,1] borders\r\n    this._radius = 0.05; // of the empty circle on the center\r\n    this._nlines = 5;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const nodes_segment = this._nodes.length / this._nlines;\r\n      const segment = 0.5 - (this._margin + this._radius);\r\n      const step = segment / nodes_segment;\r\n      const angle = 2*Math.PI/this._nlines;\r\n      let j = 0;\r\n      for(let i=0; i<this._nodes.length; ++i){\r\n          let ii = nd.nodes[i].index;\r\n          this._nodes[ii].x = 0.5+(this._radius + step*(i-j*nodes_segment))*Math.cos(angle*j+Math.PI/2);\r\n          this._nodes[ii].y = 0.5+(this._radius + step*(i-j*nodes_segment))*Math.sin(angle*j+Math.PI/2);\r\n          j = Math.floor(i/nodes_segment);\r\n      }\r\n  }\r\n};\r\n","import {degrees} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const sq = Math.sqrt(this._nodes.length);\r\n      const reminder = sq - Math.floor(sq);\r\n      if (reminder > 0)\r\n\t  var nnodes = Math.floor(sq)+1;\r\n      else\r\n\t  var nnodes = sq;\r\n      const step = (1 - this._margin*2)/nnodes;\r\n\r\n      const nlines = this._nodes.length/nnodes;\r\n      const reminder2 = nlines - Math.floor(nlines);\r\n      if (reminder2 > 0)\r\n\t  var nlines2 = Math.floor(nlines)+1;\r\n      else\r\n\t  var nlines2 = nlines;\r\n      const stepy = (1-2*this._margin)/(nlines2-2);\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n\t  let j = Math.floor(i/(nnodes+1));\r\n          this._nodes[nd.nodes[i].index].x = this._margin+step*(i-j*(nnodes+1));\r\n          this._nodes[nd.nodes[i].index].y = this._margin+stepy*j;\r\n          this._nodes[nd.nodes[i].index].weight = nd.degrees[i];\r\n      }\r\n  }\r\n};\r\n","import {degrees} from './utils';\r\n\r\nexport default class {\r\n  // the hubs are on the first half of the sinusoid period\r\n  // the intermediary are on the second half\r\n  // and the periphery are on the upper straight line\r\n  // further versions should enable the choice of other\r\n  // fractions of hubs, intermediary and peripheral vertices\r\n  // or the Erdös sectioning.\r\n  // maybe also let the user set the endpoints of the periphery segment\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05;\r\n    this._hubs = 0.1; // 10%\r\n    this._intermediary = 0.2;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const nhubs_intermediary = Math.floor(this._nodes.length*(this._hubs + this._intermediary));\r\n      const nhubs = Math.floor(this._nodes.length*this._hubs);\r\n      const stepx1 = ((1 - 2*this._margin)/2)/(nhubs - 1);\r\n      const steprad = Math.PI/(nhubs - 1); \r\n      let i = 0;\r\n      while (i < nhubs ){\r\n        this._nodes[nd.nodes[i].index].x = this._margin + stepx1*i;\r\n        this._nodes[nd.nodes[i].index].y = this._margin + 0.4 + 0.4*Math.sin(i*steprad);\r\n\t++i;\r\n      }\r\n      const nintermediary = nhubs_intermediary - nhubs;\r\n      const steprad2 = Math.PI/nintermediary; \r\n      const stepx2 = ((1 - 2*this._margin)/2)/nintermediary;\r\n      i = 0;\r\n      while (i < nintermediary ){\r\n        this._nodes[nd.nodes[i+nhubs].index].x = 0.5 + stepx2*(i+1);\r\n        this._nodes[nd.nodes[i+nhubs].index].y = this._margin + 0.4 + 0.4*Math.sin(Math.PI+(i+1)*steprad2);\r\n\t++i;\r\n      }\r\n      const p0 = [0.85, 0.75];\r\n      const p1 = [0.4, 1-this._margin];\r\n      const nperipheral = this._nodes.length - nhubs_intermediary;\r\n      const stepxx = (p1[0]-p0[0])/(nperipheral - 1);\r\n      const stepy = (p1[1]-p0[1])/(nperipheral - 1);\r\n      i = 0;\r\n      while (i < nperipheral ){\r\n        this._nodes[nd.nodes[i+nhubs_intermediary].index].x = p0[0] + stepxx*i;\r\n        this._nodes[nd.nodes[i+nhubs_intermediary].index].y = p0[1] + stepy*i;\r\n\t++i;\r\n      }\r\n  }\r\n};\r\n","import rbush from './rbush' ;\r\nimport ccNetViz_geomutils from '../geomutils' ;\r\nimport {partitionByStyle, getPartitionStyle} from '../primitiveTools' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n\r\n\r\nconst EPS = Number.EPSILON || 1e-14;\r\n\r\n\r\n\r\n\r\n//solving cube analyticaly for bezier curves\r\nfunction cuberoot(x) {\r\n    const y = Math.pow(Math.abs(x), 1/3);\r\n    return x < 0 ? -y : y;\r\n}\r\n\r\nfunction solveCubic(a, b, c, d) {\r\n    if (Math.abs(a) < 1e-8) { // Quadratic case, ax^2+bx+c=0\r\n        a = b; b = c; c = d;\r\n        if (Math.abs(a) < 1e-8) { // Linear case, ax+b=0\r\n            a = b; b = c;\r\n            if (Math.abs(a) < 1e-8) // Degenerate case\r\n                return [];\r\n            return [-b/a];\r\n        }\r\n\r\n        const D = b*b - 4*a*c;\r\n        if (Math.abs(D) < 1e-8)\r\n            return [-b/(2*a)];\r\n        else if (D > 0)\r\n            return [(-b+Math.sqrt(D))/(2*a), (-b-Math.sqrt(D))/(2*a)];\r\n        return [];\r\n    }\r\n\r\n    // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)\r\n    const p = (3*a*c - b*b)/(3*a*a);\r\n    const q = (2*b*b*b - 9*a*b*c + 27*a*a*d)/(27*a*a*a);\r\n    let roots;\r\n\r\n    if (Math.abs(p) < 1e-8) { // p = 0 -> t^3 = -q -> t = -q^1/3\r\n        roots = [cuberoot(-q)];\r\n    } else if (Math.abs(q) < 1e-8) { // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0\r\n        roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\r\n    } else {\r\n        const D = q*q/4 + p*p*p/27;\r\n        if (Math.abs(D) < 1e-8) {       // D = 0 -> two roots\r\n            roots = [-1.5*q/p, 3*q/p];\r\n        } else if (D > 0) {             // Only one real root\r\n            const u = cuberoot(-q/2 - Math.sqrt(D));\r\n            roots = [u - p/(3*u)];\r\n        } else {                        // D < 0, three roots, but needs to use complex numbers/trigonometric solution\r\n            const u = 2*Math.sqrt(-p/3);\r\n            const t = Math.acos(3*q/p/u)/3;  // D < 0 implies p < 0 and acos argument in [-1..1]\r\n            const k = 2*Math.PI/3;\r\n            roots = [u*Math.cos(t), u*Math.cos(t-k), u*Math.cos(t-2*k)];\r\n        }\r\n    }\r\n\r\n    // Convert back from depressed cubic\r\n    for (let i = 0; i < roots.length; i++)\r\n        roots[i] -= b/(3*a);\r\n\r\n    return roots;\r\n}\r\n\r\n//function distanceToBezier(x,y,ax,ay,bx,by,cx,cy){\r\nfunction distance2ToBezier(x,y,a,d,b,e,c,f){\r\n  //based on compute derivation of: d/dt ((X - (a*(1-t)*(1-t)+2*b*t*(1-t)+c*t*t))^2 + (Y - (d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t))^2)\r\n  \r\n  const A =   4*a*a  - 16*a*b + 8*a*c  + 16*b*b - 16*b*c + 4*c*c  + 4*d*d  - 16*d*e + 8*d*f  + 16*e*e - 16*e*f + 4*f*f;\r\n  const B = - 12*a*a + 36*a*b - 12*a*c - 24*b*b + 12*b*c - 12*d*d + 36*d*e - 12*d*f - 24*e*e + 12*e*f;\r\n  const C =   12*a*a - 24*a*b + 4*a*c  - 4*a*x  + 8*b*b  + 8*b*x  - 4*c*x  + 12*d*d - 24*d*e + 4*d*f  - 4*d*y  + 8*e*e + 8*e*y - 4*f*y\r\n  const D = - 4*a*a  + 4*a*b  + 4*a*x  - 4*b*x  - 4*d*d  + 4*d*e  + 4*d*y  - 4*e*y;\r\n    \r\n  const eqresult = solveCubic(A,B,C,D);\r\n  \r\n  \r\n  //loop through all possible solitions to find out which point is the nearest\r\n  let mindist = Infinity;\r\n  for(let i = 0; i < eqresult.length; i++){\r\n    const t = eqresult[i];\r\n    \r\n    if(t < 0 || t > 1)\r\n      continue;\r\n    \r\n    //point at bezier curve\r\n    const px = a*(1-t)*(1-t)+2*b*t*(1-t)+c*t*t;\r\n    const py = d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t;\r\n    \r\n    const dist = distance2(x,y,px,py);\r\n    if(dist < mindist)\r\n      mindist = dist;\r\n    \r\n  }\r\n  \r\n  return mindist;\r\n}\r\n\r\n/*\r\n * @param v - array of with points [x1,y1,x2,y2 .... ]\r\n * @return array representing bounding box [x1,y1,x2,y2]\r\n */\r\nfunction getBBFromPoints(v){\r\n  let xmin = Infinity;\r\n  let xmax = -xmin;\r\n  let ymin = Infinity;\r\n  let ymax = -ymin;\r\n  \r\n  //x of points - even indexes in array \r\n  for(let i = 0; i < v.length; i+=2){\r\n    const val = v[i];\r\n    if(val < xmin) xmin = val;\r\n    if(val > xmax) xmax = val;\r\n  }\r\n  \r\n  //y of points - odd indexes in array \r\n  for(let i = 1; i < v.length; i+=2){\r\n    const val = v[i];\r\n    if(val < ymin) ymin = val;\r\n    if(val > ymax) ymax = val;\r\n  }\r\n\r\n  return [xmin, ymin, xmax, ymax];\r\n}\r\n\r\n//distance from point to point\r\nfunction distance2(x1,y1,x2,y2){\r\n  const dx = x1 - x2;\r\n  const dy = y1 - y2;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n//distance from point to line\r\nfunction pDistance2(x, y, x1, y1, x2, y2) {\r\n  const A = x - x1;\r\n  const B = y - y1;\r\n  const C = x2 - x1;\r\n  const D = y2 - y1;\r\n\r\n  const dot = A * C + B * D;\r\n  const len_sq = C * C + D * D;\r\n  let param = -1;\r\n  if (len_sq != 0) //in case of 0 length line\r\n      param = dot / len_sq;\r\n\r\n  let xx, yy;\r\n\r\n  if (param < 0) {\r\n    xx = x1;\r\n    yy = y1;\r\n  }\r\n  else if (param > 1) {\r\n    xx = x2;\r\n    yy = y2;\r\n  }\r\n  else {\r\n    xx = x1 + param * C;\r\n    yy = y1 + param * D;\r\n  }\r\n\r\n  return distance2(x,y,xx,yy);\r\n}\r\n\r\nfunction lineIntersectsLine(l1p1x, l1p1y, l1p2x, l1p2y, l2p1x, l2p1y, l2p2x, l2p2y)\r\n{\r\n    let q = (l1p1y - l2p1y) * (l2p2x - l2p1x) - (l1p1x - l2p1x) * (l2p2y - l2p1y);\r\n    let d = (l1p2x - l1p1x) * (l2p2y - l2p1y) - (l1p2y - l1p1y) * (l2p2x - l2p1x);\r\n\r\n    if( d == 0 )\r\n    {\r\n        return false;\r\n    }\r\n\r\n    let r = q / d;\r\n\r\n    q = (l1p1y - l2p1y) * (l1p2x - l1p1x) - (l1p1x - l2p1x) * (l1p2y - l1p1y);\r\n    let s = q / d;\r\n\r\n    if( r < 0 || r > 1 || s < 0 || s > 1 )\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction pointInRect(px,py, x1, y1, x2, y2){\r\n  return px >= x1 - EPS && px <= x2 + EPS && py >= y1 - EPS && py <= y2 + EPS\r\n}\r\n\r\nfunction rectIntersectsRect(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r2y){\r\n  return p1x <= r2x &&\r\n          p1y <= r2y &&\r\n          p2x >= r1x &&\r\n          p2y >= r1y;\r\n}\r\n\r\nfunction lineIntersectsRect(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r2y)\r\n{\r\n    if(pointInRect(p1x, p1y, r1x, r1y, r2x, r2y) || pointInRect(p2x, p2y, r1x, r1y, r2x, r2y))\r\n      return true;\r\n    \r\n    return lineIntersectsLine(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r1y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r2x, r1y, r2x, r2y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r2x, r2y, r1x, r2y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r1x, r2y, r1x, r1y);\r\n}\r\n\r\nfunction eq(a,b){\r\n  return a >= b-EPS && a <= b+EPS;\r\n}\r\n\r\nfunction neq(a,b){\r\n  return !eq(a,b);\r\n}\r\n\r\n\r\nfunction checkBezierTkoef(a,d,b,e,c,f,t,q,s,r,v){\r\n  if(t < 0 || t > 1)\r\n    return false;\r\n  \r\n  if(neq(v-s,0)){\r\n    const x = (d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t)/(v-s);\r\n    if(x < 0 || x > 1)\r\n      return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction bezierIntersectsLine(a,d,b,e,c,f, q,s,r,v){\r\n    //based on wolfram alpha: >> solve ((d*(1-x)*(1-x)+2*e*x*(1-x)+f*x*x) = s + ((-a*(x-1)*(x-1) + x*(2*b*(x-1)-c*x)+q)/(q-r))*(v - s)) for x <<\r\n\r\n    let t;\r\n    \r\n    let tden = -a*s+a*v+2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r;\r\n    if(neq(tden, 0)){\r\n      if(neq(q-r, 0)){\r\n        let sq1 = 2*a*s-2*a*v-2*b*s+2*b*v-2*d*r+2*e*q-2*e*r;\r\n        let sq = sq1*sq1 - 4*(-a*s+a*v+d*q-d*r-q*v+r*s)*(-a*s+a*v+2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r);\r\n        if(sq >= 0){\r\n          const t1 = a*s-a*v-b*s+b*v-d*q+d*r+e*q-e*r;\r\n  \r\n          t = (t1-0.5*Math.sqrt(sq))/tden;\r\n          if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n            return true;\r\n  \r\n          t = (t1+0.5*Math.sqrt(sq))/tden;\r\n          if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n            return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    tden = -b*s+b*v+c*s-c*v+e*q-e*r-f*q+f*r;\r\n    if(eq(d, 2*e-f) && eq(a,2*b-c) && neq(tden, 0) && neq(q*s-q*v-r*s+r*v,0)){\r\n      t = -2*b*s+2*b*v+c*s-c*v+2*e*q-2*e*r-f*q+f*r-q*v+r*s;\r\n      t = t/(2*tden);\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    if(eq(s,v) && eq(d,2*e-f) && neq(e-f,0) && neq(q-r,0)){\r\n      t = (2*e-f-v)/(2*(e-f));\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    let aeq = (2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r)/(s-v);\r\n    let val = b*d*s-b*d*v-2*b*e*s+2*b*e*v+b*f*s-b*f*v-c*d*s+c*d*v+2*c*e*s-2*c*e*v-c*f*s+c*f*v-d*e*q+d*e*r+d*f*q-d*f*r+2*e*e*q-2*e*e*r-3*e*f*q+3*e*f*r+f*f*q-f*f*r;\r\n    if(eq(a, aeq) && neq(val,0) && neq(q-r, 0)){\r\n      t = (2*b*s-2*b*v-c*s+c*v-2*e*q+2*e*r+f*q-f*r+q*v-r*s)/(2*(b*s-b*v-c*s+c*v-e*q+e*r+f*q-f*r));\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction bezierIntersectsRect(a,d,b,e,c,f, r1x, r1y, r2x, r2y)\r\n{\r\n    if(pointInRect(a, d, r1x, r1y, r2x, r2y) || pointInRect(c, f, r1x, r1y, r2x, r2y))\r\n      return true;\r\n    \r\n    const centerx = (r1x+r2x)/2;\r\n    const centery = (r1y+r2y)/2;\r\n    \r\n    const diffx = r1x-r2x;\r\n    const diffy = r1y-r2y;\r\n    \r\n    //performance optimalization based on distance\r\n    let diff2xy = diffx*diffx + diffy*diffy;\r\n    let dist2 = distance2ToBezier(centerx, centery, a,d,b,e,c,f);\r\n    if(dist2*4 > diff2xy)\r\n      return false;\r\n    if(dist2*4 <= Math.min(diffx*diffx, diffy*diffy))\r\n      return true;\r\n\r\n    return bezierIntersectsLine(a,d,b,e,c,f, r1y, r2x, r1y, r1y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r2x, r1y, r2x, r2y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r2x, r2y, r1x, r2y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r1x, r2y, r1x, r1y);\r\n}\r\n\r\nexport {\r\n        EPS, \r\n        bezierIntersectsRect, \r\n        bezierIntersectsLine, \r\n        lineIntersectsRect, \r\n        rectIntersectsRect, \r\n        pointInRect, \r\n        distance2ToBezier, \r\n        distance2, \r\n        pDistance2, \r\n        getBBFromPoints,\r\n        eq,\r\n        neq\r\n      };\r\n","import ccNetViz_utils from '../utils' ;\r\nimport ccNetViz_gl from '../gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\n// this file creates webGL type textures of images example custom.html\r\n\r\nexport default class {\r\n  constructor(events, onLoad){\r\n    this._load = [events.debounce(onLoad, 5)];\r\n    this._textures = {}; //already converted to textures\r\n    this._pending = {}; //pending images \r\n    this._n = 0;  //counts pending images to be converted to textures\r\n  }\r\n\r\n  get(gl, img, action, options) { \r\n      var p = this._pending[img];\r\n      var t = this._textures[img];\r\n\r\n      \r\n      // TODO : add explanation about if-else statements below\r\n      if (p) {\r\n          p.push(action);\r\n      }\r\n      else if (t) {\r\n          action && action();\r\n      }\r\n\r\n      // if image is neither in this._pending array nor nor in already converted this._textures array\r\n      //add the image to the pending, then convert it to texture on line ccNetViz_gl.createTexture(gl, img,function)\r\n      // and remove it from pending + add it to textures\r\n      \r\n      else {\r\n          p = this._pending[img] = [action];\r\n          this._n++;\r\n          this._textures[img] = t = ccNetViz_gl.createTexture(gl, img, () => {\r\n              p.forEach(a => a && a());\r\n              delete this._pending[img];\r\n              \r\n              --this._n || this._load.forEach(l => l());\r\n          }, options);\r\n      }\r\n      return t;\r\n  }\r\n\r\n  onLoad (action) {\r\n    if(this.allLoaded())\r\n      action();\r\n    else\r\n      this._load.push(action);\r\n  }\r\n  \r\n  allLoaded(){\r\n    return ccNetViz_utils.emptyObject(this._pending);\r\n  }\r\n\r\n}","import ccNetViz_utils from '../utils' ;\r\nimport ccNetViz_gl from '../gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(events, onLoad){\r\n    this._load = [events.debounce(onLoad || (() => {}), 5)];\r\n    this._files = {};\r\n    this._pending = {};\r\n    this._n = 0;\r\n  }\r\n  \r\n  _transformFile(data, dataType) {\r\n    if(dataType === 'json')\r\n      return JSON.parse(data);\r\n    return data;    \r\n  }\r\n  \r\n  get(url) {\r\n    return this._files[url];\r\n  }\r\n\r\n  /*\r\n   * @param type {\r\n   *   url: 'url of file',\r\n   *   success: callback\r\n   *   dataType \"text\" || \"json\"\r\n   * }\r\n   */\r\n  load(url, action, dataType) {\r\n    let p = this._pending[url];\r\n    let f = this._files[url];\r\n\r\n    if (p) {\r\n        p.push(action);\r\n    }\r\n    else if (f) {\r\n        action && action();\r\n    }\r\n    else {\r\n      p = this._pending[url] = [action];\r\n      this._n++;\r\n\r\n      ccNetViz_utils.ajax(url, (data) => {\r\n        this._files[url] = this._transformFile(data,dataType);\r\n        p.forEach(a => a && a(this._files[url]));\r\n        delete this._pending[url];\r\n        --this._n || this._load.forEach(l => l());\r\n      }, dataType=='arraybuffer'?dataType:undefined);\r\n    }\r\n    return f;\r\n  }\r\n  \r\n  onLoad (action) {\r\n    if(this.allLoaded())\r\n      action();\r\n    else\r\n      this._load.push(action);\r\n  }\r\n  \r\n  allLoaded(){\r\n    return ccNetViz_utils.emptyObject(this._pending);\r\n  }\r\n  \r\n}\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nimport ccNetViz_defaultTexts  from './default';\r\nimport ccNetViz_sdfTexts      from './sdf/sdf';\r\nimport ccNetViz_utils         from '../utils';\r\n\r\nexport default class {\r\n  constructor(gl, files, textures){\r\n    this._gl = gl;\r\n\r\n    this._modules = {\r\n      'default': new ccNetViz_defaultTexts(gl, files, textures),\r\n      'sdf': new ccNetViz_sdfTexts(gl, files, textures),\r\n    };\r\n  }\r\n\r\n  clear() {\r\n    for(let k in this._modules){\r\n      this._modules[k].clear();\r\n    }\r\n  }\r\n  \r\n  isSDF(font){\r\n    if(ccNetViz_utils.isObject(font)){\r\n      if(font.type === 'sdf' && font.pbf){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  getEngine(font) {\r\n    if(this.isSDF(font)){\r\n      return this._modules.sdf;\r\n    }\r\n    return this._modules.default;\r\n  }\r\n\r\n  bind () {\r\n    for(let k in this._modules){\r\n      this._modules[k].bind();\r\n    }\r\n  }\r\n  \r\n  remove () {\r\n    for(let k in this._modules){\r\n      this._modules[k].remove && this._modules[k].remove();\r\n    }\r\n  }\r\n\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(gl, files, textures){\r\n    this._gl = gl;\r\n    this._size = 1024;\r\n\r\n    \r\n    this._canvas = document.createElement(\"canvas\");\r\n    this._canvas.width = this._canvas.height = this._size;\r\n    this._canvas.style.width = this._canvas.style.height = this._size + 'px';\r\n    this._canvas.style.display = \"none\";\r\n    this._el = document.body.appendChild(this._canvas);\r\n\r\n    this._context = this._canvas.getContext('2d');\r\n    this._context.fillStyle = \"white\";\r\n    this._context.textAlign = \"left\";\r\n    this._context.textBaseline = \"top\";\r\n\r\n    this._rendered = this._texts = this._x = this._y = this._height = undefined;\r\n\r\n    this.texture = this._gl.createTexture();\r\n    \r\n  }\r\n\r\n  clear() {\r\n    this._rendered = {};\r\n    this._context.clearRect(0, 0, this._size, this._size);\r\n    this._height = this._x = this._y = 0;\r\n  }\r\n\r\n  setFont (font) {\r\n    var fontstr = font ? font.size+\"px \"+font.type : undefined;\r\n    \r\n    this._rendered [fontstr] = this._texts = this._rendered [fontstr] || {};\r\n    this._context.font = fontstr;\r\n    this._x = 0;\r\n    this._y += this._height;\r\n    this._height = font ? font.size + 1 : NaN;\r\n  }\r\n  \r\n  get fontSize(){\r\n    return this._height - 1;\r\n  }\r\n  \r\n  getTexture (style, onLoad){\r\n    onLoad();\r\n    return this.texture;\r\n  }\r\n\r\n  _getText (text) {\r\n    let result = this._texts[text];\r\n    if (!result) {\r\n        let width = this._context.measureText(text).width;\r\n        if (this._x + width > this._size) {\r\n            this._x = 0;\r\n            this._y += this._height;\r\n        }\r\n        this._context.fillText(text, this._x, this._y);\r\n        this._texts[text] = result = {\r\n            width: width,\r\n            height: this._height,\r\n            left: this._x / this._size,\r\n            right: (this._x + width) / this._size,\r\n            top: this._y / this._size,\r\n            bottom: (this._y + this._height) / this._size\r\n        };\r\n        this._x += width;\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  get (text, x, y) {\r\n    let c = this._getText(text);\r\n    \r\n    let dx = x <= 0.5 ? 0 : -c.width ;\r\n    let dy = y <= 0.5 ? 0 : -c.height;\r\n    \r\n    return [{\r\n        width:  c.width,\r\n        height: c.height,\r\n        left:   c.left,\r\n        right:  c.right,\r\n        top:    c.top,\r\n        bottom: c.bottom,\r\n        dx: dx,\r\n        dy: dy\r\n      }];\r\n  }\r\n  \r\n  steps (text) {\r\n    return 1;\r\n  }\r\n\r\n  bind () {\r\n    this._gl.bindTexture(this._gl.TEXTURE_2D, this.texture);\r\n    this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n    this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._canvas);\r\n    this._gl.bindTexture(this._gl.TEXTURE_2D, null);\r\n  }\r\n  \r\n  remove () {\r\n    this._context && this._el.parentNode.removeChild(this._el);\r\n  }\r\n\r\n};","import GlyphAtlas from './atlas';\r\nimport SpriteGenerator from './spriteGenerator';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: Aleš Saska\r\n */\r\n\r\n\r\n// A simplified representation of the glyph containing only the properties needed for shaping.\r\nclass SimpleGlyph {\r\n  constructor(glyph, rect, buffer) {\r\n    const padding = 1;\r\n    this.advance = glyph.advance;\r\n    this.left = glyph.left - buffer - padding;\r\n    this.top = glyph.top + buffer + padding;\r\n    this.rect = rect;\r\n  }\r\n}\r\n\r\n\r\n// Multiplication factor by which the size will grow\r\nconst SIZE_GROWTH_RATE = 4;\r\n\r\n// Size in which we try to contian the glyphs\r\nconst DEFAULT_SIZE = 512;\r\n\r\n// must be \"DEFAULT_SIZE * SIZE_GROWTH_RATE ^ n\" for some integer n\r\n// Maybe the maximum size allowed of the atlas\r\nconst MAX_SIZE = 2048;\r\n\r\n\r\n// Class for the text engine\r\n\r\n// invoked only when main configuration object, the \"font\" is mentioned and\r\n// the proper link to the font file is present\r\nexport default class {\r\n\r\n  // new text engine object takes 3 arguments\r\n  // 1. gl = Webgl context\r\n  // 2. files = File object programmed in src/dataSources/files.js\r\n  // 3. texture = Texture object programmed in src/dataSources/textures.js\r\n\r\n  constructor(gl, files, textures) {\r\n    // Defines the dimensions of the texture\r\n    this.width = DEFAULT_SIZE;\r\n    this.height = DEFAULT_SIZE;\r\n\r\n    // Does nothing. Required in default.js text engine\r\n    this.clear();\r\n\r\n    // _files contains the file object of the glyph obtained via protobuf\r\n    this._files = files;\r\n    console.log('this._files')\r\n    console.log(this._files)\r\n    // Webgl Rendering context\r\n    this._gl = gl;\r\n\r\n    // Atlas object programmed in src/texts/sdf/atlas.js\r\n    this.atlas = new GlyphAtlas(this._gl, () => { this._cachedGlyphs = {}; });\r\n\r\n    // For every char_id, contains position, properties and buffer data\r\n    this._glyphs = {};\r\n\r\n    // For every char_id, contains position and properties\r\n    this._rects = {};\r\n\r\n    // glyphs that are cached from previous draw call of label for next one\r\n    this._cachedGlyphs = {};\r\n\r\n    // Client-Side builder of spritesheet\r\n    this.spriteGenerator = new SpriteGenerator();\r\n  }\r\n\r\n\r\n  // returns if we are using SDF TextEngine or not\r\n  get isSDF() {\r\n    return true;\r\n  }\r\n\r\n  // this is a dummy method to make 'interface' of sdf.js and default.js same\r\n  clear() {\r\n  }\r\n\r\n\r\n  /**\r\n   * style = object: {\r\n   *   pbf: <url to the font file on the server>\r\n   *   type: 'sdf' {Type of the font file & sdf => distance transformed spriteSheet}\r\n   * }\r\n   */\r\n  setFont(style) {\r\n    // curFont => current_font\r\n    // style.pbf examplar value = http://helikarlab.github.io/ccNetViz/fonts/FineHand/0-65535.pbf\r\n    this.curFont = style.pbf;\r\n  }\r\n\r\n  // FontSize is fixed and hardcoded i.e. 24\r\n  get fontSize() {\r\n    return 24;\r\n  }\r\n\r\n  //\r\n  getTexture(style, onLoad) {\r\n    // init with first most-used ASCII chars\r\n    for (let i = 0; i < 128; i++) {\r\n      // Cache the most used characters prior to the knowledge if they would be used in lables or not\r\n      // TODO: Ideally get methods should return something which in-turn should pe passed to other variables\r\n      this._getChar(String.fromCharCode(i));\r\n      \r\n    }\r\n    onLoad && onLoad.apply(this, arguments);\r\n\r\n    // by calling this._getChar, we have updated the texture in this.atlas object\r\n    // following we are returning the updated object\r\n    // TODO: this code is not intuitive, we can write better\r\n    return this.atlas.texture;\r\n  }\r\n\r\n  //utility function to remove break the node labels at whitespaces or \\n character\r\n  trimSpacesAndBreakWidth(text,i) {\r\n    while (text[i] !== '\\n' && text[i] !== ' ') {\r\n      i += 1\r\n    }\r\n    let dx = x <= 0.5 ? 0  : -width ;\r\n    let dy = y-30;\r\n  }\r\n  /**\r\n   * Updates the 'texture' member variable of this.atlas object\r\n   *\r\n   * text = single character which is to be added to the texture of 'this.atlas'\r\n   * markDirty = ??? callback to be called if the size of the texture is resized\r\n   */\r\n  // TODO: parameter name should be changed from 'text' to 'char'\r\n  _getChar(text, markDirty) {\r\n    // curFont is same as style.pbf defined above\r\n    // TODO: We are doing this too many times in this code. Find a better mech.\r\n    const font = this.curFont;\r\n\r\n    // glyphId is the character code of the glyph passed in arguments under the name 'text'\r\n    // charCodeAt returns an integer between 0 and 65535 representing the UTF-16 code unit\r\n    // refer https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\r\n    const glyphID = text.charCodeAt(0);\r\n\r\n    // Padding around the glyph\r\n    const buffer = 0;\r\n\r\n    const cache = (this._cachedGlyphs[font] || (this._cachedGlyphs[font] = {}));\r\n    const glyph = (cache[glyphID] && cache[glyphID].glyph) || this.spriteGenerator.draw(text);\r\n    \r\n    // TODO: Delete following testing code\r\n    if(t) {\r\n      const imgData = this.spriteGenerator._makeRGBAImageData(glyph.bitmap, glyph.width, glyph.height);\r\n      const testCanvas = document.getElementById(\"test-canvas\");\r\n      const ctx = testCanvas.getContext(\"2d\");\r\n      console.log('img data')\r\n      console.log(imgData)\r\n      ctx.putImageData(imgData, 10, 20);\r\n      --t;\r\n    }\r\n      \r\n      if(t) {\r\n        // const testCanvas = document.getElementById(\"test-canvas\");\r\n        // const ctx = testCanvas.getContext(\"2d\");\r\n        testCanvas.width = 0;\r\n        testCanvas.height = 0;\r\n      }\r\n\r\n\r\n    const fontSize = this.spriteGenerator.fontSize;\r\n    \r\n    if (!this._rects[font]) this._rects[font] = {};\r\n    let rect = this._rects[font][text] = this.atlas.addGlyph(\r\n      glyphID, // character id\r\n      this.curFont, // contains url of the font file on server\r\n      glyph, // glyph object\r\n      buffer, // padding\r\n      fontSize, // fontSize\r\n      markDirty, // callback function to be called if texture resizes\r\n    );\r\n    console.log('this_reects')\r\n    console.log(this._rects)\r\n    return (\r\n      cache[glyphID] ||\r\n      (cache[glyphID] = new SimpleGlyph(\r\n        glyph,\r\n        rect,\r\n        buffer)\r\n      )\r\n    );\r\n  }\r\n\r\n  get(text, x, y, markDirty) {\r\n    let width = 0;\r\n    let height = 0;\r\n\r\n    const horiBearingX = 3;\r\n    const horiBearingY = 2;\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n      const char = this._getChar(text[i], markDirty);\r\n      const rect = char.rect || {};\r\n      \r\n      // Initially in the \"get\" function , height is undefined so , height = 0 , now rect.h and char.top\r\n      //decide the height and then max of them is taken each time to have a max height that fits each char\r\n      height = Math.max(height, rect.h - char.top);\r\n      // addiding const horiBearingx and cahr.advance wo get the total width of label\r\n      width += char.advance + horiBearingX;\r\n      console.log('char.advance and horiBearingX')\r\n      console.log(char.advance)\r\n      console.log(horiBearingX)\r\n    }\r\n    // x and y are the clipspace co-ordinates between 0 and 1 \r\n    // dx and dy shifts the position of label w.r.t possibly node \r\n    // (TODO: dx and dy are calculated w.r.t what is not clear , please clear it if you find out)\r\n    let dx = x <= 0.5 ? 0  : -width ;\r\n    let dy = y <= 0.5 ? 0 : -height;\r\n\r\n\r\n\r\n    // \"ret\" must be the return object. \"ret\" is always the return object\r\n    let ret = [];\r\n    let it = 0;\r\n    while (it < text.length) {\r\n      console.log('text n char')\r\n      console.log(text)\r\n      console.log(text[it])\r\n      if (text[it] === '\\n' || text[it] === ' ') {\r\n        \r\n        while (text[it] === '\\n' || text[it] === ' ') {\r\n          it += 1\r\n        }\r\n        dx = x <= 0.5 ? 0  : -width ;\r\n        dy = dy-30;\r\n      }\r\n      else {\r\n        const char = this._getChar(text[it], markDirty);\r\n      console.log(char)\r\n\r\n      const rect = char.rect || {};\r\n\r\n      let horiAdvance;\r\n\r\n      dx += horiBearingX;\r\n      console.log('horiBearing n dx phle')\r\n      console.log(horiBearingX)\r\n      console.log(dx)\r\n      console.log('neeche wala rect, bhut hai yaha')\r\n      console.log(rect)\r\n      // rect.x rect.w rect.h rect.y are all atlas widths heigths x y positions etc \r\n      ret.push({\r\n        width: rect.w,\r\n        height: rect.h,\r\n        left: rect.x / this.atlas.width, //position in atlas\r\n        right: (rect.x + rect.w) / this.atlas.width, //position in atlas\r\n        bottom: (rect.y + rect.h) / this.atlas.height, \r\n        top: rect.y / this.atlas.height,\r\n        dx: dx,\r\n        dy: dy + char.top + (height - rect.h)\r\n      });\r\n\r\n      dx += char.advance;\r\n      it+=1;\r\n      //      dx += rect.w;\r\n      console.log('char advance and dx')\r\n      console.log(dx)\r\n      console.log(char.advance)\r\n    }\r\n      }\r\n      \r\n    return ret;\r\n  }\r\n\r\n  steps(text) {\r\n    return text.length;\r\n  }\r\n\r\n  bind() {\r\n    this.atlas.updateTexture(this._gl);\r\n  }\r\n};\r\n","'use strict';\r\n\r\nimport ShelfPack from 'shelf-pack';\r\n\r\n// size of the spritesheet generated in pixels\r\nconst DEFAULT_SIZE = 1024;\r\n\r\n// multiplication factor by which spritesheet can grow, if shelfpack is full\r\nconst SIZE_GROWTH_RATE = 4;\r\n\r\n// max size to contain all the characters in the spritesheet\r\n// must be \"DEFAULT_SIZE * SIZE_GROWTH_RATE ^ n\" for some integer n\r\nconst MAX_SIZE = 2048;\r\n\r\nexport default class GlyphAtlas {\r\n    constructor(gl, resetCache) {\r\n\r\n        // setting width to default\r\n        this.width = DEFAULT_SIZE;\r\n\r\n        // setting height to default\r\n        this.height = DEFAULT_SIZE;\r\n\r\n        // resets cached glyphs in sdf.js before making resize() call\r\n        this._resetCache = resetCache;\r\n\r\n        // creating an empty spritesheet to pack glyphs\r\n        this.bin = new ShelfPack(this.width, this.height);\r\n\r\n        /**\r\n         * stores information coordinate about character\r\n         *\r\n         * (Object):\r\n         *  \"fontstring#charid\": {\r\n         *      id, x, y, h, w, maxh, maxw, ref_count\r\n         *  }\r\n         */\r\n        this.index = {};\r\n\r\n        /**\r\n         * stores list of character ids available in atlas.js\r\n         *\r\n         * (Object):\r\n         *  \"fontstring#charid\": [\"charid\"]\r\n         */\r\n        this.ids = {};\r\n\r\n        // webgl rendering context\r\n        this.gl = gl;\r\n\r\n        // initialized to empty Uint8Array buffer to store texture data\r\n        this.data = new Uint8Array(this.width * this.height);\r\n    }\r\n\r\n\r\n    // refreshes texture of characters when updateTexture() is called\r\n    _createTexture() {\r\n        //\r\n        this.dirty = false;\r\n\r\n        // standard creation of webgl texture\r\n        let gl = this.gl;\r\n        let texture = gl.createTexture();\r\n        // binds texture buffer to the target (gl.TEXTURE_2D = a 2 dimensional texture)\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n        /**\r\n         * pixelStorei() (Func): specifies the pixel storage modes\r\n         * UNPACK_FLIP_Y_WEBGL (Parameter): Flips the source data along its vertical axis if true.\r\n         */\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n        // standard interpolation Filters\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        // specifies a two-dimensional image for texture buffer stored in variable named \"texture\"\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D, // target: A two-dimensional texture\r\n            0, // level of detail: 0 = base image level; n = nth mipmap reduction level\r\n            gl.ALPHA, // internalFormat: only reads the alpha component\r\n            this.width, // width\r\n            this.height, // height\r\n            0, // border\r\n            gl.ALPHA, // format\r\n            gl.UNSIGNED_BYTE, // type\r\n            this.data // ImageData object\r\n        );\r\n\r\n\r\n        // Unbinding the buffer channel\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        // returning so formed texture\r\n        return texture;\r\n    }\r\n\r\n    // utility function that returns list of glyphs added\r\n    getGlyphs() {\r\n        const glyphs = {};\r\n        let split,\r\n            name,\r\n            id;\r\n        console.log('tis.ids')\r\n        console.log(this.ids)\r\n        for (const key in this.ids) {\r\n            console.log('key')\r\n            console.log(key)\r\n\r\n            split = key.split('#');\r\n            name = split[0];\r\n            id = split[1];\r\n\r\n            if (!glyphs[name]) glyphs[name] = [];\r\n            glyphs[name].push(id);\r\n        }\r\n        return glyphs;\r\n    }\r\n\r\n    // utility function that returns list of rects added\r\n    getRects() {\r\n        const rects = {};\r\n        let split,\r\n            name,\r\n            id;\r\n\r\n        for (const key in this.ids) {\r\n            split = key.split('#');\r\n            name = split[0];\r\n            id = split[1];\r\n\r\n            if (!rects[name]) rects[name] = {};\r\n            rects[name][id] = this.index[key];\r\n        }\r\n        return rects;\r\n    }\r\n\r\n    // main function of the module called from sdf.js\r\n    addGlyph(\r\n        id, // character id\r\n        name, // name of the font - \"fontstrong#range.pbf\"\r\n        glyph, // glyph object from sdf.js\r\n        buffer, // padding around glyph\r\n        fontSize,\r\n        markDirty //\r\n    ) {\r\n        if (!glyph) return null;\r\n\r\n        // compiles 'name' and glyph.id into a single string with a seperator '#'\r\n        const key = `${name}#${glyph.id}`;\r\n        console.log('addgglyh wala key')\r\n\r\n        console.log(key)\r\n        // if key is present in index and not present in ids then add it in ids\r\n        if (this.index[key]) {\r\n            if (this.ids[key].indexOf(id) < 0) {\r\n                this.ids[key].push(id);\r\n            }\r\n            return this.index[key];\r\n        }\r\n\r\n        const bufferedWidth = glyph.width + buffer * 2;\r\n        const bufferedHeight = glyph.height + buffer * 2;\r\n\r\n        // Add a 1px border around every image.\r\n        // 'padding' variable is basically border\r\n        // buffer variable is basically padding\r\n        const padding = Math.floor( Math.pow( Math.ceil(fontSize/7), 2));\r\n        // const padding = 12;\r\n        let packWidth = bufferedWidth + 2 * padding;\r\n        let packHeight = bufferedHeight + 2 * padding;\r\n\r\n        // Increase to next number divisible by 4, but at least 1.\r\n        // This is so we can scale down the texture coordinates and pack them into fewer bytes\r\n        packWidth += (4 - packWidth % 4);\r\n        packHeight += (4 - packHeight % 4);\r\n\r\n        let rect = this.bin.packOne(packWidth, packHeight);\r\n\r\n        // if the current size is not sufficient to contain all the characters in the texture\r\n        // then, expand (resize) it\r\n        if (!rect) {\r\n            this.resize();\r\n            rect = this.bin.packOne(packWidth, packHeight);\r\n            // if markDirty callback was passed then execute it\r\n            markDirty && markDirty();\r\n        }\r\n\r\n        // if still not found then there is some problem, simply return null to indicate problem\r\n        if (!rect) {\r\n            return null;\r\n        }\r\n\r\n\r\n        this.index[key] = rect;\r\n        this.ids[key] = [id];\r\n\r\n        // if bitmap corresponding to the glyph object exists then, add the glyph\r\n        if (glyph.bitmap) {\r\n            const target = this.data;\r\n            const source = glyph.bitmap;\r\n            for (let y = 0; y < bufferedHeight; y++) {\r\n                const y1 = this.width * (rect.y + y + padding) + rect.x + padding;\r\n                const y2 = bufferedWidth * y;\r\n                for (let x = 0; x < bufferedWidth; x++) {\r\n                    target[y1 + x] = source[y2 + x];\r\n                }\r\n            }\r\n        }\r\n        this.dirty = true;\r\n        return rect;\r\n    }\r\n\r\n    // expands the size of the texture if all the characters were not contained in default size\r\n    resize() {\r\n        const prevWidth = this.width;\r\n        const prevHeight = this.height;\r\n\r\n        if (prevWidth >= MAX_SIZE || prevHeight >= MAX_SIZE) return;\r\n\r\n        if (this._texture) {\r\n            if (this.gl) {\r\n                this.gl.deleteTexture(this._texture);\r\n            }\r\n            this._texture = null;\r\n        }\r\n\r\n        this.width *= SIZE_GROWTH_RATE;\r\n        this.height *= SIZE_GROWTH_RATE;\r\n        this.bin.resize(this.width, this.height);\r\n\r\n        const buf = new ArrayBuffer(this.width * this.height);\r\n        for (let i = 0; i < prevHeight; i++) {\r\n            const src = new Uint8Array(this.data.buffer, prevHeight * i, prevWidth);\r\n            const dst = new Uint8Array(buf, prevHeight * i * SIZE_GROWTH_RATE, prevWidth);\r\n            dst.set(src);\r\n        }\r\n        this.data = new Uint8Array(buf);\r\n        this._resetCache();\r\n    }\r\n\r\n    bind(gl) {\r\n    }\r\n\r\n    // getter of texture from GlyphAtlas object\r\n    get texture() {\r\n        return this._texture;\r\n    }\r\n\r\n    updateTexture() {\r\n        let gl = this.gl;\r\n        if (!this._texture) {\r\n            this._texture = this._createTexture();\r\n        }\r\n\r\n        // if dirty functionality is true then:\r\n        if (this.dirty) {\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n            // specifies a sub - rectangle of the current texture\r\n            gl.texSubImage2D(\r\n                gl.TEXTURE_2D,\r\n                0,\r\n                0,\r\n                0,\r\n                this.width,\r\n                this.height,\r\n                gl.ALPHA,\r\n                gl.UNSIGNED_BYTE,\r\n                this.data\r\n            );\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            this.dirty = false;\r\n        }\r\n        return this._texture;\r\n    }\r\n};\r\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ShelfPack = factory());\n}(this, function () {\n\n/**\n * Create a new ShelfPack bin allocator.\n *\n * Uses the Shelf Best Height Fit algorithm from\n * http://clb.demon.fi/files/RectangleBinPack.pdf\n *\n * @class  ShelfPack\n * @param  {number}  [w=64]  Initial width of the sprite\n * @param  {number}  [h=64]  Initial width of the sprite\n * @param  {Object}  [options]\n * @param  {boolean} [options.autoResize=false]  If `true`, the sprite will automatically grow\n * @example\n * var sprite = new ShelfPack(64, 64, { autoResize: false });\n */\nfunction ShelfPack(w, h, options) {\n    options = options || {};\n    this.w = w || 64;\n    this.h = h || 64;\n    this.autoResize = !!options.autoResize;\n    this.shelves = [];\n    this.freebins = [];\n    this.stats = {};\n    this.bins = {};\n    this.maxId = 0;\n}\n\n\n/**\n * Batch pack multiple bins into the sprite.\n *\n * @param   {Object[]} bins       Array of requested bins - each object should have `width`, `height` (or `w`, `h`) properties\n * @param   {number}   bins[].w   Requested bin width\n * @param   {number}   bins[].h   Requested bin height\n * @param   {Object}   [options]\n * @param   {boolean}  [options.inPlace=false] If `true`, the supplied bin objects will be updated inplace with `x` and `y` properties\n * @returns {Bin[]}    Array of allocated Bins - each Bin is an object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var bins = [\n *     { id: 1, w: 12, h: 12 },\n *     { id: 2, w: 12, h: 16 },\n *     { id: 3, w: 12, h: 24 }\n * ];\n * var results = sprite.pack(bins, { inPlace: false });\n */\nShelfPack.prototype.pack = function(bins, options) {\n    bins = [].concat(bins);\n    options = options || {};\n\n    var results = [],\n        w, h, id, allocation;\n\n    for (var i = 0; i < bins.length; i++) {\n        w  = bins[i].w || bins[i].width;\n        h  = bins[i].h || bins[i].height;\n        id = bins[i].id;\n\n        if (w && h) {\n            allocation = this.packOne(w, h, id);\n            if (!allocation) {\n                continue;\n            }\n            if (options.inPlace) {\n                bins[i].x  = allocation.x;\n                bins[i].y  = allocation.y;\n                bins[i].id = allocation.id;\n            }\n            results.push(allocation);\n        }\n    }\n\n    // Shrink the width/height of the sprite to the bare minimum.\n    // Since shelf-pack doubles first width, then height when running out of shelf space\n    // this can result in fairly large unused space both in width and height if that happens\n    // towards the end of bin packing.\n    if (this.shelves.length > 0) {\n        var w2 = 0;\n        var h2 = 0;\n\n        for (var j = 0; j < this.shelves.length; j++) {\n            var shelf = this.shelves[j];\n            h2 += shelf.h;\n            w2 = Math.max(shelf.w - shelf.free, w2);\n        }\n\n        this.resize(w2, h2);\n    }\n\n    return results;\n};\n\n\n/**\n * Pack a single bin into the sprite.\n *\n * Each bin will have a unique identitifer.\n * If no identifier is supplied in the `id` parameter, one will be created.\n * Note: The supplied `id` is used as an object index, so numeric values are fastest!\n *\n * Bins are automatically refcounted (i.e. a newly packed Bin will have a refcount of 1).\n * When a bin is no longer needed, use the `ShelfPack.unref` function to mark it\n *   as unused.  When a Bin's refcount decrements to 0, the Bin will be marked\n *   as free and its space may be reused by the packing code.\n *\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  [id]   Unique identifier for this bin, (if unsupplied, assume it's a new bin and create an id)\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties, or `null` if allocation failed\n * @example\n * var results = sprite.packOne(12, 16, 'a');\n */\nShelfPack.prototype.packOne = function(w, h, id) {\n    var best = { freebin: -1, shelf: -1, waste: Infinity },\n        y = 0,\n        bin, shelf, waste, i;\n\n    // if id was supplied, attempt a lookup..\n    if (typeof id === 'string' || typeof id === 'number') {\n        bin = this.getBin(id);\n        if (bin) {              // we packed this bin already\n            this.ref(bin);\n            return bin;\n        }\n        if (typeof id === 'number') {\n            this.maxId = Math.max(id, this.maxId);\n        }\n    } else {\n        id = ++this.maxId;\n    }\n\n    // First try to reuse a free bin..\n    for (i = 0; i < this.freebins.length; i++) {\n        bin = this.freebins[i];\n\n        // exactly the right height and width, use it..\n        if (h === bin.maxh && w === bin.maxw) {\n            return this.allocFreebin(i, w, h, id);\n        }\n        // not enough height or width, skip it..\n        if (h > bin.maxh || w > bin.maxw) {\n            continue;\n        }\n        // extra height or width, minimize wasted area..\n        if (h <= bin.maxh && w <= bin.maxw) {\n            waste = (bin.maxw * bin.maxh) - (w * h);\n            if (waste < best.waste) {\n                best.waste = waste;\n                best.freebin = i;\n            }\n        }\n    }\n\n    // Next find the best shelf..\n    for (i = 0; i < this.shelves.length; i++) {\n        shelf = this.shelves[i];\n        y += shelf.h;\n\n        // not enough width on this shelf, skip it..\n        if (w > shelf.free) {\n            continue;\n        }\n        // exactly the right height, pack it..\n        if (h === shelf.h) {\n            return this.allocShelf(i, w, h, id);\n        }\n        // not enough height, skip it..\n        if (h > shelf.h) {\n            continue;\n        }\n        // extra height, minimize wasted area..\n        if (h < shelf.h) {\n            waste = (shelf.h - h) * w;\n            if (waste < best.waste) {\n                best.freebin = -1;\n                best.waste = waste;\n                best.shelf = i;\n            }\n        }\n    }\n\n    if (best.freebin !== -1) {\n        return this.allocFreebin(best.freebin, w, h, id);\n    }\n\n    if (best.shelf !== -1) {\n        return this.allocShelf(best.shelf, w, h, id);\n    }\n\n    // No free bins or shelves.. add shelf..\n    if (h <= (this.h - y) && w <= this.w) {\n        shelf = new Shelf(y, this.w, h);\n        return this.allocShelf(this.shelves.push(shelf) - 1, w, h, id);\n    }\n\n    // No room for more shelves..\n    // If `autoResize` option is set, grow the sprite as follows:\n    //  * double whichever sprite dimension is smaller (`w1` or `h1`)\n    //  * if sprite dimensions are equal, grow width before height\n    //  * accomodate very large bin requests (big `w` or `h`)\n    if (this.autoResize) {\n        var h1, h2, w1, w2;\n\n        h1 = h2 = this.h;\n        w1 = w2 = this.w;\n\n        if (w1 <= h1 || w > w1) {   // grow width..\n            w2 = Math.max(w, w1) * 2;\n        }\n        if (h1 < w1 || h > h1) {    // grow height..\n            h2 = Math.max(h, h1) * 2;\n        }\n\n        this.resize(w2, h2);\n        return this.packOne(w, h, id);  // retry\n    }\n\n    return null;\n};\n\n\n/**\n * Called by packOne() to allocate a bin by reusing an existing freebin\n *\n * @private\n * @param    {number}         index  Index into the `this.freebins` array\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  id     Unique identifier for this bin\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var bin = sprite.allocFreebin(0, 12, 16, 'a');\n */\nShelfPack.prototype.allocFreebin = function (index, w, h, id) {\n    var bin = this.freebins.splice(index, 1)[0];\n    bin.id = id;\n    bin.w = w;\n    bin.h = h;\n    bin.refcount = 0;\n    this.bins[id] = bin;\n    this.ref(bin);\n    return bin;\n};\n\n\n/**\n * Called by `packOne() to allocate bin on an existing shelf\n *\n * @private\n * @param    {number}         index  Index into the `this.shelves` array\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  id     Unique identifier for this bin\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var results = sprite.allocShelf(0, 12, 16, 'a');\n */\nShelfPack.prototype.allocShelf = function(index, w, h, id) {\n    var shelf = this.shelves[index];\n    var bin = shelf.alloc(w, h, id);\n    this.bins[id] = bin;\n    this.ref(bin);\n    return bin;\n};\n\n\n/**\n * Return a packed bin given its id, or undefined if the id is not found\n *\n * @param    {number|string}  id  Unique identifier for this bin,\n * @returns  {Bin}            The requested bin, or undefined if not yet packed\n * @example\n * var b = sprite.getBin('a');\n */\nShelfPack.prototype.getBin = function(id) {\n    return this.bins[id];\n};\n\n\n/**\n * Increment the ref count of a bin and update statistics.\n *\n * @param    {Bin}     bin  Bin instance\n * @returns  {number}  New refcount of the bin\n * @example\n * var bin = sprite.getBin('a');\n * sprite.ref(bin);\n */\nShelfPack.prototype.ref = function(bin) {\n    if (++bin.refcount === 1) {   // a new Bin.. record height in stats historgram..\n        var h = bin.h;\n        this.stats[h] = (this.stats[h] | 0) + 1;\n    }\n\n    return bin.refcount;\n};\n\n\n/**\n * Decrement the ref count of a bin and update statistics.\n * The bin will be automatically marked as free space once the refcount reaches 0.\n *\n * @param    {Bin}     bin  Bin instance\n * @returns  {number}  New refcount of the bin\n * @example\n * var bin = sprite.getBin('a');\n * sprite.unref(bin);\n */\nShelfPack.prototype.unref = function(bin) {\n    if (bin.refcount === 0) {\n        return 0;\n    }\n\n    if (--bin.refcount === 0) {\n        this.stats[bin.h]--;\n        delete this.bins[bin.id];\n        this.freebins.push(bin);\n    }\n\n    return bin.refcount;\n};\n\n\n/**\n * Clear the sprite.  Resets everything and resets statistics.\n *\n * @example\n * sprite.clear();\n */\nShelfPack.prototype.clear = function() {\n    this.shelves = [];\n    this.freebins = [];\n    this.stats = {};\n    this.bins = {};\n    this.maxId = 0;\n};\n\n\n/**\n * Resize the sprite.\n *\n * @param   {number}  w  Requested new sprite width\n * @param   {number}  h  Requested new sprite height\n * @returns {boolean} `true` if resize succeeded, `false` if failed\n * @example\n * sprite.resize(256, 256);\n */\nShelfPack.prototype.resize = function(w, h) {\n    this.w = w;\n    this.h = h;\n    for (var i = 0; i < this.shelves.length; i++) {\n        this.shelves[i].resize(w);\n    }\n    return true;\n};\n\n\n/**\n * Create a new Shelf.\n *\n * @private\n * @class  Shelf\n * @param  {number}  y   Top coordinate of the new shelf\n * @param  {number}  w   Width of the new shelf\n * @param  {number}  h   Height of the new shelf\n * @example\n * var shelf = new Shelf(64, 512, 24);\n */\nfunction Shelf(y, w, h) {\n    this.x = 0;\n    this.y = y;\n    this.w = this.free = w;\n    this.h = h;\n}\n\n\n/**\n * Allocate a single bin into the shelf.\n *\n * @private\n * @param   {number}         w   Width of the bin to allocate\n * @param   {number}         h   Height of the bin to allocate\n * @param   {number|string}  id  Unique id of the bin to allocate\n * @returns {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties, or `null` if allocation failed\n * @example\n * shelf.alloc(12, 16, 'a');\n */\nShelf.prototype.alloc = function(w, h, id) {\n    if (w > this.free || h > this.h) {\n        return null;\n    }\n    var x = this.x;\n    this.x += w;\n    this.free -= w;\n    return new Bin(id, x, this.y, w, h);\n};\n\n\n/**\n * Resize the shelf.\n *\n * @private\n * @param   {number}  w  Requested new width of the shelf\n * @returns {boolean}    true\n * @example\n * shelf.resize(512);\n */\nShelf.prototype.resize = function(w) {\n    this.free += (w - this.w);\n    this.w = w;\n    return true;\n};\n\n\n/**\n * Create a new Bin object.\n *\n * @class  Bin\n * @param  {number|string}  id  Unique id of the bin\n * @param  {number}         x   Left coordinate of the bin\n * @param  {number}         y   Top coordinate of the bin\n * @param  {number}         w   Width of the bin\n * @param  {number}         h   Height of the bin\n * @example\n * var bin = new Bin('a', 0, 0, 12, 16);\n */\nfunction Bin(id, x, y, w, h) {\n    this.id = id;\n    this.x  = x;\n    this.y  = y;\n    this.w  = w;\n    this.h  = h;\n    this.maxw = w;\n    this.maxh = h;\n    this.refcount = 0;\n}\n\nreturn ShelfPack;\n\n}));","import Trimmer from './glyphTrimmer';\r\n\r\nvar INF = 1e20;\r\n\r\nexport default class SpriteGenerator {\r\n\r\n    constructor() {\r\n        // Member variables for configurations for font-style and box of the font\r\n        const textSize = 23;\r\n        this.fontSize = Math.round(textSize / 4) * 4;\r\n        this.buffer = this.fontSize / 8;\r\n        this.radius = this.fontSize / 3;\r\n        this.cutoff = 0.25;\r\n        // this.fontFamily = 'sans-serif';\r\n        this.fontFamily = 'vedana';\r\n        // this.fontFamily = 'arial';\r\n        this.fontWeight = 'normal';\r\n        // this.fontWeight = 'bold';\r\n        // Size of one box of character\r\n        let size = this.size = this.fontSize + this.buffer * 2;\r\n\r\n        // Member varaibles for single canvas element on which single character is to be drawn\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = this.canvas.height = size;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.ctx.font = this.fontWeight + ' ' + this.fontSize + 'px ' + this.fontFamily;\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillStyle = 'black';\r\n\r\n        // Work-around: https://bugzilla.mozilla.org/show_bug.cgi?id=737852\r\n        this.middle = Math.round((size / 2) * (navigator.userAgent.indexOf('Gecko/') >= 0 ? 1.2 : 1));\r\n\r\n\r\n        // Member variables for temp arrays required for the distance transform\r\n        this.gridOuter = new Float64Array(size * size);\r\n        this.gridInner = new Float64Array(size * size);\r\n        this.f = new Float64Array(size);\r\n        this.d = new Float64Array(size);\r\n        this.z = new Float64Array(size + 1);\r\n        this.v = new Int16Array(size);\r\n\r\n        // Glyph Trimmer\r\n        this.trimmer = new Trimmer(0);\r\n        this.count = 1;\r\n    }\r\n\r\n    _makeRGBAImageData(alphaChannel, width, height) {\r\n        let imageData = this.ctx.createImageData(width, height);\r\n        let data = imageData.data;\r\n        for (let i = 0; i < alphaChannel.length; i++) {\r\n            data[4 * i + 0] = alphaChannel[i];\r\n            data[4 * i + 1] = alphaChannel[i];\r\n            data[4 * i + 2] = alphaChannel[i];\r\n            data[4 * i + 3] = 255;\r\n        }\r\n        return imageData;\r\n    }\r\n\r\n    // Returns the alpha channel for a single character\r\n    draw(char) {\r\n        // Clear the area and draw the glyph\r\n        this.ctx.clearRect(0, 0, this.size, this.size);\r\n        this.ctx.fillText(char, this.buffer, this.middle);\r\n        let imgData = this.ctx.getImageData(0, 0, this.size, this.size);\r\n        let alphaChannel = new Uint8ClampedArray(this.size * this.size);\r\n\r\n        for (let i = 0; i < this.size * this.size; i++) {\r\n            let a = imgData.data[i * 4 + 3] / 255; // alpha value\r\n            this.gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2);\r\n            this.gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);\r\n        }\r\n\r\n        this._edt(this.gridOuter, this.size, this.size, this.f, this.d, this.v, this.z);\r\n        this._edt(this.gridInner, this.size, this.size, this.f, this.d, this.v, this.z);\r\n\r\n        for (let i = 0; i < this.size * this.size; i++) {\r\n            let d = this.gridOuter[i] - this.gridInner[i];\r\n            alphaChannel[i] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));\r\n        }\r\n\r\n        const glyph = {\r\n            id: char.charCodeAt(0),\r\n            bitmap: alphaChannel,\r\n            left: 0,\r\n            top: 0,\r\n            width: this.size,\r\n            height: this.size,\r\n            advance: 4, // width\r\n        };\r\n        \r\n        if(glyph.id !== 32) {\r\n            this.trimmer.process(glyph);\r\n        }\r\n\r\n        // TODO: Delete this debugging code\r\n        if (glyph.id == 65 && this.count) {\r\n            const glyphData = glyph.bitmap;\r\n            const numCols = glyph.width;\r\n            let t = [];\r\n            // iterate through every row\r\n            for (let i = 0; i < glyphData.length; i += numCols) {\r\n                // slice out the array\r\n                t.push(Array.from(glyphData.slice(i, i + numCols)));\r\n            }\r\n            this.count--;\r\n        }\r\n        return glyph;\r\n    }\r\n\r\n    // 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\r\n    _edt(data, width, height, f, d, v, z) {\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = 0; y < height; y++) {\r\n                f[y] = data[y * width + x];\r\n            }\r\n            this._edt1d(f, d, v, z, height);\r\n            for (let y = 0; y < height; y++) {\r\n                data[y * width + x] = d[y];\r\n            }\r\n        }\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                f[x] = data[y * width + x];\r\n            }\r\n            this._edt1d(f, d, v, z, width);\r\n            for (let x = 0; x < width; x++) {\r\n                data[y * width + x] = Math.sqrt(d[x]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 1D squared distance transform\r\n    _edt1d(f, d, v, z, n) {\r\n        v[0] = 0;\r\n        z[0] = -INF;\r\n        z[1] = +INF;\r\n\r\n        for (let q = 1, k = 0; q < n; q++) {\r\n            var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\r\n            while (s <= z[k]) {\r\n                k--;\r\n                s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\r\n            }\r\n            k++;\r\n            v[k] = q;\r\n            z[k] = s;\r\n            z[k + 1] = +INF;\r\n        }\r\n\r\n        for (let q = 0, k = 0; q < n; q++) {\r\n            while (z[k + 1] < q) k++;\r\n            d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];\r\n        }\r\n    }\r\n}\r\n","/* Algorithm to trim the glyph and add padding to it */\r\n// Finding absolute left bound (lb) and right bound (rb) of the glyph\r\n// Slicing the extra columns\r\n// Adding buffer space on the sides\r\n\r\nexport default class {\r\n    constructor(buffer) {\r\n        if (buffer == undefined) this.buffer = 0;\r\n        else this.buffer = buffer;\r\n    }\r\n    \r\n    // find lb and rb of single row\r\n    _findRowBounds(a) { // a == array\r\n        let lb = 0, // left bound of individual row\r\n            rb = 0; // right bound of individual row\r\n        \r\n        const threshold = 170;\r\n            \r\n        for (let i = 0; i < a.length; i++) {\r\n            if (a[i] > threshold) {\r\n                lb = i;\r\n                break;\r\n            }\r\n        }\r\n        if (!lb) lb = a.length;\r\n\r\n        for (let i = a.length; i > -1; i--) {\r\n            if (a[i] > threshold) {\r\n                rb = i;\r\n                break;\r\n            }\r\n        }\r\n        if (!rb) rb = -1;\r\n\r\n        return [lb, rb];\r\n    }\r\n\r\n    _findGlyphBounds(glyph) {\r\n        const glyphData = glyph.bitmap;\r\n        const numCols = glyph.width;\r\n        let currentRow = [];\r\n\r\n        let lbs = [], // row left bounds\r\n            rbs = []; // row right bounds    \r\n        let lb = -1,\r\n            rb = glyphData.length;\r\n        \r\n        // iterate through every row\r\n        for (let i = 0; i < glyphData.length; i += numCols) {\r\n            // slice out the array\r\n            currentRow = glyphData.slice(i, i + numCols)\r\n            var res = this._findRowBounds(currentRow);\r\n            lbs.push(res[0]);\r\n            rbs.push(res[1]);\r\n        }\r\n\r\n        // choose the min(lbs) and max(rbs) as absolute lb and rb\r\n        lb = Math.min(...lbs);\r\n        rb = Math.max(...rbs);\r\n        // if (lb >= numCols || rb < 0) throw \"Glyph is empty\";\r\n        return [lb, rb];\r\n    }\r\n\r\n    process(glyph) {\r\n        const glyphData = glyph.bitmap;\r\n        const numCols = glyph.width;\r\n\r\n        const bounds = this._findGlyphBounds(glyph);\r\n        const lb = bounds[0];\r\n        const rb = bounds[1];\r\n\r\n        const buffer = this.buffer;\r\n        // const buffer = 20;\r\n        // const buffer = 1;\r\n        // const buffer = 0;\r\n\r\n        var newData = [];\r\n        // var newWidth = (rb - lb + 1) + buffer * 2 + 2;\r\n        var newWidth = (rb - lb + 1) + buffer * 2;\r\n        // var newWidth = (rb - lb + 1);\r\n\r\n        // iterate through every row\r\n        let currentRow = [];\r\n        for (let i = 0; i < glyphData.length; i += numCols) {\r\n            currentRow = glyphData.slice(i, i + numCols)\r\n            const bufferCol = Array.apply(null, Array(buffer)).map(Number.prototype.valueOf, 0);\r\n            newData.push(\r\n                // 255,\r\n                ...bufferCol, //returns array of zeros\r\n                ...currentRow.slice(lb, rb + 1),\r\n                ...bufferCol, //returns array of zeros\r\n                // 255,\r\n            );\r\n        }\r\n\r\n        // JS passes objects by reference. Therefore,\r\n        glyph.bitmap = new Uint8ClampedArray(newData);\r\n        glyph.width = newWidth;\r\n        glyph.advance = newWidth;\r\n    }    \r\n    \r\n} // ends class","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(){\r\n    this._enable = true;\r\n  }\r\n\r\n  debounce(func, wait, immediate) {\r\n      let timeout, args, context, timestamp, result;\r\n\r\n      let later = () => {\r\n          let last = Date.now - timestamp;\r\n\r\n          if (last < wait && last > 0) {\r\n              timeout = setTimeout(later, wait - last);\r\n          } else {\r\n              timeout = null;\r\n              if (!immediate) {\r\n                  if(this._enable){\r\n                    result = func.apply(context, args);\r\n                  }\r\n                  if (!timeout) context = args = null;\r\n              }\r\n          }\r\n      };\r\n\r\n      return () => {\r\n          context = this;\r\n          args = arguments;\r\n          timestamp = Date.now;\r\n          let callNow = immediate && !timeout;\r\n          if (!timeout) timeout = setTimeout(later, wait);\r\n          if (callNow) {\r\n              if(this._enable){\r\n                result = func.apply(context, args);\r\n              }\r\n              context = args = null;\r\n          }\r\n\r\n          return result;\r\n      };\r\n  }\r\n  \r\n  disable(){\r\n    this._enable = false;\r\n  }\r\n};","import geomutils from './geomutils';\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska\r\n */\r\n\r\n\r\nfunction pushUnique(arr, e){\r\n  if(arr.indexOf(e) >= 0)\r\n    return;\r\n  arr.push(e);\r\n}\r\n\r\nexport default class {\r\n  constructor(layers, insertTempLayer, draw, nodes, edges, checkUniqId){\r\n    this._layers = layers;\r\n    this._insertTempLayer = insertTempLayer;\r\n\r\n    this._draw = draw;\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._checkUniqId = checkUniqId;\r\n    \r\n    this._toAddEdges = [];\r\n    this._toAddNodes = [];\r\n    this._toRemoveEdges = [];\r\n    this._toRemoveNodes = [];\r\n\r\n    //create support structures\r\n    this._nPos = {};\r\n    this._ePos = {};\r\n    this._eDirs = {};\r\n\r\n    nodes.forEach((n, i) => {\r\n      this._nPos[n.uniqid] = i;\r\n      this._eDirs[n.uniqid] = {};\r\n    });\r\n    \r\n    edges.forEach((e, i) => {\r\n      let s = geomutils.edgeSource(e);\r\n      let t = geomutils.edgeTarget(e);\r\n\r\n      let si = s.uniqid || s.__uniqid;\r\n      let ti = t.uniqid || t.__uniqid;\r\n      (this._eDirs[si] || (this._eDirs[si] = {}))[ti] = e;\r\n      this._ePos[e.uniqid] = i;\r\n    });\r\n    \r\n    this._actualTempNodes = [];\r\n    this._actualTempEdges = [];\r\n  }\r\n  _doRemoveNodes(nodes){\r\n    nodes.forEach((n) => {\r\n      if(n.uniqid === undefined)\r\n        return;\r\n      \r\n      if(this._nPos[n.uniqid] !== undefined){\r\n        //in the normal graph\r\n        let pos = this._nPos[n.uniqid];\r\n        this._layers.main.removeNodeAtPos(pos);\r\n        delete this._nPos[n.uniqid];\r\n      }else{\r\n        //try to remove from temp graph\r\n        \r\n        for(let i = 0; i < this._actualTempNodes.length; i++){\r\n          if(this._actualTempNodes[i] === n){\r\n            this._actualTempNodes.splice(i,1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      n.__uniqid = n.uniqid;\r\n      delete n.uniqid;\r\n    });\r\n  }\r\n  _doRemoveEdges(edges){\r\n    edges.forEach((e) => {\r\n      if(e.uniqid === undefined)\r\n        return;\r\n      \r\n      let s = geomutils.edgeSource(e);\r\n      let t = geomutils.edgeTarget(e);\r\n\r\n      delete (this._eDirs[s.uniqid || s.__uniqid] || {})[t.uniqid || t.__uniqid];\r\n      \r\n      if(this._ePos[e.uniqid] !== undefined){\r\n        //in the normal graph\r\n        let pos = this._ePos[e.uniqid];\r\n        this._layers.main.removeEdgeAtPos(pos);\r\n        delete this._ePos[e.uniqid];\r\n      }else{\r\n        //try to remove from temp graph\r\n        \r\n        for(let i = 0; i < this._actualTempEdges.length; i++){\r\n          if(this._actualTempEdges[i] === e){\r\n            this._actualTempEdges.splice(i,1);\r\n            break;\r\n          }\r\n        }\r\n\r\n      }\r\n      \r\n      e.__uniqid = e.uniqid;\r\n      delete e.uniqid;\r\n    });\r\n  }\r\n  _doAddEdges(){\r\n    this._toAddEdges.forEach((e) => {\r\n      //already added in main graph\r\n      if(\r\n        this._ePos[e.uniqid] !== undefined\r\n      ){\r\n        this._doRemoveEdges([e]);\r\n      }\r\n      \r\n      if(e.uniqid !== undefined){\r\n        console.error(e);\r\n        console.error(\"This edge has been already added, if you want to add same edge twice, create new object with same properties\");\r\n        return;\r\n      }\r\n      this._checkUniqId(e);\r\n      \r\n      //add this node into temporary chart\r\n      \r\n      //TODO: Not so efficient >> causes quadratic complexity of adding edges into temporary graph\r\n      pushUnique(this._actualTempEdges, e);\r\n    });\r\n  }\r\n  _doAddNodes(nodes){\r\n    this._toAddNodes.forEach((n) => {\r\n      if(this._nPos[n.uniqid] !== undefined){\r\n        this._doRemoveNodes([n]);\r\n      }\r\n      \r\n      //already added\r\n      if(n.uniqid !== undefined){\r\n        console.error(n);\r\n        console.error(\"This node has been already added, if you want to add same node twice, create new object with same properties\");\r\n        return;\r\n      }\r\n      this._checkUniqId(n);\r\n      \r\n      this._eDirs[n.uniqid] = {};\r\n\r\n      //TODO: Not so efficient >> causes quadratic complexity of adding nodes into temporary graph\r\n      pushUnique(this._actualTempNodes, n);\r\n    });\r\n  }\r\n  addEdge(e){\r\n    let s = geomutils.edgeSource(e);\r\n    let t = geomutils.edgeTarget(e);\r\n    \r\n    let tid = t.uniqid || t.__uniqid;\r\n    let sid = s.uniqid || s.__uniqid;\r\n    \r\n    if((this._eDirs[sid] || {})[tid]){\r\n      //this edge was already added >> remove it\r\n      this._doRemoveEdges([e]);\r\n    }\r\n    \r\n    if((this._eDirs[tid] || {})[sid]){\r\n      //must remove line and add two curves\r\n      \r\n      this._toAddEdges.push(this._eDirs[tid][sid]);\r\n      this._doRemoveEdges([this._eDirs[tid][sid]]);\r\n\r\n      this._toAddEdges.push(this._eDirs[sid][tid] = e);\r\n      \r\n      return this;\r\n    }\r\n\r\n    this._toAddEdges.push(e);\r\n    return this;\r\n  }\r\n  addNode(n){\r\n    this._toAddNodes.push(n);    \r\n    return this;\r\n  }\r\n  removeNode(n){\r\n    this._toRemoveNodes.push(n);    \r\n    return this;\r\n  }\r\n  removeEdge(e){\r\n    this._toRemoveEdges.push(e);\r\n    return this;\r\n  }\r\n  applyChanges(){\r\n    \r\n    //nothing to do\r\n    if(this._toRemoveEdges.length === 0 && this._toRemoveNodes.length === 0 && this._toAddEdges.length === 0 && this._toAddNodes.length === 0)\r\n      return this;\r\n    \r\n    this._actualTempNodes = this._layers.temp ? this._layers.temp.nodes : [];\r\n    this._actualTempEdges = this._layers.temp ? this._layers.temp.edges : [];\r\n    \r\n    this._doRemoveEdges(this._toRemoveEdges);\r\n    this._doRemoveNodes(this._toRemoveNodes);\r\n    this._doAddNodes();\r\n    this._doAddEdges();\r\n    \r\n    this._toAddEdges = [];\r\n    this._toAddNodes = [];\r\n    this._toRemoveEdges = [];\r\n    this._toRemoveNodes = [];\r\n    \r\n    this._insertTempLayer();\r\n    this._layers.temp.set(this._actualTempNodes, this._actualTempEdges);\r\n\r\n    this._draw();\r\n    \r\n    return this;\r\n  }\r\n};","/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function max(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var max = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] > max) max = input[i];\n    }\n    return max;\n}\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nexport default function rescale(input, options = {}) {\n    if (!Array.isArray(input)) {\n        throw new TypeError('input must be an array');\n    } else if (input.length === 0) {\n        throw new TypeError('input must not be empty');\n    }\n\n    let output;\n    if (options.output !== undefined) {\n        if (!Array.isArray(options.output)) {\n            throw new TypeError('output option must be an array if specified');\n        }\n        output = options.output;\n    } else {\n        output = new Array(input.length);\n    }\n\n    const currentMin = min(input);\n    const currentMax = max(input);\n\n    if (currentMin === currentMax) {\n        throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n    }\n\n    const {\n        min: minValue = options.autoMinMax ? currentMin : 0,\n        max: maxValue = options.autoMinMax ? currentMax : 1\n    } = options;\n\n    if (minValue >= maxValue) {\n        throw new RangeError('min option must be smaller than max option');\n    }\n\n    const factor = (maxValue - minValue) / (currentMax - currentMin);\n    for (var i = 0; i < input.length; i++) {\n        output[i] = (input[i] - currentMin) * factor + minValue;\n    }\n\n    return output;\n}\n","/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function min(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var min = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] < min) min = input[i];\n    }\n    return min;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\n/**\n * @class LuDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n * @param {Matrix} matrix\n */\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    var lu = matrix.clone();\n    var rows = lu.rows;\n    var columns = lu.columns;\n    var pivotVector = new Array(rows);\n    var pivotSign = 1;\n    var i, j, k, p, s, t, v;\n    var LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isSingular() {\n    var data = this.LU;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      if (data[j][j] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Matrix} value\n   * @return {Matrix}\n   */\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var lu = this.LU;\n    var rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    var count = value.columns;\n    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    var columns = lu.columns;\n    var i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X[k][j] /= lu[k][k];\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get determinant() {\n    var data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    var determinant = this.pivotSign;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      determinant *= data[j][j];\n    }\n    return determinant;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get lowerTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i > j) {\n          X[i][j] = data[i][j];\n        } else if (i === j) {\n          X[i][j] = 1;\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get upperTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i <= j) {\n          X[i][j] = data[i][j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get pivotPermutationVector() {\n    return this.pivotVector.slice();\n  }\n}\n","export function hypotenuse(a, b) {\n  var r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nexport function getFilled2DArray(rows, columns, value) {\n  var array = new Array(rows);\n  for (var i = 0; i < rows; i++) {\n    array[i] = new Array(columns);\n    for (var j = 0; j < columns; j++) {\n      array[i][j] = value;\n    }\n  }\n  return array;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class SingularValueDecomposition\n * @see https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n * @param {Matrix} value\n * @param {object} [options]\n * @param {boolean} [options.computeLeftSingularVectors=true]\n * @param {boolean} [options.computeRightSingularVectors=true]\n * @param {boolean} [options.autoTranspose=false]\n */\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var m = value.rows;\n    var n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n\n    var wantu = Boolean(computeLeftSingularVectors);\n    var wantv = Boolean(computeRightSingularVectors);\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose'\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        var aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    var nu = Math.min(m, n);\n    var ni = Math.min(m + 1, n);\n    var s = new Array(ni);\n    var U = getFilled2DArray(m, nu, 0);\n    var V = getFilled2DArray(n, n, 0);\n\n    var e = new Array(n);\n    var work = new Array(m);\n\n    var si = new Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n    var mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a[i][k]);\n        }\n        if (s[k] !== 0) {\n          if (a[k][k] < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a[i][k] /= s[k];\n          }\n          a[k][k] += 1;\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a[i][k] * a[i][j];\n          }\n          t = -t / a[k][k];\n          for (let i = k; i < m; i++) {\n            a[i][j] += t * a[i][k];\n          }\n        }\n        e[j] = a[k][j];\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U[i][k] = a[i][k];\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a[i][j];\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a[i][j] += t * work[i];\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V[i][k] = e[i];\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U[i][j] = 0;\n        }\n        U[j][j] = 1;\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U[i][k] * U[i][j];\n            }\n            t = -t / U[k][k];\n            for (let i = k; i < m; i++) {\n              U[i][j] += t * U[i][k];\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U[i][k] = -U[i][k];\n          }\n          U[k][k] = 1 + U[k][k];\n          for (let i = 0; i < k - 1; i++) {\n            U[i][k] = 0;\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U[i][k] = 0;\n          }\n          U[k][k] = 1;\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V[i][k] * V[i][j];\n            }\n            t = -t / V[k + 1][k];\n            for (let i = k + 1; i < n; i++) {\n              V[i][j] += t * V[i][k];\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V[i][k] = 0;\n        }\n        V[k][k] = 1;\n      }\n    }\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][p - 1];\n                V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                V[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][k - 1];\n                U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k])\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][j + 1];\n                V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                V[i][j] = t;\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][j + 1];\n                U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V[i][k] = -V[i][k];\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V[i][k + 1];\n                V[i][k + 1] = V[i][k];\n                V[i][k] = t;\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U[i][k + 1];\n                U[i][k + 1] = U[i][k];\n                U[i][k] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      var tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  /**\n   * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).\n   * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :\n   * var svd = SingularValueDecomposition(A);\n   * var x = svd.solve(b);\n   * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)\n   * @return {Matrix} - The vector x\n   */\n  solve(value) {\n    var Y = value;\n    var e = this.threshold;\n    var scols = this.s.length;\n    var Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls[i][i] = 0;\n      } else {\n        Ls[i][i] = 1 / this.s[i];\n      }\n    }\n\n    var U = this.U;\n    var V = this.rightSingularVectors;\n\n    var VL = V.mmul(Ls);\n    var vrows = V.rows;\n    var urows = U.length;\n    var VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL[i][k] * U[j][k];\n        }\n        VLU[i][j] = sum;\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  /**\n   *\n   * @param {Array<number>} value\n   * @return {Matrix}\n   */\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  /**\n   * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :\n   * var svd = SingularValueDecomposition(A);\n   * var inverseA = svd.inverse();\n   * @return {Matrix} - The approximation of the inverse of the matrix\n   */\n  inverse() {\n    var V = this.V;\n    var e = this.threshold;\n    var vrows = V.length;\n    var vcols = V[0].length;\n    var X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X[i][j] = V[i][j] / this.s[j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n\n    var U = this.U;\n\n    var urows = U.length;\n    var ucols = U[0].length;\n    var Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X[i][k] * U[j][k];\n        }\n        Y[i][j] = sum;\n      }\n    }\n\n    return Y;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get norm2() {\n    return this.s[0];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get rank() {\n    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    var r = 0;\n    var s = this.s;\n    for (var i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get diagonal() {\n    return this.s;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get leftSingularVectors() {\n    if (!Matrix.isMatrix(this.U)) {\n      this.U = new Matrix(this.U);\n    }\n    return this.U;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get rightSingularVectors() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import Matrix from './matrix';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  var max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  var max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns'\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  var rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  var columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function getRange(from, to) {\n  var arr = new Array(to - from + 1);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = from + i;\n  }\n  return arr;\n}\n\nexport function sumByRow(matrix) {\n  var sum = Matrix.zeros(matrix.rows, 1);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  var sum = Matrix.zeros(1, matrix.columns);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  var v = 0;\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class BaseView extends AbstractMatrix() {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex\n    );\n  }\n}\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    var indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex]\n    );\n  }\n}\n","import { checkRowIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    rowIndices = checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n","import { checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    columnIndices = checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport LuDecomposition from './dc/lu';\nimport SvDecomposition from './dc/svd';\nimport {\n  checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector,\n  checkRange, checkIndices,\n  sumByRow, sumByColumn, sumAll\n} from './util';\nimport MatrixTransposeView from './views/transpose';\nimport MatrixRowView from './views/row';\nimport MatrixSubView from './views/sub';\nimport MatrixSelectionView from './views/selection';\nimport MatrixRowSelectionView from './views/rowSelection';\nimport MatrixColumnSelectionView from './views/columnSelection';\nimport MatrixColumnView from './views/column';\nimport MatrixFlipRowView from './views/flipRow';\nimport MatrixFlipColumnView from './views/flipColumn';\n\nexport default function AbstractMatrix(superCtor) {\n  if (superCtor === undefined) superCtor = Object;\n\n  /**\n   * Real matrix\n   * @class Matrix\n   * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n   * 2D array containing the data or Matrix instance to clone\n   * @param {number} [nColumns] - Number of columns of the new matrix\n   */\n  class Matrix extends superCtor {\n    static get [Symbol.species]() {\n      return this;\n    }\n\n    /**\n     * Constructs a Matrix with the chosen dimensions from a 1D array\n     * @param {number} newRows - Number of rows\n     * @param {number} newColumns - Number of columns\n     * @param {Array} newData - A 1D array containing data for the matrix\n     * @return {Matrix} - The new matrix\n     */\n    static from1DArray(newRows, newColumns, newData) {\n      var length = newRows * newColumns;\n      if (length !== newData.length) {\n        throw new RangeError('Data length does not match given dimensions');\n      }\n      var newMatrix = new this(newRows, newColumns);\n      for (var row = 0; row < newRows; row++) {\n        for (var column = 0; column < newColumns; column++) {\n          newMatrix.set(row, column, newData[row * newColumns + column]);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static rowVector(newData) {\n      var vector = new this(1, newData.length);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(0, i, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static columnVector(newData) {\n      var vector = new this(newData.length, 1);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(i, 0, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static empty(rows, columns) {\n      return new this(rows, columns);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static zeros(rows, columns) {\n      return this.empty(rows, columns).fill(0);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static ones(rows, columns) {\n      return this.empty(rows, columns).fill(1);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static rand(rows, columns, rng) {\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.set(i, j, rng());\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static randInt(rows, columns, maxValue, rng) {\n      if (maxValue === undefined) maxValue = 1000;\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = Math.floor(rng() * maxValue);\n          matrix.set(i, j, value);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n    static eye(rows, columns, value) {\n      if (columns === undefined) columns = rows;\n      if (value === undefined) value = 1;\n      var min = Math.min(rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, value);\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n    static diag(data, rows, columns) {\n      var l = data.length;\n      if (rows === undefined) rows = l;\n      if (columns === undefined) columns = rows;\n      var min = Math.min(l, rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, data[i]);\n      }\n      return matrix;\n    }\n\n    /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static min(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static max(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n    static checkMatrix(value) {\n      return Matrix.isMatrix(value) ? value : new this(value);\n    }\n\n    /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n    static isMatrix(value) {\n      return (value != null) && (value.klass === 'Matrix');\n    }\n\n    /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n    get size() {\n      return this.rows * this.columns;\n    }\n\n    /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n    apply(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n      }\n      var ii = this.rows;\n      var jj = this.columns;\n      for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n          callback.call(this, i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n    to1DArray() {\n      var array = new Array(this.size);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          array[i * this.columns + j] = this.get(i, j);\n        }\n      }\n      return array;\n    }\n\n    /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n    to2DArray() {\n      var copy = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        copy[i] = new Array(this.columns);\n        for (var j = 0; j < this.columns; j++) {\n          copy[i][j] = this.get(i, j);\n        }\n      }\n      return copy;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row\n         */\n    isRowVector() {\n      return this.rows === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one column\n         */\n    isColumnVector() {\n      return this.columns === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n    isVector() {\n      return (this.rows === 1) || (this.columns === 1);\n    }\n\n    /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n    isSquare() {\n      return this.rows === this.columns;\n    }\n\n    /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n    isSymmetric() {\n      if (this.isSquare()) {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j <= i; j++) {\n            if (this.get(i, j) !== this.get(j, i)) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n      throw new Error('set method is unimplemented');\n    }\n\n    /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n      throw new Error('get method is unimplemented');\n    }\n\n    /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n    repeat(rowRep, colRep) {\n      rowRep = rowRep || 1;\n      colRep = colRep || 1;\n      var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n      for (var i = 0; i < rowRep; i++) {\n        for (var j = 0; j < colRep; j++) {\n          matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n    fill(value) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, value);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n    neg() {\n      return this.mulS(-1);\n    }\n\n    /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n    getRow(index) {\n      checkRowIndex(this, index);\n      var row = new Array(this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        row[i] = this.get(index, i);\n      }\n      return row;\n    }\n\n    /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n    getRowVector(index) {\n      return this.constructor.rowVector(this.getRow(index));\n    }\n\n    /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setRow(index, array) {\n      checkRowIndex(this, index);\n      array = checkRowVector(this, array);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n    swapRows(row1, row2) {\n      checkRowIndex(this, row1);\n      checkRowIndex(this, row2);\n      for (var i = 0; i < this.columns; i++) {\n        var temp = this.get(row1, i);\n        this.set(row1, i, this.get(row2, i));\n        this.set(row2, i, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n    getColumn(index) {\n      checkColumnIndex(this, index);\n      var column = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        column[i] = this.get(i, index);\n      }\n      return column;\n    }\n\n    /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n    getColumnVector(index) {\n      return this.constructor.columnVector(this.getColumn(index));\n    }\n\n    /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setColumn(index, array) {\n      checkColumnIndex(this, index);\n      array = checkColumnVector(this, array);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n    swapColumns(column1, column2) {\n      checkColumnIndex(this, column1);\n      checkColumnIndex(this, column2);\n      for (var i = 0; i < this.rows; i++) {\n        var temp = this.get(i, column1);\n        this.set(i, column1, this.get(i, column2));\n        this.set(i, column2, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulRow(index, value) {\n      checkRowIndex(this, index);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, this.get(index, i) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulColumn(index, value) {\n      checkColumnIndex(this, index);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, this.get(i, index) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n    max() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n    maxIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n    min() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n    minIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    maxRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    maxRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    minRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    minRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    maxColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    maxColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    minColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    minColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n    diag() {\n      var min = Math.min(this.rows, this.columns);\n      var diag = new Array(min);\n      for (var i = 0; i < min; i++) {\n        diag[i] = this.get(i, i);\n      }\n      return diag;\n    }\n\n    /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n    sum(by) {\n      switch (by) {\n        case 'row':\n          return sumByRow(this);\n        case 'column':\n          return sumByColumn(this);\n        default:\n          return sumAll(this);\n      }\n    }\n\n    /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n    mean() {\n      return this.sum() / this.size;\n    }\n\n    /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n    prod() {\n      var prod = 1;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          prod *= this.get(i, j);\n        }\n      }\n      return prod;\n    }\n\n    /**\n         * Returns the norm of a matrix.\n         * @param {string} type - \"frobenius\" (default) or \"max\" return resp. the Frobenius norm and the max norm.\n         * @return {number}\n         */\n    norm(type = 'frobenius') {\n      var result = 0;\n      if (type === 'max') {\n        return this.max();\n      } else if (type === 'frobenius') {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j < this.columns; j++) {\n            result = result + this.get(i, j) * this.get(i, j);\n          }\n        }\n        return Math.sqrt(result);\n      } else {\n        throw new RangeError(`unknown norm type: ${type}`);\n      }\n    }\n\n    /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n    cumulativeSum() {\n      var sum = 0;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          sum += this.get(i, j);\n          this.set(i, j, sum);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n    dot(vector2) {\n      if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n      var vector1 = this.to1DArray();\n      if (vector1.length !== vector2.length) {\n        throw new RangeError('vectors do not have the same size');\n      }\n      var dot = 0;\n      for (var i = 0; i < vector1.length; i++) {\n        dot += vector1[i] * vector2[i];\n      }\n      return dot;\n    }\n\n    /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    mmul(other) {\n      other = this.constructor.checkMatrix(other);\n      if (this.columns !== other.rows) {\n        // eslint-disable-next-line no-console\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n      }\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.columns;\n\n      var result = new this.constructor[Symbol.species](m, p);\n\n      var Bcolj = new Array(n);\n      for (var j = 0; j < p; j++) {\n        for (var k = 0; k < n; k++) {\n          Bcolj[k] = other.get(k, j);\n        }\n\n        for (var i = 0; i < m; i++) {\n          var s = 0;\n          for (k = 0; k < n; k++) {\n            s += this.get(i, k) * Bcolj[k];\n          }\n\n          result.set(i, j, s);\n        }\n      }\n      return result;\n    }\n\n    strassen2x2(other) {\n      var result = new this.constructor[Symbol.species](2, 2);\n      const a11 = this.get(0, 0);\n      const b11 = other.get(0, 0);\n      const a12 = this.get(0, 1);\n      const b12 = other.get(0, 1);\n      const a21 = this.get(1, 0);\n      const b21 = other.get(1, 0);\n      const a22 = this.get(1, 1);\n      const b22 = other.get(1, 1);\n\n      // Compute intermediate values.\n      const m1 = (a11 + a22) * (b11 + b22);\n      const m2 = (a21 + a22) * b11;\n      const m3 = a11 * (b12 - b22);\n      const m4 = a22 * (b21 - b11);\n      const m5 = (a11 + a12) * b22;\n      const m6 = (a21 - a11) * (b11 + b12);\n      const m7 = (a12 - a22) * (b21 + b22);\n\n      // Combine intermediate values into the output.\n      const c00 = m1 + m4 - m5 + m7;\n      const c01 = m3 + m5;\n      const c10 = m2 + m4;\n      const c11 = m1 - m2 + m3 + m6;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      return result;\n    }\n\n    strassen3x3(other) {\n      var result = new this.constructor[Symbol.species](3, 3);\n\n      const a00 = this.get(0, 0);\n      const a01 = this.get(0, 1);\n      const a02 = this.get(0, 2);\n      const a10 = this.get(1, 0);\n      const a11 = this.get(1, 1);\n      const a12 = this.get(1, 2);\n      const a20 = this.get(2, 0);\n      const a21 = this.get(2, 1);\n      const a22 = this.get(2, 2);\n\n      const b00 = other.get(0, 0);\n      const b01 = other.get(0, 1);\n      const b02 = other.get(0, 2);\n      const b10 = other.get(1, 0);\n      const b11 = other.get(1, 1);\n      const b12 = other.get(1, 2);\n      const b20 = other.get(2, 0);\n      const b21 = other.get(2, 1);\n      const b22 = other.get(2, 2);\n\n      const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n      const m2 = (a00 - a10) * (-b01 + b11);\n      const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n      const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n      const m5 = (a10 + a11) * (-b00 + b01);\n      const m6 = a00 * b00;\n      const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n      const m8 = (-a00 + a20) * (b02 - b12);\n      const m9 = (a20 + a21) * (-b00 + b02);\n      const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n      const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n      const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n      const m13 = (a02 - a22) * (b11 - b21);\n      const m14 = a02 * b20;\n      const m15 = (a21 + a22) * (-b20 + b21);\n      const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n      const m17 = (a02 - a12) * (b12 - b22);\n      const m18 = (a11 + a12) * (-b20 + b22);\n      const m19 = a01 * b10;\n      const m20 = a12 * b21;\n      const m21 = a10 * b02;\n      const m22 = a20 * b01;\n      const m23 = a22 * b22;\n\n      const c00 = m6 + m14 + m19;\n      const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n      const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n      const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n      const c11 = m2 + m4 + m5 + m6 + m20;\n      const c12 = m14 + m16 + m17 + m18 + m21;\n      const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n      const c21 = m12 + m13 + m14 + m15 + m22;\n      const c22 = m6 + m7 + m8 + m9 + m23;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(0, 2, c02);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      result.set(1, 2, c12);\n      result.set(2, 0, c20);\n      result.set(2, 1, c21);\n      result.set(2, 2, c22);\n      return result;\n    }\n\n    /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n    mmulStrassen(y) {\n      var x = this.clone();\n      var r1 = x.rows;\n      var c1 = x.columns;\n      var r2 = y.rows;\n      var c2 = y.columns;\n      if (c1 !== r2) {\n        // eslint-disable-next-line no-console\n        console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n      }\n\n      // Put a matrix into the top left of a matrix of zeros.\n      // `rows` and `cols` are the dimensions of the output matrix.\n      function embed(mat, rows, cols) {\n        var r = mat.rows;\n        var c = mat.columns;\n        if ((r === rows) && (c === cols)) {\n          return mat;\n        } else {\n          var resultat = Matrix.zeros(rows, cols);\n          resultat = resultat.setSubMatrix(mat, 0, 0);\n          return resultat;\n        }\n      }\n\n\n      // Make sure both matrices are the same size.\n      // This is exclusively for simplicity:\n      // this algorithm can be implemented with matrices of different sizes.\n\n      var r = Math.max(r1, r2);\n      var c = Math.max(c1, c2);\n      x = embed(x, r, c);\n      y = embed(y, r, c);\n\n      // Our recursive multiplication function.\n      function blockMult(a, b, rows, cols) {\n        // For small matrices, resort to naive multiplication.\n        if (rows <= 512 || cols <= 512) {\n          return a.mmul(b); // a is equivalent to this\n        }\n\n        // Apply dynamic padding.\n        if ((rows % 2 === 1) && (cols % 2 === 1)) {\n          a = embed(a, rows + 1, cols + 1);\n          b = embed(b, rows + 1, cols + 1);\n        } else if (rows % 2 === 1) {\n          a = embed(a, rows + 1, cols);\n          b = embed(b, rows + 1, cols);\n        } else if (cols % 2 === 1) {\n          a = embed(a, rows, cols + 1);\n          b = embed(b, rows, cols + 1);\n        }\n\n        var halfRows = parseInt(a.rows / 2, 10);\n        var halfCols = parseInt(a.columns / 2, 10);\n        // Subdivide input matrices.\n        var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n        var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n        var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n        var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n        var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n        var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n        var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n        // Compute intermediate values.\n        var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n        var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n        var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n        var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n        var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n        var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n        var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n        // Combine intermediate values into the output.\n        var c11 = Matrix.add(m1, m4);\n        c11.sub(m5);\n        c11.add(m7);\n        var c12 = Matrix.add(m3, m5);\n        var c21 = Matrix.add(m2, m4);\n        var c22 = Matrix.sub(m1, m2);\n        c22.add(m3);\n        c22.add(m6);\n\n        // Crop output to the desired size (undo dynamic padding).\n        var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n        resultat = resultat.setSubMatrix(c11, 0, 0);\n        resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n        resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n        resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n        return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n      }\n      return blockMult(x, y, r, c);\n    }\n\n    /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n    scaleRows(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.rows; i++) {\n        var scaled = rescale(this.getRow(i), { min, max });\n        newMatrix.setRow(i, scaled);\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n    scaleColumns(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        var scaled = rescale(this.getColumn(i), {\n          min: min,\n          max: max\n        });\n        newMatrix.setColumn(i, scaled);\n      }\n      return newMatrix;\n    }\n\n\n    /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    kroneckerProduct(other) {\n      other = this.constructor.checkMatrix(other);\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.rows;\n      var q = other.columns;\n\n      var result = new this.constructor[Symbol.species](m * p, n * q);\n      for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n          for (var k = 0; k < p; k++) {\n            for (var l = 0; l < q; l++) {\n              result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n            }\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n    transpose() {\n      var result = new this.constructor[Symbol.species](this.columns, this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result.set(j, i, this.get(i, j));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortRows(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.rows; i++) {\n        this.setRow(i, this.getRow(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortColumns(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.columns; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n    subMatrix(startRow, endRow, startColumn, endColumn) {\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n      for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n    subMatrixRow(indices, startColumn, endColumn) {\n      if (startColumn === undefined) startColumn = 0;\n      if (endColumn === undefined) endColumn = this.columns - 1;\n      if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          if (indices[i] < 0 || indices[i] >= this.rows) {\n            throw new RangeError(`Row index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n    subMatrixColumn(indices, startRow, endRow) {\n      if (startRow === undefined) startRow = 0;\n      if (endRow === undefined) endRow = this.rows - 1;\n      if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n          if (indices[i] < 0 || indices[i] >= this.columns) {\n            throw new RangeError(`Column index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n    setSubMatrix(matrix, startRow, startColumn) {\n      matrix = this.constructor.checkMatrix(matrix);\n      var endRow = startRow + matrix.rows - 1;\n      var endColumn = startColumn + matrix.columns - 1;\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n          this[startRow + i][startColumn + j] = matrix.get(i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n    selection(rowIndices, columnIndices) {\n      var indices = checkIndices(this, rowIndices, columnIndices);\n      var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n      for (var i = 0; i < indices.row.length; i++) {\n        var rowIndex = indices.row[i];\n        for (var j = 0; j < indices.column.length; j++) {\n          var columnIndex = indices.column[j];\n          newMatrix[i][j] = this.get(rowIndex, columnIndex);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n    trace() {\n      var min = Math.min(this.rows, this.columns);\n      var trace = 0;\n      for (var i = 0; i < min; i++) {\n        trace += this.get(i, i);\n      }\n      return trace;\n    }\n\n    /*\n         Matrix views\n         */\n\n    /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n    transposeView() {\n      return new MatrixTransposeView(this);\n    }\n\n    /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n    rowView(row) {\n      checkRowIndex(this, row);\n      return new MatrixRowView(this, row);\n    }\n\n    /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n    columnView(column) {\n      checkColumnIndex(this, column);\n      return new MatrixColumnView(this, column);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n    flipRowView() {\n      return new MatrixFlipRowView(this);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n    flipColumnView() {\n      return new MatrixFlipColumnView(this);\n    }\n\n    /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n    subMatrixView(startRow, endRow, startColumn, endColumn) {\n      return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n    }\n\n    /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n    selectionView(rowIndices, columnIndices) {\n      return new MatrixSelectionView(this, rowIndices, columnIndices);\n    }\n\n    /**\n         * Returns a view of the row indices\n         * @example\n         * // resulting vector is [[1,2,3], [1,2,3]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])\n         * @param {Array<number>} rowIndices\n         * @return {MatrixRowSelectionView}\n         */\n    rowSelectionView(rowIndices) {\n      return new MatrixRowSelectionView(this, rowIndices);\n    }\n\n    /**\n         * Returns a view of the column indices\n         * @example\n         * // resulting vector is [[2, 2], [5, 5]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])\n         * @param {Array<number>} columnIndices\n         * @return {MatrixColumnSelectionView}\n         */\n    columnSelectionView(columnIndices) {\n      return new MatrixColumnSelectionView(this, columnIndices);\n    }\n\n\n    /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n    det() {\n      if (this.isSquare()) {\n        var a, b, c, d;\n        if (this.columns === 2) {\n          // 2 x 2 matrix\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(1, 0);\n          d = this.get(1, 1);\n\n          return a * d - (b * c);\n        } else if (this.columns === 3) {\n          // 3 x 3 matrix\n          var subMatrix0, subMatrix1, subMatrix2;\n          subMatrix0 = this.selectionView([1, 2], [1, 2]);\n          subMatrix1 = this.selectionView([1, 2], [0, 2]);\n          subMatrix2 = this.selectionView([1, 2], [0, 1]);\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(0, 2);\n\n          return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n        } else {\n          // general purpose determinant using the LU decomposition\n          return new LuDecomposition(this).determinant;\n        }\n      } else {\n        throw Error('Determinant can only be calculated for a square matrix.');\n      }\n    }\n\n    /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n    pseudoInverse(threshold) {\n      if (threshold === undefined) threshold = Number.EPSILON;\n      var svdSolution = new SvDecomposition(this, { autoTranspose: true });\n\n      var U = svdSolution.leftSingularVectors;\n      var V = svdSolution.rightSingularVectors;\n      var s = svdSolution.diagonal;\n\n      for (var i = 0; i < s.length; i++) {\n        if (Math.abs(s[i]) > threshold) {\n          s[i] = 1.0 / s[i];\n        } else {\n          s[i] = 0.0;\n        }\n      }\n\n      // convert list to diagonal\n      s = this.constructor[Symbol.species].diag(s);\n      return V.mmul(s.mmul(U.transposeView()));\n    }\n\n    /**\n         * Creates an exact and independent copy of the matrix\n         * @return {Matrix}\n         */\n    clone() {\n      var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n      for (var row = 0; row < this.rows; row++) {\n        for (var column = 0; column < this.columns; column++) {\n          newMatrix.set(row, column, this.get(row, column));\n        }\n      }\n      return newMatrix;\n    }\n  }\n\n  Matrix.prototype.klass = 'Matrix';\n\n  function compareNumbers(a, b) {\n    return a - b;\n  }\n\n  /*\n     Synonyms\n     */\n\n  Matrix.random = Matrix.rand;\n  Matrix.diagonal = Matrix.diag;\n  Matrix.prototype.diagonal = Matrix.prototype.diag;\n  Matrix.identity = Matrix.eye;\n  Matrix.prototype.negate = Matrix.prototype.neg;\n  Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n  Matrix.prototype.determinant = Matrix.prototype.det;\n\n  /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n  var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n  var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n  var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n  var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n  var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var staticMethodWithOneArg = staticMethodWithArgs;\n\n  var operators = [\n    // Arithmetic operators\n    ['+', 'add'],\n    ['-', 'sub', 'subtract'],\n    ['*', 'mul', 'multiply'],\n    ['/', 'div', 'divide'],\n    ['%', 'mod', 'modulus'],\n    // Bitwise operators\n    ['&', 'and'],\n    ['|', 'or'],\n    ['^', 'xor'],\n    ['<<', 'leftShift'],\n    ['>>', 'signPropagatingRightShift'],\n    ['>>>', 'rightShift', 'zeroFillRightShift']\n  ];\n\n  var i;\n  var eval2 = eval; // eslint-disable-line no-eval\n  for (var operator of operators) {\n    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, { name: operator[1], op: operator[0] }));\n    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, { name: `${operator[1]}S`, op: operator[0] }));\n    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, { name: `${operator[1]}M`, op: operator[0] }));\n    var staticOp = eval2(fillTemplateFunction(staticOperator, { name: operator[1] }));\n    for (i = 1; i < operator.length; i++) {\n      Matrix.prototype[operator[i]] = inplaceOp;\n      Matrix.prototype[`${operator[i]}S`] = inplaceOpS;\n      Matrix.prototype[`${operator[i]}M`] = inplaceOpM;\n      Matrix[operator[i]] = staticOp;\n    }\n  }\n\n  var methods = [['~', 'not']];\n\n  [\n    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n  ].forEach(function (mathMethod) {\n    methods.push([`Math.${mathMethod}`, mathMethod]);\n  });\n\n  for (var method of methods) {\n    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, { name: method[1], method: method[0] }));\n    var staticMeth = eval2(fillTemplateFunction(staticMethod, { name: method[1] }));\n    for (i = 1; i < method.length; i++) {\n      Matrix.prototype[method[i]] = inplaceMeth;\n      Matrix[method[i]] = staticMeth;\n    }\n  }\n\n  var methodsWithArgs = [['Math.pow', 1, 'pow']];\n\n  for (var methodWithArg of methodsWithArgs) {\n    var args = 'arg0';\n    for (i = 1; i < methodWithArg[1]; i++) {\n      args += `, arg${i}`;\n    }\n    if (methodWithArg[1] !== 1) {\n      var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {\n        name: methodWithArg[2],\n        method: methodWithArg[0],\n        args: args\n      }));\n      var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, { name: methodWithArg[2], args: args }));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n        Matrix[methodWithArg[i]] = staticMethWithArgs;\n      }\n    } else {\n      var tmplVar = {\n        name: methodWithArg[2],\n        args: args,\n        method: methodWithArg[0]\n      };\n      var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n      var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n      var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n      var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n        Matrix.prototype[`${methodWithArg[i]}M`] = inplaceMethodM;\n        Matrix.prototype[`${methodWithArg[i]}S`] = inplaceMethodS;\n        Matrix[methodWithArg[i]] = staticMethod2;\n      }\n    }\n  }\n\n  function fillTemplateFunction(template, values) {\n    for (var value in values) {\n      template = template.replace(new RegExp(`%${value}%`, 'g'), values[value]);\n    }\n    return template;\n  }\n\n  return Matrix;\n}\n","import AbstractMatrix from './abstractMatrix';\nimport {\n  checkColumnIndex,\n  checkColumnVector,\n  checkRowIndex,\n  checkRowVector\n} from './util';\n\nexport default class Matrix extends AbstractMatrix(Array) {\n  constructor(nRows, nColumns) {\n    var i;\n    if (arguments.length === 1 && typeof nRows === 'number') {\n      return new Array(nRows);\n    }\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      super(nRows);\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (i = 0; i < nRows; i++) {\n          this[i] = new Array(nColumns);\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const matrix = nRows;\n      nRows = matrix.length;\n      nColumns = matrix[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element'\n        );\n      }\n      super(nRows);\n      for (i = 0; i < nRows; i++) {\n        if (matrix[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this[i] = [].concat(matrix[i]);\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array'\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n  }\n\n  /**\n   * Removes a row from the given index\n   * @param {number} index - Row index\n   * @return {Matrix} this\n   */\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a row at the given index\n   * @param {number} [index = this.rows] - Row index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = checkRowVector(this, array, true);\n    this.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  /**\n   * Removes a column from the given index\n   * @param {number} index - Column index\n   * @return {Matrix} this\n   */\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a column at the given index\n   * @param {number} [index = this.columns] - Column index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix() {\n  /**\n   * @class WrapperMatrix1D\n   * @param {Array<number>} data\n   * @param {object} [options]\n   * @param {object} [options.rows = 1]\n   */\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix() {\n  /**\n   * @class WrapperMatrix2D\n   * @param {Array<Array<number>>} data\n   */\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\n/**\n * @param {Array<Array<number>>|Array<number>} array\n * @param {object} [options]\n * @param {object} [options.rows = 1]\n * @return {WrapperMatrix1D|WrapperMatrix2D}\n */\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse } from './util';\n\n/**\n * @class QrDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n * @param {Matrix} value\n */\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var qr = value.clone();\n    var m = value.rows;\n    var n = value.columns;\n    var rdiag = new Array(n);\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  /**\n   * Solve a problem of least square (Ax=b) by using the QR decomposition. Useful when A is rectangular, but not working when A is singular.\n   * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :\n   * var qr = QrDecomposition(A);\n   * var x = qr.solve(b);\n   * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)\n   * @return {Matrix} - The vector x\n   */\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var qr = this.QR;\n    var m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    var count = value.columns;\n    var X = value.clone();\n    var n = qr.columns;\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr[i][k] * X[i][j];\n        }\n        s = -s / qr[k][k];\n        for (i = k; i < m; i++) {\n          X[i][j] += s * qr[i][k];\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X[k][j] /= this.Rdiag[k];\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * qr[i][k];\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isFullRank() {\n    var columns = this.QR.columns;\n    for (var i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get upperTriangularMatrix() {\n    var qr = this.QR;\n    var n = qr.columns;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X[i][j] = qr[i][j];\n        } else if (i === j) {\n          X[i][j] = this.Rdiag[i];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get orthogonalMatrix() {\n    var qr = this.QR;\n    var rows = qr.rows;\n    var columns = qr.columns;\n    var X = new Matrix(rows, columns);\n    var i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X[i][k] = 0;\n      }\n      X[k][k] = 1;\n      for (j = k; j < columns; j++) {\n        if (qr[k][k] !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr[i][k] * X[i][j];\n          }\n\n          s = -s / qr[k][k];\n\n          for (i = k; i < rows; i++) {\n            X[i][j] += s * qr[i][k];\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\n\nimport { Matrix, WrapperMatrix2D } from './index';\n\n/**\n * Computes the inverse of a Matrix\n * @param {Matrix} matrix\n * @param {boolean} [useSVD=false]\n * @return {Matrix}\n */\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\n/**\n *\n * @param {Matrix} leftHandSide\n * @param {Matrix} rightHandSide\n * @param {boolean} [useSVD = false]\n * @return {Matrix}\n */\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import max from 'ml-array-max';\n\nimport Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\n// function used by rowsDependencies\nfunction xrange(n, exception) {\n  var range = [];\n  for (var i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\n// function used by rowsDependencies\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    var returnArray = matrix.addRow(index, [0]);\n    for (var i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\n/**\n * Creates a matrix which represents the dependencies between rows.\n * If a row is a linear combination of others rows, the result will be a row with the coefficients of this combination.\n * For example : for A = [[2, 0, 0, 1], [0, 1, 6, 0], [0, 3, 0, 1], [0, 0, 1, 0], [0, 1, 2, 0]], the result will be [[0, 0, 0, 0, 0], [0, 0, 0, 4, 1], [0, 0, 0, 0, 0], [0, 0.25, 0, 0, -0.25], [0, 1, 0, -4, 0]]\n * @param {Matrix} matrix\n * @param {Object} [options] includes thresholdValue and thresholdError.\n * @param {number} [options.thresholdValue = 10e-10] If an absolute value is inferior to this threshold, it will equals zero.\n * @param {number} [options.thresholdError = 10e-10] If the error is inferior to that threshold, the linear combination found is accepted and the row is dependent from other rows.\n * @return {Matrix} the matrix which represents the dependencies between rows.\n */\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n\n  var n = matrix.rows;\n  var results = new Matrix(n, n);\n\n  for (var i = 0; i < n; i++) {\n    var b = Matrix.columnVector(matrix.getRow(i));\n    var Abis = matrix.subMatrixRow(xrange(n, i)).transposeView();\n    var svd = new SingularValueDecomposition(Abis);\n    var x = svd.solve(b);\n    var error = max(\n      Matrix.sub(b, Abis.mmul(x))\n        .abs()\n        .to1DArray()\n    );\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError)\n    );\n  }\n  return results;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class EigenvalueDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n * @param {Matrix} matrix\n * @param {object} [options]\n * @param {boolean} [options.assumeSymmetric=false]\n */\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns;\n    var V = getFilled2DArray(n, n, 0);\n    var d = new Array(n);\n    var e = new Array(n);\n    var value = matrix;\n    var i, j;\n\n    var isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V[i][j] = value.get(i, j);\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      var H = getFilled2DArray(n, n, 0);\n      var ort = new Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H[i][j] = value.get(i, j);\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get realEigenvalues() {\n    return this.d;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get imaginaryEigenvalues() {\n    return this.e;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get eigenvectorMatrix() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    var n = this.n;\n    var e = this.e;\n    var d = this.d;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X[i][j] = 0;\n      }\n      X[i][i] = d[i];\n      if (e[i] > 0) {\n        X[i][i + 1] = e[i];\n      } else if (e[i] < 0) {\n        X[i][i - 1] = e[i];\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  var f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n        V[j][i] = 0;\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V[j][i] = f;\n        g = e[j] + V[j][j] * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V[k][j] * d[k];\n          e[k] += V[k][j] * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V[k][j] -= f * e[k] + g * d[k];\n        }\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V[n - 1][i] = V[i][i];\n    V[i][i] = 1;\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V[k][i + 1] / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V[k][i + 1] * V[k][j];\n        }\n        for (k = 0; k <= i; k++) {\n          V[k][j] -= g * d[k];\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V[k][i + 1] = 0;\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n    V[n - 1][j] = 0;\n  }\n\n  V[n - 1][n - 1] = 1;\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  var g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  var f = 0;\n  var tst1 = 0;\n  var eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V[k][i + 1];\n            V[k][i + 1] = s * V[k][i] + c * h;\n            V[k][i] = c * V[k][i] - s * h;\n          }\n        }\n\n        p = -s * s2 * c3 * el1 * e[l] / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V[j][i];\n        V[j][i] = V[j][k];\n        V[j][k] = p;\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  var low = 0;\n  var high = n - 1;\n  var f, g, h, i, j, m;\n  var scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H[i][m - 1]);\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H[i][m - 1] / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H[i][j];\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H[i][j] -= f * ort[i];\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H[i][j];\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H[i][j] -= f * ort[j];\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H[m][m - 1] = scale * g;\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V[i][j] = i === j ? 1 : 0;\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H[m][m - 1] !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H[i][m - 1];\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V[i][j];\n        }\n\n        g = g / ort[m] / H[m][m - 1];\n        for (i = m; i <= high; i++) {\n          V[i][j] += g * ort[i];\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  var n = nn - 1;\n  var low = 0;\n  var high = nn - 1;\n  var eps = Number.EPSILON;\n  var exshift = 0;\n  var norm = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var z = 0;\n  var iter = 0;\n  var i, j, k, l, m, t, w, x, y;\n  var ra, sa, vr, vi;\n  var notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H[i][i];\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H[i][j]);\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H[l][l - 1]) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H[n][n] = H[n][n] + exshift;\n      d[n] = H[n][n];\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H[n][n - 1] * H[n - 1][n];\n      p = (H[n - 1][n - 1] - H[n][n]) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H[n][n] = H[n][n] + exshift;\n      H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n      x = H[n][n];\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H[n][n - 1];\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H[n - 1][j];\n          H[n - 1][j] = q * z + p * H[n][j];\n          H[n][j] = q * H[n][j] - p * z;\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H[i][n - 1];\n          H[i][n - 1] = q * z + p * H[i][n];\n          H[i][n] = q * H[i][n] - p * z;\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V[i][n - 1];\n          V[i][n - 1] = q * z + p * V[i][n];\n          V[i][n] = q * V[i][n] - p * z;\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H[n][n];\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H[n - 1][n - 1];\n        w = H[n][n - 1] * H[n - 1][n];\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H[i][i] -= x;\n        }\n        s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H[i][i] -= s;\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H[m][m];\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n        q = H[m + 1][m + 1] - z - r - s;\n        r = H[m + 2][m + 1];\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H[m - 1][m - 1]) +\n                Math.abs(z) +\n                Math.abs(H[m + 1][m + 1])))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H[i][i - 2] = 0;\n        if (i > m + 2) {\n          H[i][i - 3] = 0;\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H[k][k - 1];\n          q = H[k + 1][k - 1];\n          r = notlast ? H[k + 2][k - 1] : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H[k][k - 1] = -s * x;\n          } else if (l !== m) {\n            H[k][k - 1] = -H[k][k - 1];\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H[k][j] + q * H[k + 1][j];\n            if (notlast) {\n              p = p + r * H[k + 2][j];\n              H[k + 2][j] = H[k + 2][j] - p * z;\n            }\n\n            H[k][j] = H[k][j] - p * x;\n            H[k + 1][j] = H[k + 1][j] - p * y;\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H[i][k] + y * H[i][k + 1];\n            if (notlast) {\n              p = p + z * H[i][k + 2];\n              H[i][k + 2] = H[i][k + 2] - p * r;\n            }\n\n            H[i][k] = H[i][k] - p;\n            H[i][k + 1] = H[i][k + 1] - p * q;\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V[i][k] + y * V[i][k + 1];\n            if (notlast) {\n              p = p + z * V[i][k + 2];\n              V[i][k + 2] = V[i][k + 2] - p * r;\n            }\n\n            V[i][k] = V[i][k] - p;\n            V[i][k + 1] = V[i][k + 1] - p * q;\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H[n][n] = 1;\n      for (i = n - 1; i >= 0; i--) {\n        w = H[i][i] - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H[i][j] * H[j][n];\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H[i][n] = w !== 0 ? -r / w : -r / (eps * norm);\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H[i][n] = t;\n            H[i + 1][n] =\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z;\n          }\n\n          t = Math.abs(H[i][n]);\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n        H[n - 1][n - 1] = q / H[n][n - 1];\n        H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n      } else {\n        cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n        H[n - 1][n - 1] = cdivres[0];\n        H[n - 1][n] = cdivres[1];\n      }\n\n      H[n][n - 1] = 0;\n      H[n][n] = 1;\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H[i][j] * H[j][n - 1];\n          sa = sa + H[i][j] * H[j][n];\n        }\n\n        w = H[i][i] - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi\n            );\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n              H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n            } else {\n              cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n              H[i + 1][n - 1] = cdivres[0];\n              H[i + 1][n] = cdivres[1];\n            }\n          }\n\n          t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n - 1] = H[j][n - 1] / t;\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V[i][j] = H[i][j];\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V[i][k] * H[k][j];\n      }\n      V[i][j] = z;\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  var r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\n/**\n * @class CholeskyDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n * @param {Matrix} value\n */\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value;\n    var dimension = a.rows;\n    var l = new Matrix(dimension, dimension);\n    var positiveDefinite = true;\n    var i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      var Lrowj = l[j];\n      var d = 0;\n      for (k = 0; k < j; k++) {\n        var Lrowk = l[k];\n        var s = 0;\n        for (i = 0; i < k; i++) {\n          s += Lrowk[i] * Lrowj[i];\n        }\n        Lrowj[k] = s = (a.get(j, k) - s) / l[k][k];\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l[j][j] = Math.sqrt(Math.max(d, 0));\n      for (k = j + 1; k < dimension; k++) {\n        l[j][k] = 0;\n      }\n    }\n\n    if (!positiveDefinite) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n  }\n\n  /**\n   *\n   * @param {Matrix} value\n   * @return {Matrix}\n   */\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var l = this.L;\n    var dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n\n    var count = value.columns;\n    var B = value.clone();\n    var i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B[k][j] -= B[i][j] * l[k][i];\n        }\n        B[k][j] /= l[k][k];\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B[k][j] -= B[i][j] * l[i][k];\n        }\n        B[k][j] /= l[k][k];\n      }\n    }\n\n    return B;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n"],"sourceRoot":""}